(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js ***!
  \*********************************************************************************************************/
/*! exports provided: conf, language */function(e,n,t){"use strict";t.r(n),t.d(n,"conf",function(){return o}),t.d(n,"language",function(){return r});var o={comments:{lineComment:"#"},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],folding:{offSide:!0}},r={tokenPostfix:".yaml",brackets:[{token:"delimiter.bracket",open:"{",close:"}"},{token:"delimiter.square",open:"[",close:"]"}],keywords:["true","True","TRUE","false","False","FALSE","null","Null","Null","~"],numberInteger:/(?:0|[+-]?[0-9]+)/,numberFloat:/(?:0|[+-]?[0-9]+)(?:\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,numberOctal:/0o[0-7]+/,numberHex:/0x[0-9a-fA-F]+/,numberInfinity:/[+-]?\.(?:inf|Inf|INF)/,numberNaN:/\.(?:nan|Nan|NAN)/,numberDate:/\d{4}-\d\d-\d\d([Tt ]\d\d:\d\d:\d\d(\.\d+)?(( ?[+-]\d\d?(:\d\d)?)|Z)?)?/,escapes:/\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/%[^ ]+.*$/,"meta.directive"],[/---/,"operators.directivesEnd"],[/\.{3}/,"operators.documentEnd"],[/[-?:](?= )/,"operators"],{include:"@anchor"},{include:"@tagHandle"},{include:"@flowCollections"},{include:"@blockStyle"},[/@numberInteger(?![ \t]*\S+)/,"number"],[/@numberFloat(?![ \t]*\S+)/,"number.float"],[/@numberOctal(?![ \t]*\S+)/,"number.octal"],[/@numberHex(?![ \t]*\S+)/,"number.hex"],[/@numberInfinity(?![ \t]*\S+)/,"number.infinity"],[/@numberNaN(?![ \t]*\S+)/,"number.nan"],[/@numberDate(?![ \t]*\S+)/,"number.date"],[/(".*?"|'.*?'|.*?)([ \t]*)(:)( |$)/,["type","white","operators","white"]],{include:"@flowScalars"},[/.+$/,{cases:{"@keywords":"keyword","@default":"string"}}]],object:[{include:"@whitespace"},{include:"@comment"},[/\}/,"@brackets","@pop"],[/,/,"delimiter.comma"],[/:(?= )/,"operators"],[/(?:".*?"|'.*?'|[^,\{\[]+?)(?=: )/,"type"],{include:"@flowCollections"},{include:"@flowScalars"},{include:"@tagHandle"},{include:"@anchor"},{include:"@flowNumber"},[/[^\},]+/,{cases:{"@keywords":"keyword","@default":"string"}}]],array:[{include:"@whitespace"},{include:"@comment"},[/\]/,"@brackets","@pop"],[/,/,"delimiter.comma"],{include:"@flowCollections"},{include:"@flowScalars"},{include:"@tagHandle"},{include:"@anchor"},{include:"@flowNumber"},[/[^\],]+/,{cases:{"@keywords":"keyword","@default":"string"}}]],string:[[/[^\\"']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/["']/,{cases:{"$#==$S2":{token:"string",next:"@pop"},"@default":"string"}}]],multiString:[[/^( +).+$/,"string","@multiStringContinued.$1"]],multiStringContinued:[[/^( *).+$/,{cases:{"$1==$S2":"string","@default":{token:"@rematch",next:"@popall"}}}]],whitespace:[[/[ \t\r\n]+/,"white"]],comment:[[/#.*$/,"comment"]],flowCollections:[[/\[/,"@brackets","@array"],[/\{/,"@brackets","@object"]],flowScalars:[[/"/,"string",'@string."'],[/'/,"string","@string.'"]],blockStyle:[[/[>|][0-9]*[+-]?$/,"operators","@multiString"]],flowNumber:[[/@numberInteger(?=[ \t]*[,\]\}])/,"number"],[/@numberFloat(?=[ \t]*[,\]\}])/,"number.float"],[/@numberOctal(?=[ \t]*[,\]\}])/,"number.octal"],[/@numberHex(?=[ \t]*[,\]\}])/,"number.hex"],[/@numberInfinity(?=[ \t]*[,\]\}])/,"number.infinity"],[/@numberNaN(?=[ \t]*[,\]\}])/,"number.nan"],[/@numberDate(?=[ \t]*[,\]\}])/,"number.date"]],tagHandle:[[/\![^ ]*/,"tag"]],anchor:[[/[&*][^ ]+/,"namespace"]]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL3lhbWwveWFtbC5qcyJdLCJuYW1lcyI6WyJjb25mIiwiY29tbWVudHMiLCJsaW5lQ29tbWVudCIsImJyYWNrZXRzIiwiYXV0b0Nsb3NpbmdQYWlycyIsIm9wZW4iLCJjbG9zZSIsInN1cnJvdW5kaW5nUGFpcnMiLCJmb2xkaW5nIiwib2ZmU2lkZSIsImxhbmd1YWdlIiwidG9rZW5Qb3N0Zml4IiwidG9rZW4iLCJrZXl3b3JkcyIsIm51bWJlckludGVnZXIiLCJudW1iZXJGbG9hdCIsIm51bWJlck9jdGFsIiwibnVtYmVySGV4IiwibnVtYmVySW5maW5pdHkiLCJudW1iZXJOYU4iLCJudW1iZXJEYXRlIiwiZXNjYXBlcyIsInRva2VuaXplciIsInJvb3QiLCJpbmNsdWRlIiwiY2FzZXMiLCJAa2V5d29yZHMiLCJAZGVmYXVsdCIsIm9iamVjdCIsImFycmF5Iiwic3RyaW5nIiwiJCM9PSRTMiIsIm5leHQiLCJtdWx0aVN0cmluZyIsIm11bHRpU3RyaW5nQ29udGludWVkIiwiJDE9PSRTMiIsIndoaXRlc3BhY2UiLCJjb21tZW50IiwiZmxvd0NvbGxlY3Rpb25zIiwiZmxvd1NjYWxhcnMiLCJibG9ja1N0eWxlIiwiZmxvd051bWJlciIsInRhZ0hhbmRsZSIsImFuY2hvciJdLCJtYXBwaW5ncyI6Ijs7OztxSkFBQSxJQUFBQSxHQUNBQyxVQUNBQyxZQUFBLEtBRUFDLFdBQ0EsSUFBVyxNQUNYLFVBQ0EsVUFFQUMsbUJBQ1NDLEtBQUEsSUFBU0MsTUFBQSxNQUNURCxLQUFBLElBQUFDLE1BQUEsTUFDQUQsS0FBQSxJQUFBQyxNQUFBLE1BQ0FELEtBQUEsSUFBQUMsTUFBQSxNQUNBRCxLQUFBLElBQUFDLE1BQUEsTUFFVEMsbUJBQ1NGLEtBQUEsSUFBU0MsTUFBQSxNQUNURCxLQUFBLElBQUFDLE1BQUEsTUFDQUQsS0FBQSxJQUFBQyxNQUFBLE1BQ0FELEtBQUEsSUFBQUMsTUFBQSxNQUNBRCxLQUFBLElBQUFDLE1BQUEsTUFFVEUsU0FDQUMsU0FBQSxJQUdBQyxHQUNBQyxhQUFBLFFBQ0FSLFdBQ1NTLE1BQUEsb0JBQUFQLEtBQUEsSUFBcUNDLE1BQUEsTUFDckNNLE1BQUEsbUJBQUFQLEtBQUEsSUFBQUMsTUFBQSxNQUVUTyxVQUFBLHVFQUNBQyxjQUFBLG9CQUNBQyxZQUFBLHNEQUNBQyxZQUFBLFdBQ0FDLFVBQUEsaUJBQ0FDLGVBQUEseUJBQ0FDLFVBQUEsb0JBQ0FDLFdBQUEsMEVBQ0FDLFFBQUEsOENBQ0FDLFdBQ0FDLE9BQ2FDLFFBQUEsZ0JBQ0FBLFFBQUEsYUFFYiwrQkFFQSxrQ0FDQSxRQUFtQiwwQkFFbkIsMkJBQ2FBLFFBQUEsWUFDQUEsUUFBQSxlQUNBQSxRQUFBLHFCQUNBQSxRQUFBLGdCQUViLHlDQUNBLDZDQUNBLDZDQUNBLHlDQUNBLG1EQUNBLHlDQUNBLDJDQUVBLDJFQUNhQSxRQUFBLGlCQUViLE9BQ0FDLE9BQ0FDLFlBQUEsVUFDQUMsV0FBQSxhQUtBQyxTQUNhSixRQUFBLGdCQUNBQSxRQUFBLGFBRWIsS0FBZ0IscUJBRWhCLHdCQUVBLHVCQUVBLG1DQUFrQyxTQUVyQkEsUUFBQSxxQkFDQUEsUUFBQSxpQkFFQUEsUUFBQSxlQUNBQSxRQUFBLFlBQ0FBLFFBQUEsZ0JBRWIsV0FDQUMsT0FDQUMsWUFBQSxVQUNBQyxXQUFBLGFBS0FFLFFBQ2FMLFFBQUEsZ0JBQ0FBLFFBQUEsYUFFYiwwQkFFQSx3QkFFYUEsUUFBQSxxQkFDQUEsUUFBQSxpQkFFQUEsUUFBQSxlQUNBQSxRQUFBLFlBQ0FBLFFBQUEsZ0JBRWIsV0FDQUMsT0FDQUMsWUFBQSxVQUNBQyxXQUFBLGFBS0FHLFNBQ0Esc0JBQ0EsNkJBQ0EsZ0NBQ0EsUUFDQUwsT0FDQU0sV0FBb0NuQixNQUFBLFNBQUFvQixLQUFBLFFBQ3BDTCxXQUFBLGFBS0FNLGNBQ0EsaURBSUFDLHVCQUNBLFlBQ0FULE9BQ0FVLFVBQUEsU0FDQVIsWUFBcUNmLE1BQUEsV0FBQW9CLEtBQUEsZUFJckNJLGFBQ0EsdUJBR0FDLFVBQ0EsbUJBR0FDLGtCQUNBLDRCQUNBLEtBQWdCLHdCQUdoQkMsY0FDQSwyQkFDQSwyQkFHQUMsYUFDQSxnREFHQUMsYUFDQSxrQ0FBMkMsV0FDM0MsZ0NBQXlDLGlCQUN6QyxnQ0FBeUMsaUJBQ3pDLDhCQUF1QyxlQUN2QyxtQ0FBNEMsb0JBQzVDLDhCQUF1QyxlQUN2QywrQkFBd0MsZ0JBRXhDQyxZQUNBLGtCQUVBQyxTQUNBIiwiZmlsZSI6IjMxLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgY29uZiA9IHtcbiAgICBjb21tZW50czoge1xuICAgICAgICBsaW5lQ29tbWVudDogJyMnXG4gICAgfSxcbiAgICBicmFja2V0czogW1xuICAgICAgICBbJ3snLCAnfSddLFxuICAgICAgICBbJ1snLCAnXSddLFxuICAgICAgICBbJygnLCAnKSddXG4gICAgXSxcbiAgICBhdXRvQ2xvc2luZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfSxcbiAgICAgICAgeyBvcGVuOiAnXFwnJywgY2xvc2U6ICdcXCcnIH0sXG4gICAgXSxcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfSxcbiAgICAgICAgeyBvcGVuOiAnXFwnJywgY2xvc2U6ICdcXCcnIH0sXG4gICAgXSxcbiAgICBmb2xkaW5nOiB7XG4gICAgICAgIG9mZlNpZGU6IHRydWVcbiAgICB9XG59O1xuZXhwb3J0IHZhciBsYW5ndWFnZSA9IHtcbiAgICB0b2tlblBvc3RmaXg6ICcueWFtbCcsXG4gICAgYnJhY2tldHM6IFtcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0Jywgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgdG9rZW46ICdkZWxpbWl0ZXIuc3F1YXJlJywgb3BlbjogJ1snLCBjbG9zZTogJ10nIH1cbiAgICBdLFxuICAgIGtleXdvcmRzOiBbJ3RydWUnLCAnVHJ1ZScsICdUUlVFJywgJ2ZhbHNlJywgJ0ZhbHNlJywgJ0ZBTFNFJywgJ251bGwnLCAnTnVsbCcsICdOdWxsJywgJ34nXSxcbiAgICBudW1iZXJJbnRlZ2VyOiAvKD86MHxbKy1dP1swLTldKykvLFxuICAgIG51bWJlckZsb2F0OiAvKD86MHxbKy1dP1swLTldKykoPzpcXC5bMC05XSspPyg/OmVbLStdWzEtOV1bMC05XSopPy8sXG4gICAgbnVtYmVyT2N0YWw6IC8wb1swLTddKy8sXG4gICAgbnVtYmVySGV4OiAvMHhbMC05YS1mQS1GXSsvLFxuICAgIG51bWJlckluZmluaXR5OiAvWystXT9cXC4oPzppbmZ8SW5mfElORikvLFxuICAgIG51bWJlck5hTjogL1xcLig/Om5hbnxOYW58TkFOKS8sXG4gICAgbnVtYmVyRGF0ZTogL1xcZHs0fS1cXGRcXGQtXFxkXFxkKFtUdCBdXFxkXFxkOlxcZFxcZDpcXGRcXGQoXFwuXFxkKyk/KCggP1srLV1cXGRcXGQ/KDpcXGRcXGQpPyl8Wik/KT8vLFxuICAgIGVzY2FwZXM6IC9cXFxcKD86W2J0bmZyXFxcXFwiJ118WzAtN11bMC03XT98WzAtM11bMC03XXsyfSkvLFxuICAgIHRva2VuaXplcjoge1xuICAgICAgICByb290OiBbXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAd2hpdGVzcGFjZScgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0Bjb21tZW50JyB9LFxuICAgICAgICAgICAgLy8gRGlyZWN0aXZlXG4gICAgICAgICAgICBbLyVbXiBdKy4qJC8sICdtZXRhLmRpcmVjdGl2ZSddLFxuICAgICAgICAgICAgLy8gRG9jdW1lbnQgTWFya2Vyc1xuICAgICAgICAgICAgWy8tLS0vLCAnb3BlcmF0b3JzLmRpcmVjdGl2ZXNFbmQnXSxcbiAgICAgICAgICAgIFsvXFwuezN9LywgJ29wZXJhdG9ycy5kb2N1bWVudEVuZCddLFxuICAgICAgICAgICAgLy8gQmxvY2sgU3RydWN0dXJlIEluZGljYXRvcnNcbiAgICAgICAgICAgIFsvWy0/Ol0oPz0gKS8sICdvcGVyYXRvcnMnXSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BhbmNob3InIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAdGFnSGFuZGxlJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGZsb3dDb2xsZWN0aW9ucycgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BibG9ja1N0eWxlJyB9LFxuICAgICAgICAgICAgLy8gTnVtYmVyc1xuICAgICAgICAgICAgWy9AbnVtYmVySW50ZWdlcig/IVsgXFx0XSpcXFMrKS8sICdudW1iZXInXSxcbiAgICAgICAgICAgIFsvQG51bWJlckZsb2F0KD8hWyBcXHRdKlxcUyspLywgJ251bWJlci5mbG9hdCddLFxuICAgICAgICAgICAgWy9AbnVtYmVyT2N0YWwoPyFbIFxcdF0qXFxTKykvLCAnbnVtYmVyLm9jdGFsJ10sXG4gICAgICAgICAgICBbL0BudW1iZXJIZXgoPyFbIFxcdF0qXFxTKykvLCAnbnVtYmVyLmhleCddLFxuICAgICAgICAgICAgWy9AbnVtYmVySW5maW5pdHkoPyFbIFxcdF0qXFxTKykvLCAnbnVtYmVyLmluZmluaXR5J10sXG4gICAgICAgICAgICBbL0BudW1iZXJOYU4oPyFbIFxcdF0qXFxTKykvLCAnbnVtYmVyLm5hbiddLFxuICAgICAgICAgICAgWy9AbnVtYmVyRGF0ZSg/IVsgXFx0XSpcXFMrKS8sICdudW1iZXIuZGF0ZSddLFxuICAgICAgICAgICAgLy8gS2V5OlZhbHVlIHBhaXJcbiAgICAgICAgICAgIFsvKFwiLio/XCJ8Jy4qPyd8Lio/KShbIFxcdF0qKSg6KSggfCQpLywgWyd0eXBlJywgJ3doaXRlJywgJ29wZXJhdG9ycycsICd3aGl0ZSddXSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BmbG93U2NhbGFycycgfSxcbiAgICAgICAgICAgIC8vIFN0cmluZyBub2Rlc1xuICAgICAgICAgICAgWy8uKyQvLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQGtleXdvcmRzJzogJ2tleXdvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIF0sXG4gICAgICAgIC8vIEZsb3cgQ29sbGVjdGlvbjogRmxvdyBNYXBwaW5nXG4gICAgICAgIG9iamVjdDogW1xuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHdoaXRlc3BhY2UnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAY29tbWVudCcgfSxcbiAgICAgICAgICAgIC8vIEZsb3cgTWFwcGluZyB0ZXJtaW5hdGlvblxuICAgICAgICAgICAgWy9cXH0vLCAnQGJyYWNrZXRzJywgJ0Bwb3AnXSxcbiAgICAgICAgICAgIC8vIEZsb3cgTWFwcGluZyBkZWxpbWl0ZXJcbiAgICAgICAgICAgIFsvLC8sICdkZWxpbWl0ZXIuY29tbWEnXSxcbiAgICAgICAgICAgIC8vIEZsb3cgTWFwcGluZyBLZXk6VmFsdWUgZGVsaW1pdGVyXG4gICAgICAgICAgICBbLzooPz0gKS8sICdvcGVyYXRvcnMnXSxcbiAgICAgICAgICAgIC8vIEZsb3cgTWFwcGluZyBLZXk6VmFsdWUga2V5XG4gICAgICAgICAgICBbLyg/OlwiLio/XCJ8Jy4qPyd8W14sXFx7XFxbXSs/KSg/PTogKS8sICd0eXBlJ10sXG4gICAgICAgICAgICAvLyBTdGFydCBGbG93IFN0eWxlXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAZmxvd0NvbGxlY3Rpb25zJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGZsb3dTY2FsYXJzJyB9LFxuICAgICAgICAgICAgLy8gU2NhbGFyIERhdGEgdHlwZXNcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B0YWdIYW5kbGUnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAYW5jaG9yJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGZsb3dOdW1iZXInIH0sXG4gICAgICAgICAgICAvLyBPdGhlciB2YWx1ZSAoa2V5d29yZCBvciBzdHJpbmcpXG4gICAgICAgICAgICBbL1teXFx9LF0rLywge1xuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0BrZXl3b3Jkcyc6ICdrZXl3b3JkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICBdLFxuICAgICAgICAvLyBGbG93IENvbGxlY3Rpb246IEZsb3cgU2VxdWVuY2VcbiAgICAgICAgYXJyYXk6IFtcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B3aGl0ZXNwYWNlJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGNvbW1lbnQnIH0sXG4gICAgICAgICAgICAvLyBGbG93IFNlcXVlbmNlIHRlcm1pbmF0aW9uXG4gICAgICAgICAgICBbL1xcXS8sICdAYnJhY2tldHMnLCAnQHBvcCddLFxuICAgICAgICAgICAgLy8gRmxvdyBTZXF1ZW5jZSBkZWxpbWl0ZXJcbiAgICAgICAgICAgIFsvLC8sICdkZWxpbWl0ZXIuY29tbWEnXSxcbiAgICAgICAgICAgIC8vIFN0YXJ0IEZsb3cgU3R5bGVcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BmbG93Q29sbGVjdGlvbnMnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAZmxvd1NjYWxhcnMnIH0sXG4gICAgICAgICAgICAvLyBTY2FsYXIgRGF0YSB0eXBlc1xuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHRhZ0hhbmRsZScgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BhbmNob3InIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAZmxvd051bWJlcicgfSxcbiAgICAgICAgICAgIC8vIE90aGVyIHZhbHVlIChrZXl3b3JkIG9yIHN0cmluZylcbiAgICAgICAgICAgIFsvW15cXF0sXSsvLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQGtleXdvcmRzJzogJ2tleXdvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIF0sXG4gICAgICAgIC8vIEZsb3cgU2NhbGFycyAocXVvdGVkIHN0cmluZ3MpXG4gICAgICAgIHN0cmluZzogW1xuICAgICAgICAgICAgWy9bXlxcXFxcIiddKy8sICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFsvQGVzY2FwZXMvLCAnc3RyaW5nLmVzY2FwZSddLFxuICAgICAgICAgICAgWy9cXFxcLi8sICdzdHJpbmcuZXNjYXBlLmludmFsaWQnXSxcbiAgICAgICAgICAgIFsvW1wiJ10vLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnJCM9PSRTMic6IHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQHBvcCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICBdLFxuICAgICAgICAvLyBGaXJzdCBsaW5lIG9mIGEgQmxvY2sgU3R5bGVcbiAgICAgICAgbXVsdGlTdHJpbmc6IFtcbiAgICAgICAgICAgIFsvXiggKykuKyQvLCAnc3RyaW5nJywgJ0BtdWx0aVN0cmluZ0NvbnRpbnVlZC4kMSddXG4gICAgICAgIF0sXG4gICAgICAgIC8vIEZ1cnRoZXIgbGluZXMgb2YgYSBCbG9jayBTdHlsZVxuICAgICAgICAvLyAgIFdvcmthcm91bmQgZm9yIGluZGVudGF0aW9uIGRldGVjdGlvblxuICAgICAgICBtdWx0aVN0cmluZ0NvbnRpbnVlZDogW1xuICAgICAgICAgICAgWy9eKCAqKS4rJC8sIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICckMT09JFMyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiB7IHRva2VuOiAnQHJlbWF0Y2gnLCBuZXh0OiAnQHBvcGFsbCcgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgXSxcbiAgICAgICAgd2hpdGVzcGFjZTogW1xuICAgICAgICAgICAgWy9bIFxcdFxcclxcbl0rLywgJ3doaXRlJ11cbiAgICAgICAgXSxcbiAgICAgICAgLy8gT25seSBsaW5lIGNvbW1lbnRzXG4gICAgICAgIGNvbW1lbnQ6IFtcbiAgICAgICAgICAgIFsvIy4qJC8sICdjb21tZW50J11cbiAgICAgICAgXSxcbiAgICAgICAgLy8gU3RhcnQgRmxvdyBDb2xsZWN0aW9uc1xuICAgICAgICBmbG93Q29sbGVjdGlvbnM6IFtcbiAgICAgICAgICAgIFsvXFxbLywgJ0BicmFja2V0cycsICdAYXJyYXknXSxcbiAgICAgICAgICAgIFsvXFx7LywgJ0BicmFja2V0cycsICdAb2JqZWN0J11cbiAgICAgICAgXSxcbiAgICAgICAgLy8gU3RhcnQgRmxvdyBTY2FsYXJzIChxdW90ZWQgc3RyaW5ncylcbiAgICAgICAgZmxvd1NjYWxhcnM6IFtcbiAgICAgICAgICAgIFsvXCIvLCAnc3RyaW5nJywgJ0BzdHJpbmcuXCInXSxcbiAgICAgICAgICAgIFsvJy8sICdzdHJpbmcnLCAnQHN0cmluZy5cXCcnXVxuICAgICAgICBdLFxuICAgICAgICAvLyBTdGFydCBCbG9jayBTY2FsYXJcbiAgICAgICAgYmxvY2tTdHlsZTogW1xuICAgICAgICAgICAgWy9bPnxdWzAtOV0qWystXT8kLywgJ29wZXJhdG9ycycsICdAbXVsdGlTdHJpbmcnXVxuICAgICAgICBdLFxuICAgICAgICAvLyBOdW1iZXJzIGluIEZsb3cgQ29sbGVjdGlvbnMgKHRlcm1pbmF0ZSB3aXRoICxdfSlcbiAgICAgICAgZmxvd051bWJlcjogW1xuICAgICAgICAgICAgWy9AbnVtYmVySW50ZWdlcig/PVsgXFx0XSpbLFxcXVxcfV0pLywgJ251bWJlciddLFxuICAgICAgICAgICAgWy9AbnVtYmVyRmxvYXQoPz1bIFxcdF0qWyxcXF1cXH1dKS8sICdudW1iZXIuZmxvYXQnXSxcbiAgICAgICAgICAgIFsvQG51bWJlck9jdGFsKD89WyBcXHRdKlssXFxdXFx9XSkvLCAnbnVtYmVyLm9jdGFsJ10sXG4gICAgICAgICAgICBbL0BudW1iZXJIZXgoPz1bIFxcdF0qWyxcXF1cXH1dKS8sICdudW1iZXIuaGV4J10sXG4gICAgICAgICAgICBbL0BudW1iZXJJbmZpbml0eSg/PVsgXFx0XSpbLFxcXVxcfV0pLywgJ251bWJlci5pbmZpbml0eSddLFxuICAgICAgICAgICAgWy9AbnVtYmVyTmFOKD89WyBcXHRdKlssXFxdXFx9XSkvLCAnbnVtYmVyLm5hbiddLFxuICAgICAgICAgICAgWy9AbnVtYmVyRGF0ZSg/PVsgXFx0XSpbLFxcXVxcfV0pLywgJ251bWJlci5kYXRlJ11cbiAgICAgICAgXSxcbiAgICAgICAgdGFnSGFuZGxlOiBbXG4gICAgICAgICAgICBbL1xcIVteIF0qLywgJ3RhZyddXG4gICAgICAgIF0sXG4gICAgICAgIGFuY2hvcjogW1xuICAgICAgICAgICAgWy9bJipdW14gXSsvLCAnbmFtZXNwYWNlJ11cbiAgICAgICAgXVxuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9