!function(e){this.webpackChunk=function(t,r){for(var o in r)e[o]=r[o];for(;t.length;)n[t.pop()]=1};var t={},n={main:1};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./node_modules/monaco-editor/esm/vs/language/json/json.worker.js")}({"./node_modules/monaco-editor/esm/vs/base/common/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/async.js ***!
  \****************************************************************/
/*! exports provided: isPromiseLike, toPromiseLike, asWinJsPromise, wireCancellationToken, Throttler, SimpleThrottler, Delayer, ThrottledDelayer, Barrier, ShallowCancelThenPromise, timeout, always, sequence, first, Limiter, Queue, ResourceQueue, setDisposableTimeout, TimeoutTimer, IntervalTimer, RunOnceScheduler, nfcall, ninvoke, ThrottledEmitter */function(e,t,n){"use strict";n.r(t),n.d(t,"isPromiseLike",function(){return c}),n.d(t,"toPromiseLike",function(){return l}),n.d(t,"asWinJsPromise",function(){return f}),n.d(t,"wireCancellationToken",function(){return d}),n.d(t,"Throttler",function(){return h}),n.d(t,"SimpleThrottler",function(){return m}),n.d(t,"Delayer",function(){return p}),n.d(t,"ThrottledDelayer",function(){return g}),n.d(t,"Barrier",function(){return v}),n.d(t,"ShallowCancelThenPromise",function(){return y}),n.d(t,"timeout",function(){return _}),n.d(t,"always",function(){return b}),n.d(t,"sequence",function(){return S}),n.d(t,"first",function(){return C}),n.d(t,"Limiter",function(){return E}),n.d(t,"Queue",function(){return x}),n.d(t,"ResourceQueue",function(){return j}),n.d(t,"setDisposableTimeout",function(){return w}),n.d(t,"TimeoutTimer",function(){return A}),n.d(t,"IntervalTimer",function(){return N}),n.d(t,"RunOnceScheduler",function(){return P}),n.d(t,"nfcall",function(){return O}),n.d(t,"ninvoke",function(){return k}),n.d(t,"ThrottledEmitter",function(){return T});var r=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),o=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),i=n(/*! ./cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),s=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),a=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),u=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function c(e){return e&&"function"==typeof e.then}function l(e){return c(e)?e:o.TPromise.as(e)}function f(e){var t=new i.CancellationTokenSource;return new o.TPromise(function(n,r,i){var s=e(t.token);s instanceof o.TPromise?s.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)},i):c(s)?s.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)}):(t.dispose(),n(s))},function(){t.cancel()})}function d(e,t,n){var i=e.onCancellationRequested(function(){return t.cancel()});return n&&(t=t.then(void 0,function(e){if(!r.isPromiseCanceledError(e))return o.TPromise.wrapError(e)})),b(t,function(){return i.dispose()})}var h=function(){function e(){this.activePromise=null,this.queuedPromise=null,this.queuedPromiseFactory=null}return e.prototype.queue=function(e){var t=this;if(this.activePromise){if(this.queuedPromiseFactory=e,!this.queuedPromise){var n=function(){t.queuedPromise=null;var e=t.queue(t.queuedPromiseFactory);return t.queuedPromiseFactory=null,e};this.queuedPromise=new o.TPromise(function(e,r,o){t.activePromise.then(n,n,o).done(e)},function(){t.activePromise.cancel()})}return new o.TPromise(function(e,n,r){t.queuedPromise.then(e,n,r)},function(){})}return this.activePromise=e(),new o.TPromise(function(e,n,r){t.activePromise.done(function(n){t.activePromise=null,e(n)},function(e){t.activePromise=null,n(e)},r)},function(){t.activePromise.cancel()})},e}(),m=function(){function e(){this.current=o.TPromise.wrap(null)}return e.prototype.queue=function(e){return this.current=this.current.then(function(){return e()})},e}(),p=function(){function e(e){this.defaultDelay=e,this.timeout=null,this.completionPromise=null,this.onSuccess=null,this.task=null}return e.prototype.trigger=function(e,t){var n=this;return void 0===t&&(t=this.defaultDelay),this.task=e,this.cancelTimeout(),this.completionPromise||(this.completionPromise=new o.TPromise(function(e){n.onSuccess=e},function(){}).then(function(){n.completionPromise=null,n.onSuccess=null;var e=n.task;return n.task=null,e()})),this.timeout=setTimeout(function(){n.timeout=null,n.onSuccess(null)},t),this.completionPromise},e.prototype.isTriggered=function(){return null!==this.timeout},e.prototype.cancel=function(){this.cancelTimeout(),this.completionPromise&&(this.completionPromise.cancel(),this.completionPromise=null)},e.prototype.cancelTimeout=function(){null!==this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},e}(),g=function(e){function t(t){var n=e.call(this,t)||this;return n.throttler=new h,n}return u(t,e),t.prototype.trigger=function(t,n){var r=this;return e.prototype.trigger.call(this,function(){return r.throttler.queue(t)},n)},t}(p),v=function(){function e(){var e=this;this._isOpen=!1,this._promise=new o.TPromise(function(t,n,r){e._completePromise=t},function(){console.warn("You should really not try to cancel this ready promise!")})}return e.prototype.isOpen=function(){return this._isOpen},e.prototype.open=function(){this._isOpen=!0,this._completePromise(!0)},e.prototype.wait=function(){return this._promise},e}(),y=function(e){function t(t){var n,o,i,s;return n=e.call(this,function(e,t,n){o=e,i=t,s=n},function(){i(r.canceled())})||this,t.then(o,i,s),n}return u(t,e),t}(o.TPromise);function _(e){return new o.Promise(function(t){return setTimeout(t,e)})}function b(e,t){return function(e){return o.TPromise.is(e)&&"function"==typeof e.done}(e)?new o.TPromise(function(n,o,i){e.done(function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}n(e)},function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}o(e)},function(e){i(e)})},function(){e.cancel()}):(e.then(function(e){return t()},function(e){return t()}),e)}function S(e){var t=[];return e=e.reverse(),o.TPromise.as(null).then(function n(r){void 0!==r&&null!==r&&t.push(r);var i=e.length?e.pop()():null;return i?i.then(n):o.TPromise.as(t)})}function C(e,t){void 0===t&&(t=function(e){return!!e}),e=e.reverse().slice();var n=function(){return 0===e.length?o.TPromise.as(null):e.pop()().then(function(e){return t(e)?o.TPromise.as(e):n()})};return n()}var E=function(){function e(e){this.maxDegreeOfParalellism=e,this.outstandingPromises=[],this.runningPromises=0,this._onFinished=new a.Emitter}return Object.defineProperty(e.prototype,"onFinished",{get:function(){return this._onFinished.event},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.runningPromises+this.outstandingPromises.length},enumerable:!0,configurable:!0}),e.prototype.queue=function(e){var t=this;return new o.TPromise(function(n,r,o){t.outstandingPromises.push({factory:e,c:n,e:r,p:o}),t.consume()})},e.prototype.consume=function(){for(var e=this;this.outstandingPromises.length&&this.runningPromises<this.maxDegreeOfParalellism;){var t=this.outstandingPromises.shift();this.runningPromises++;var n=t.factory();n.done(t.c,t.e,t.p),n.done(function(){return e.consumed()},function(){return e.consumed()})}},e.prototype.consumed=function(){this.runningPromises--,this.outstandingPromises.length>0?this.consume():this._onFinished.fire()},e.prototype.dispose=function(){this._onFinished.dispose()},e}(),x=function(e){function t(){return e.call(this,1)||this}return u(t,e),t}(E),j=function(){function e(){this.queues=Object.create(null)}return e.prototype.queueFor=function(e){var t=this,n=e.toString();if(!this.queues[n]){var r=new x;r.onFinished(function(){r.dispose(),delete t.queues[n]}),this.queues[n]=r}return this.queues[n]},e}();function w(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=setTimeout.apply(void 0,[e,t].concat(n));return{dispose:function(){clearTimeout(o)}}}var A=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return u(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearTimeout(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){var n=this;this.cancel(),this._token=setTimeout(function(){n._token=-1,e()},t)},t.prototype.setIfNotSet=function(e,t){var n=this;-1===this._token&&(this._token=setTimeout(function(){n._token=-1,e()},t))},t}(s.Disposable),N=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return u(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearInterval(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){this.cancel(),this._token=setInterval(function(){e()},t)},t}(s.Disposable),P=function(){function e(e,t){this.timeoutToken=-1,this.runner=e,this.timeout=t,this.timeoutHandler=this.onTimeout.bind(this)}return e.prototype.dispose=function(){this.cancel(),this.runner=null},e.prototype.cancel=function(){this.isScheduled()&&(clearTimeout(this.timeoutToken),this.timeoutToken=-1)},e.prototype.schedule=function(e){void 0===e&&(e=this.timeout),this.cancel(),this.timeoutToken=setTimeout(this.timeoutHandler,e)},e.prototype.isScheduled=function(){return-1!==this.timeoutToken},e.prototype.onTimeout=function(){this.timeoutToken=-1,this.runner&&this.runner()},e}();function O(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new o.TPromise(function(n,r){return e.apply(void 0,t.concat([function(e,t){return e?r(e):n(t)}]))},function(){return null})}function k(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return new o.TPromise(function(r,o){return t.call.apply(t,[e].concat(n,[function(e,t){return e?o(e):r(t)}]))},function(){return null})}var T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.throttle=function(e){var t=this;return this.suspended=!0,b(e,function(){return t.resume()})},t.prototype.fire=function(t){return this.suspended?(this.lastEvent=t,void(this.hasLastEvent=!0)):e.prototype.fire.call(this,t)},t.prototype.resume=function(){this.suspended=!1,this.hasLastEvent&&this.fire(this.lastEvent),this.hasLastEvent=!1,this.lastEvent=void 0},t}(a.Emitter)},"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/*! exports provided: CancellationToken, CancellationTokenSource */function(e,t,n){"use strict";n.r(t),n.d(t,"CancellationToken",function(){return r}),n.d(t,"CancellationTokenSource",function(){return a});var r,o=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),i=Object.freeze(function(e,t){var n=setTimeout(e.bind(t),0);return{dispose:function(){clearTimeout(n)}}});!function(e){e.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:o.Event.None}),e.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:i})}(r||(r={}));var s=function(){function e(){this._isCancelled=!1}return e.prototype.cancel=function(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))},Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return this._isCancelled},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onCancellationRequested",{get:function(){return this._isCancelled?i:(this._emitter||(this._emitter=new o.Emitter),this._emitter.event)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)},e}(),a=function(){function e(){}return Object.defineProperty(e.prototype,"token",{get:function(){return this._token||(this._token=new s),this._token},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._token?this._token instanceof s&&this._token.cancel():this._token=r.Cancelled},e.prototype.dispose=function(){this._token?this._token instanceof s&&this._token.dispose():this._token=r.None},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/*! exports provided: stringDiff, Debug, MyArray, LcsDiff */function(e,t,n){"use strict";n.r(t),n.d(t,"stringDiff",function(){return i}),n.d(t,"Debug",function(){return s}),n.d(t,"MyArray",function(){return a}),n.d(t,"LcsDiff",function(){return l});var r=n(/*! ./diffChange.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js");function o(e){return{getLength:function(){return e.length},getElementHash:function(t){return e[t]}}}function i(e,t,n){return new l(o(e),o(t)).ComputeDiff(n)}var s=function(){function e(){}return e.Assert=function(e,t){if(!e)throw new Error(t)},e}(),a=function(){function e(){}return e.Copy=function(e,t,n,r,o){for(var i=0;i<o;i++)n[r+i]=e[t+i]},e}(),u=function(){function e(){this.m_changes=[],this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE,this.m_originalCount=0,this.m_modifiedCount=0}return e.prototype.MarkNextChange=function(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new r.DiffChange(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE},e.prototype.AddOriginalElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++},e.prototype.AddModifiedElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++},e.prototype.getChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes},e.prototype.getReverseChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes},e}(),c=Object.prototype.hasOwnProperty,l=function(){function e(e,t,n){void 0===n&&(n=null),this.OriginalSequence=e,this.ModifiedSequence=t,this.ContinueProcessingPredicate=n,this.m_originalIds=[],this.m_modifiedIds=[],this.m_forwardHistory=[],this.m_reverseHistory=[],this.ComputeUniqueIdentifiers()}return e.prototype.ComputeUniqueIdentifiers=function(){var e=this.OriginalSequence.getLength(),t=this.ModifiedSequence.getLength();this.m_originalIds=new Array(e),this.m_modifiedIds=new Array(t);var n,r={},o=1;for(n=0;n<e;n++){var i=this.OriginalSequence.getElementHash(n);c.call(r,i)?this.m_originalIds[n]=r[i]:(this.m_originalIds[n]=o++,r[i]=this.m_originalIds[n])}for(n=0;n<t;n++){var s=this.ModifiedSequence.getElementHash(n);c.call(r,s)?this.m_modifiedIds[n]=r[s]:(this.m_modifiedIds[n]=o++,r[s]=this.m_modifiedIds[n])}},e.prototype.ElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_modifiedIds[t]},e.prototype.OriginalElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_originalIds[t]},e.prototype.ModifiedElementsAreEqual=function(e,t){return this.m_modifiedIds[e]===this.m_modifiedIds[t]},e.prototype.ComputeDiff=function(e){return this._ComputeDiff(0,this.OriginalSequence.getLength()-1,0,this.ModifiedSequence.getLength()-1,e)},e.prototype._ComputeDiff=function(e,t,n,r,o){var i=this.ComputeDiffRecursive(e,t,n,r,[!1]);return o?this.ShiftChanges(i):i},e.prototype.ComputeDiffRecursive=function(e,t,n,o,i){for(i[0]=!1;e<=t&&n<=o&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&o>=n&&this.ElementsAreEqual(t,o);)t--,o--;if(e>t||n>o){var a=void 0;return n<=o?(s.Assert(e===t+1,"originalStart should only be one more than originalEnd"),a=[new r.DiffChange(e,0,n,o-n+1)]):e<=t?(s.Assert(n===o+1,"modifiedStart should only be one more than modifiedEnd"),a=[new r.DiffChange(e,t-e+1,n,0)]):(s.Assert(e===t+1,"originalStart should only be one more than originalEnd"),s.Assert(n===o+1,"modifiedStart should only be one more than modifiedEnd"),a=[]),a}var u=[0],c=[0],l=this.ComputeRecursionPoint(e,t,n,o,u,c,i),f=u[0],d=c[0];if(null!==l)return l;if(!i[0]){var h=this.ComputeDiffRecursive(e,f,n,d,i),m=[];return m=i[0]?[new r.DiffChange(f+1,t-(f+1)+1,d+1,o-(d+1)+1)]:this.ComputeDiffRecursive(f+1,t,d+1,o,i),this.ConcatenateChanges(h,m)}return[new r.DiffChange(e,t-e+1,n,o-n+1)]},e.prototype.WALKTRACE=function(e,t,n,o,i,s,a,c,l,f,d,h,m,p,g,v,y,_){var b,S,C=null,E=new u,x=t,j=n,w=m[0]-v[0]-o,A=Number.MIN_VALUE,N=this.m_forwardHistory.length-1;do{(S=w+e)===x||S<j&&l[S-1]<l[S+1]?(p=(d=l[S+1])-w-o,d<A&&E.MarkNextChange(),A=d,E.AddModifiedElement(d+1,p),w=S+1-e):(p=(d=l[S-1]+1)-w-o,d<A&&E.MarkNextChange(),A=d-1,E.AddOriginalElement(d,p+1),w=S-1-e),N>=0&&(e=(l=this.m_forwardHistory[N])[0],x=1,j=l.length-1)}while(--N>=-1);if(b=E.getReverseChanges(),_[0]){var P=m[0]+1,O=v[0]+1;if(null!==b&&b.length>0){var k=b[b.length-1];P=Math.max(P,k.getOriginalEnd()),O=Math.max(O,k.getModifiedEnd())}C=[new r.DiffChange(P,h-P+1,O,g-O+1)]}else{E=new u,x=s,j=a,w=m[0]-v[0]-c,A=Number.MAX_VALUE,N=y?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{(S=w+i)===x||S<j&&f[S-1]>=f[S+1]?(p=(d=f[S+1]-1)-w-c,d>A&&E.MarkNextChange(),A=d+1,E.AddOriginalElement(d+1,p+1),w=S+1-i):(p=(d=f[S-1])-w-c,d>A&&E.MarkNextChange(),A=d,E.AddModifiedElement(d+1,p+1),w=S-1-i),N>=0&&(i=(f=this.m_reverseHistory[N])[0],x=1,j=f.length-1)}while(--N>=-1);C=E.getChanges()}return this.ConcatenateChanges(b,C)},e.prototype.ComputeRecursionPoint=function(e,t,n,o,i,s,u){var c,l,f,d=0,h=0,m=0,p=0;e--,n--,i[0]=0,s[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];var g,v,y=t-e+(o-n),_=y+1,b=new Array(_),S=new Array(_),C=o-n,E=t-e,x=e-n,j=t-o,w=(E-C)%2==0;for(b[C]=e,S[E]=t,u[0]=!1,f=1;f<=y/2+1;f++){var A=0,N=0;for(d=this.ClipDiagonalBound(C-f,f,C,_),h=this.ClipDiagonalBound(C+f,f,C,_),g=d;g<=h;g+=2){for(l=(c=g===d||g<h&&b[g-1]<b[g+1]?b[g+1]:b[g-1]+1)-(g-C)-x,v=c;c<t&&l<o&&this.ElementsAreEqual(c+1,l+1);)c++,l++;if(b[g]=c,c+l>A+N&&(A=c,N=l),!w&&Math.abs(g-E)<=f-1&&c>=S[g])return i[0]=c,s[0]=l,v<=S[g]&&f<=1448?this.WALKTRACE(C,d,h,x,E,m,p,j,b,S,c,t,i,l,o,s,w,u):null}var P=(A-e+(N-n)-f)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(A,this.OriginalSequence,P))return u[0]=!0,i[0]=A,s[0]=N,P>0&&f<=1448?this.WALKTRACE(C,d,h,x,E,m,p,j,b,S,c,t,i,l,o,s,w,u):(e++,n++,[new r.DiffChange(e,t-e+1,n,o-n+1)]);for(m=this.ClipDiagonalBound(E-f,f,E,_),p=this.ClipDiagonalBound(E+f,f,E,_),g=m;g<=p;g+=2){for(l=(c=g===m||g<p&&S[g-1]>=S[g+1]?S[g+1]-1:S[g-1])-(g-E)-j,v=c;c>e&&l>n&&this.ElementsAreEqual(c,l);)c--,l--;if(S[g]=c,w&&Math.abs(g-C)<=f&&c<=b[g])return i[0]=c,s[0]=l,v>=b[g]&&f<=1448?this.WALKTRACE(C,d,h,x,E,m,p,j,b,S,c,t,i,l,o,s,w,u):null}if(f<=1447){var O=new Array(h-d+2);O[0]=C-d+1,a.Copy(b,d,O,1,h-d+1),this.m_forwardHistory.push(O),(O=new Array(p-m+2))[0]=E-m+1,a.Copy(S,m,O,1,p-m+1),this.m_reverseHistory.push(O)}}return this.WALKTRACE(C,d,h,x,E,m,p,j,b,S,c,t,i,l,o,s,w,u)},e.prototype.ShiftChanges=function(e){var t;do{t=!1;for(var n=0;n<e.length;n++)for(var r=e[n],o=n<e.length-1?e[n+1].originalStart:this.OriginalSequence.getLength(),i=n<e.length-1?e[n+1].modifiedStart:this.ModifiedSequence.getLength(),s=r.originalLength>0,a=r.modifiedLength>0;r.originalStart+r.originalLength<o&&r.modifiedStart+r.modifiedLength<i&&(!s||this.OriginalElementsAreEqual(r.originalStart,r.originalStart+r.originalLength))&&(!a||this.ModifiedElementsAreEqual(r.modifiedStart,r.modifiedStart+r.modifiedLength));)r.originalStart++,r.modifiedStart++;var u=new Array,c=[null];for(n=0;n<e.length;n++)n<e.length-1&&this.ChangesOverlap(e[n],e[n+1],c)?(t=!0,u.push(c[0]),n++):u.push(e[n]);e=u}while(t);for(n=e.length-1;n>=0;n--){r=e[n],o=0,i=0;if(n>0){var l=e[n-1];l.originalLength>0&&(o=l.originalStart+l.originalLength),l.modifiedLength>0&&(i=l.modifiedStart+l.modifiedLength)}s=r.originalLength>0,a=r.modifiedLength>0;for(var f=0,d=this._boundaryScore(r.originalStart,r.originalLength,r.modifiedStart,r.modifiedLength),h=1;;h++){var m=r.originalStart-h,p=r.modifiedStart-h;if(m<o||p<i)break;if(s&&!this.OriginalElementsAreEqual(m,m+r.originalLength))break;if(a&&!this.ModifiedElementsAreEqual(p,p+r.modifiedLength))break;var g=this._boundaryScore(m,r.originalLength,p,r.modifiedLength);g>d&&(d=g,f=h)}r.originalStart-=f,r.modifiedStart-=f}return e},e.prototype._OriginalIsBoundary=function(e){return e<=0||e>=this.OriginalSequence.getLength()-1||/^\s*$/.test(this.OriginalSequence.getElementHash(e))},e.prototype._OriginalRegionIsBoundary=function(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1},e.prototype._ModifiedIsBoundary=function(e){return e<=0||e>=this.ModifiedSequence.getLength()-1||/^\s*$/.test(this.ModifiedSequence.getElementHash(e))},e.prototype._ModifiedRegionIsBoundary=function(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1},e.prototype._boundaryScore=function(e,t,n,r){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,r)?1:0)},e.prototype.ConcatenateChanges=function(e,t){var n=[],r=null;return 0===e.length||0===t.length?t.length>0?t:e:this.ChangesOverlap(e[e.length-1],t[0],n)?(r=new Array(e.length+t.length-1),a.Copy(e,0,r,0,e.length-1),r[e.length-1]=n[0],a.Copy(t,1,r,e.length,t.length-1),r):(r=new Array(e.length+t.length),a.Copy(e,0,r,0,e.length),a.Copy(t,0,r,e.length,t.length),r)},e.prototype.ChangesOverlap=function(e,t,n){if(s.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),s.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){var o=e.originalStart,i=e.originalLength,a=e.modifiedStart,u=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(i=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(u=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new r.DiffChange(o,i,a,u),!0}return n[0]=null,!1},e.prototype.ClipDiagonalBound=function(e,t,n,r){if(e>=0&&e<r)return e;var o=t%2==0;return e<0?o===(n%2==0)?0:1:o===((r-n-1)%2==0)?r-1:r-2},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/*! exports provided: DiffChange */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffChange",function(){return r});var r=function(){function e(e,t,n,r){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=r}return e.prototype.getOriginalEnd=function(){return this.originalStart+this.originalLength},e.prototype.getModifiedEnd=function(){return this.modifiedStart+this.modifiedLength},e}()},"./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/*! exports provided: ErrorHandler, errorHandler, setUnexpectedErrorHandler, onUnexpectedError, onUnexpectedExternalError, transformErrorForSerialization, isPromiseCanceledError, canceled, illegalArgument, illegalState, readonly, disposed, isErrorWithActions, create, getErrorMessage */function(e,t,n){"use strict";n.r(t),n.d(t,"ErrorHandler",function(){return o}),n.d(t,"errorHandler",function(){return i}),n.d(t,"setUnexpectedErrorHandler",function(){return s}),n.d(t,"onUnexpectedError",function(){return a}),n.d(t,"onUnexpectedExternalError",function(){return u}),n.d(t,"transformErrorForSerialization",function(){return c}),n.d(t,"isPromiseCanceledError",function(){return f}),n.d(t,"canceled",function(){return d}),n.d(t,"illegalArgument",function(){return h}),n.d(t,"illegalState",function(){return m}),n.d(t,"readonly",function(){return p}),n.d(t,"disposed",function(){return g}),n.d(t,"isErrorWithActions",function(){return v}),n.d(t,"create",function(){return y}),n.d(t,"getErrorMessage",function(){return _});var r={};n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js").TPromise.addEventListener("error",function(e){var t=e.detail,n=t.id;t.parent?t.handler&&r&&delete r[n]:(r[n]=t,1===Object.keys(r).length&&setTimeout(function(){var e=r;r={},Object.keys(e).forEach(function(t){var n=e[t];n.exception?a(n.exception):n.error&&a(n.error),console.log("WARNING: Promise with no error callback:"+n.id),console.log(n),n.exception&&console.log(n.exception.stack)})},0))});var o=function(){function e(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(function(){if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e},0)}}return e.prototype.addListener=function(e){var t=this;return this.listeners.push(e),function(){t._removeListener(e)}},e.prototype.emit=function(e){this.listeners.forEach(function(t){t(e)})},e.prototype._removeListener=function(e){this.listeners.splice(this.listeners.indexOf(e),1)},e.prototype.setUnexpectedErrorHandler=function(e){this.unexpectedErrorHandler=e},e.prototype.getUnexpectedErrorHandler=function(){return this.unexpectedErrorHandler},e.prototype.onUnexpectedError=function(e){this.unexpectedErrorHandler(e),this.emit(e)},e.prototype.onUnexpectedExternalError=function(e){this.unexpectedErrorHandler(e)},e}(),i=new o;function s(e){i.setUnexpectedErrorHandler(e)}function a(e){f(e)||i.onUnexpectedError(e)}function u(e){f(e)||i.onUnexpectedExternalError(e)}function c(e){return e instanceof Error?{$isError:!0,name:e.name,message:e.message,stack:e.stacktrace||e.stack}:e}var l="Canceled";function f(e){return e instanceof Error&&e.name===l&&e.message===l}function d(){var e=new Error(l);return e.name=e.message,e}function h(e){return e?new Error("Illegal argument: "+e):new Error("Illegal argument")}function m(e){return e?new Error("Illegal state: "+e):new Error("Illegal state")}function p(e){return e?new Error("readonly property '"+e+" cannot be changed'"):new Error("readonly property cannot be changed")}function g(e){var t=new Error(e+" has been disposed");return t.name="DISPOSED",t}function v(e){return e instanceof Error&&Array.isArray(e.actions)}function y(e,t){void 0===t&&(t=Object.create(null));var n=new Error(e);return t.actions&&(n.actions=t.actions),n}function _(e){return e?e.message?e.message:e.stack?e.stack.split("\n")[0]:String(e):"Error"}},"./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/*! exports provided: Event, Emitter, EventMultiplexer, fromCallback, fromPromise, toPromise, once, anyEvent, debounceEvent, EventBufferer, mapEvent, forEach, filterEvent, chain, stopwatch, buffer, echo, Relay, fromNodeEventEmitter, latch */function(e,t,n){"use strict";n.r(t),n.d(t,"Event",function(){return r}),n.d(t,"Emitter",function(){return c}),n.d(t,"EventMultiplexer",function(){return l}),n.d(t,"fromCallback",function(){return f}),n.d(t,"fromPromise",function(){return d}),n.d(t,"toPromise",function(){return h}),n.d(t,"once",function(){return m}),n.d(t,"anyEvent",function(){return p}),n.d(t,"debounceEvent",function(){return g}),n.d(t,"EventBufferer",function(){return v}),n.d(t,"mapEvent",function(){return y}),n.d(t,"forEach",function(){return _}),n.d(t,"filterEvent",function(){return b}),n.d(t,"chain",function(){return C}),n.d(t,"stopwatch",function(){return E}),n.d(t,"buffer",function(){return x}),n.d(t,"echo",function(){return j}),n.d(t,"Relay",function(){return w}),n.d(t,"fromNodeEventEmitter",function(){return A}),n.d(t,"latch",function(){return N});var r,o=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),i=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),s=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),a=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),u=n(/*! ./linkedList.js */"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js");!function(e){var t={dispose:function(){}};e.None=function(){return t}}(r||(r={}));var c=function(){function e(e){this._options=e}return Object.defineProperty(e.prototype,"event",{get:function(){var t=this;return this._event||(this._event=function(n,r,o){t._listeners||(t._listeners=new u.LinkedList);var i=t._listeners.isEmpty();i&&t._options&&t._options.onFirstListenerAdd&&t._options.onFirstListenerAdd(t);var s,a=t._listeners.push(r?[n,r]:n);return i&&t._options&&t._options.onFirstListenerDidAdd&&t._options.onFirstListenerDidAdd(t),t._options&&t._options.onListenerDidAdd&&t._options.onListenerDidAdd(t,n,r),s={dispose:function(){s.dispose=e._noop,t._disposed||(a(),t._options&&t._options.onLastListenerRemove&&t._listeners.isEmpty()&&t._options.onLastListenerRemove(t))}},Array.isArray(o)&&o.push(s),s}),this._event},enumerable:!0,configurable:!0}),e.prototype.fire=function(e){if(this._listeners){this._deliveryQueue||(this._deliveryQueue=[]);for(var t=this._listeners.iterator(),n=t.next();!n.done;n=t.next())this._deliveryQueue.push([n.value,e]);for(;this._deliveryQueue.length>0;){var r=this._deliveryQueue.shift(),o=r[0],i=r[1];try{"function"==typeof o?o.call(void 0,i):o[0].call(o[1],i)}catch(n){Object(a.onUnexpectedError)(n)}}}},e.prototype.dispose=function(){this._listeners&&(this._listeners=void 0),this._deliveryQueue&&(this._deliveryQueue.length=0),this._disposed=!0},e._noop=function(){},e}(),l=function(){function e(){var e=this;this.hasListeners=!1,this.events=[],this.emitter=new c({onFirstListenerAdd:function(){return e.onFirstListenerAdd()},onLastListenerRemove:function(){return e.onLastListenerRemove()}})}return Object.defineProperty(e.prototype,"event",{get:function(){return this.emitter.event},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this,n={event:e,listener:null};this.events.push(n),this.hasListeners&&this.hook(n);return Object(o.toDisposable)(Object(s.once)(function(){t.hasListeners&&t.unhook(n);var e=t.events.indexOf(n);t.events.splice(e,1)}))},e.prototype.onFirstListenerAdd=function(){var e=this;this.hasListeners=!0,this.events.forEach(function(t){return e.hook(t)})},e.prototype.onLastListenerRemove=function(){var e=this;this.hasListeners=!1,this.events.forEach(function(t){return e.unhook(t)})},e.prototype.hook=function(e){var t=this;e.listener=e.event(function(e){return t.emitter.fire(e)})},e.prototype.unhook=function(e){e.listener.dispose(),e.listener=null},e.prototype.dispose=function(){this.emitter.dispose()},e}();function f(e){var t,n=new c({onFirstListenerAdd:function(){return t=e(function(e){return n.fire(e)})},onLastListenerRemove:function(){return t.dispose()}});return n.event}function d(e){var t=new c,n=!1;return e.then(null,function(){return null}).then(function(){n?t.fire():setTimeout(function(){return t.fire()},0)}),n=!0,t.event}function h(e){return new i.TPromise(function(t){var n=e(function(e){n.dispose(),t(e)})})}function m(e){return function(t,n,r){void 0===n&&(n=null);var o=e(function(e){return o.dispose(),t.call(n,e)},null,r);return o}}function p(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t,n,r){return void 0===n&&(n=null),Object(o.combinedDisposable)(e.map(function(e){return e(function(e){return t.call(n,e)},null,r)}))}}function g(e,t,n,r){var o;void 0===n&&(n=100),void 0===r&&(r=!1);var i=void 0,s=void 0,a=0,u=new c({onFirstListenerAdd:function(){o=e(function(e){a++,i=t(i,e),r&&!s&&u.fire(i),clearTimeout(s),s=setTimeout(function(){var e=i;i=void 0,s=void 0,(!r||a>1)&&u.fire(e),a=0},n)})},onLastListenerRemove:function(){o.dispose()}});return u.event}var v=function(){function e(){this.buffers=[]}return e.prototype.wrapEvent=function(e){var t=this;return function(n,r,o){return e(function(e){var o=t.buffers[t.buffers.length-1];o?o.push(function(){return n.call(r,e)}):n.call(r,e)},void 0,o)}},e.prototype.bufferEvents=function(e){var t=[];this.buffers.push(t),e(),this.buffers.pop(),t.forEach(function(e){return e()})},e}();function y(e,t){return function(n,r,o){return void 0===r&&(r=null),e(function(e){return n.call(r,t(e))},null,o)}}function _(e,t){return function(n,r,o){return void 0===r&&(r=null),e(function(e){t(e),n.call(r,e)},null,o)}}function b(e,t){return function(n,r,o){return void 0===r&&(r=null),e(function(e){return t(e)&&n.call(r,e)},null,o)}}var S=function(){function e(e){this._event=e}return Object.defineProperty(e.prototype,"event",{get:function(){return this._event},enumerable:!0,configurable:!0}),e.prototype.map=function(t){return new e(y(this._event,t))},e.prototype.forEach=function(t){return new e(_(this._event,t))},e.prototype.filter=function(t){return new e(b(this._event,t))},e.prototype.latch=function(){return new e(N(this._event))},e.prototype.on=function(e,t,n){return this._event(e,t,n)},e}();function C(e){return new S(e)}function E(e){var t=(new Date).getTime();return y(m(e),function(e){return(new Date).getTime()-t})}function x(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice();var r=e(function(e){n?n.push(e):i.fire(e)}),o=function(){n.forEach(function(e){return i.fire(e)}),n=null},i=new c({onFirstListenerAdd:function(){r||(r=e(function(e){return i.fire(e)}))},onFirstListenerDidAdd:function(){n&&(t?setTimeout(o):o())},onLastListenerRemove:function(){r.dispose(),r=null}});return i.event}function j(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice(),e(function(e){n.push(e),o.fire(e)});var r=function(e,t){return n.forEach(function(n){return e.call(t,n)})},o=new c({onListenerDidAdd:function(e,n,o){t?setTimeout(function(){return r(n,o)}):r(n,o)}});return o.event}var w=function(){function e(){this.emitter=new c,this.event=this.emitter.event,this.disposable=o.empty}return Object.defineProperty(e.prototype,"input",{set:function(e){this.disposable.dispose(),this.disposable=e(this.emitter.fire,this.emitter)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.disposable.dispose(),this.emitter.dispose()},e}();function A(e,t,n){void 0===n&&(n=function(e){return e});var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.fire(n.apply(void 0,e))},o=new c({onFirstListenerAdd:function(){return e.on(t,r)},onLastListenerRemove:function(){return e.removeListener(t,r)}});return o.event}function N(e){var t,n=!0;return b(e,function(e){var r=n||e!==t;return n=!1,t=e,r})}},"./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/*! exports provided: once */function(e,t,n){"use strict";function r(e){var t,n=this,r=!1;return function(){return r?t:(r=!0,t=e.apply(n,arguments))}}n.r(t),n.d(t,"once",function(){return r})},"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/*! exports provided: KeyCodeUtils, KeyChord, createKeybinding, createSimpleKeybinding, SimpleKeybinding, ChordKeybinding, ResolvedKeybindingPart, ResolvedKeybinding */function(e,t,n){"use strict";n.r(t),n.d(t,"KeyCodeUtils",function(){return r}),n.d(t,"KeyChord",function(){return u}),n.d(t,"createKeybinding",function(){return c}),n.d(t,"createSimpleKeybinding",function(){return l}),n.d(t,"SimpleKeybinding",function(){return f}),n.d(t,"ChordKeybinding",function(){return d}),n.d(t,"ResolvedKeybindingPart",function(){return h}),n.d(t,"ResolvedKeybinding",function(){return m});var r,o=function(){function e(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}return e.prototype.define=function(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e},e.prototype.keyCodeToStr=function(e){return this._keyCodeToStr[e]},e.prototype.strToKeyCode=function(e){return this._strToKeyCode[e.toLowerCase()]||0},e}(),i=new o,s=new o,a=new o;function u(e,t){return(e|(65535&t)<<16>>>0)>>>0}function c(e,t){if(0===e)return null;var n=(65535&e)>>>0,r=(4294901760&e)>>>16;return 0!==r?new d(l(n,t),l(r,t)):l(n,t)}function l(e,t){var n=!!(2048&e),r=!!(256&e);return new f(2===t?r:n,!!(1024&e),!!(512&e),2===t?n:r,255&e)}!function(){function e(e,t,n,r){void 0===n&&(n=t),void 0===r&&(r=n),i.define(e,t),s.define(e,n),a.define(e,r)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return i.keyCodeToStr(e)},e.fromString=function(e){return i.strToKeyCode(e)},e.toUserSettingsUS=function(e){return s.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return a.keyCodeToStr(e)},e.fromUserSettings=function(e){return s.strToKeyCode(e)||a.strToKeyCode(e)}}(r||(r={}));var f=function(){function e(e,t,n,r,o){this.type=1,this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyCode=o}return e.prototype.equals=function(e){return 1===e.type&&(this.ctrlKey===e.ctrlKey&&this.shiftKey===e.shiftKey&&this.altKey===e.altKey&&this.metaKey===e.metaKey&&this.keyCode===e.keyCode)},e.prototype.getHashCode=function(){return""+(this.ctrlKey?"1":"0")+(this.shiftKey?"1":"0")+(this.altKey?"1":"0")+(this.metaKey?"1":"0")+this.keyCode},e.prototype.isModifierKey=function(){return 0===this.keyCode||5===this.keyCode||57===this.keyCode||6===this.keyCode||4===this.keyCode},e.prototype.isDuplicateModifierCase=function(){return this.ctrlKey&&5===this.keyCode||this.shiftKey&&4===this.keyCode||this.altKey&&6===this.keyCode||this.metaKey&&57===this.keyCode},e}(),d=function(){function e(e,t){this.type=2,this.firstPart=e,this.chordPart=t}return e.prototype.getHashCode=function(){return this.firstPart.getHashCode()+";"+this.chordPart.getHashCode()},e}(),h=function(){return function(e,t,n,r,o,i){this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyLabel=o,this.keyAriaLabel=i}}(),m=function(){return function(){}}()},"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/*! exports provided: empty, isDisposable, dispose, combinedDisposable, toDisposable, Disposable, ReferenceCollection, ImmortalReference */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return o}),n.d(t,"isDisposable",function(){return i}),n.d(t,"dispose",function(){return s}),n.d(t,"combinedDisposable",function(){return a}),n.d(t,"toDisposable",function(){return u}),n.d(t,"Disposable",function(){return c}),n.d(t,"ReferenceCollection",function(){return l}),n.d(t,"ImmortalReference",function(){return f});var r=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),o=Object.freeze({dispose:function(){}});function i(e){return"function"==typeof e.dispose&&0===e.dispose.length}function s(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Array.isArray(e)?(e.forEach(function(e){return e&&e.dispose()}),[]):0===t.length?e?(e.dispose(),e):void 0:(s(e),s(t),[])}function a(e){return{dispose:function(){return s(e)}}}function u(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){for(var t=0,n=e;t<n.length;t++){(0,n[t])()}}}}var c=function(){function e(){this._toDispose=[]}return e.prototype.dispose=function(){this._toDispose=s(this._toDispose)},e.prototype._register=function(e){return this._toDispose.push(e),e},e}(),l=function(){function e(){this.references=Object.create(null)}return e.prototype.acquire=function(e){var t=this,n=this.references[e];n||(n=this.references[e]={counter:0,object:this.createReferencedObject(e)});var o=n.object,i=Object(r.once)(function(){0==--n.counter&&(t.destroyReferencedObject(n.object),delete t.references[e])});return n.counter++,{object:o,dispose:i}},e}(),f=function(){function e(e){this.object=e}return e.prototype.dispose=function(){},e}()},"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/*! exports provided: LinkedList */function(e,t,n){"use strict";n.r(t),n.d(t,"LinkedList",function(){return o});var r=function(){return function(e){this.element=e}}(),o=function(){function e(){}return e.prototype.isEmpty=function(){return!this._first},e.prototype.clear=function(){this._first=void 0,this._last=void 0},e.prototype.unshift=function(e){return this.insert(e,!1)},e.prototype.push=function(e){return this.insert(e,!0)},e.prototype.insert=function(e,t){var n=this,o=new r(e);if(this._first)if(t){var i=this._last;this._last=o,o.prev=i,i.next=o}else{var s=this._first;this._first=o,o.next=s,s.prev=o}else this._first=o,this._last=o;return function(){for(var e=n._first;e instanceof r;e=e.next)if(e===o){if(e.prev&&e.next){var t=e.prev;t.next=e.next,e.next.prev=t}else e.prev||e.next?e.next?e.prev||(n._first=n._first.next,n._first.prev=void 0):(n._last=n._last.prev,n._last.next=void 0):(n._first=void 0,n._last=void 0);break}}},e.prototype.iterator=function(){var e={done:void 0,value:void 0},t=this._first;return{next:function(){return t?(e.done=!1,e.value=t.element,t=t.next):(e.done=!0,e.value=void 0),e}}},e.prototype.toArray=function(){for(var e=[],t=this._first;t instanceof r;t=t.next)e.push(t.element);return e},e}()},"./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/*! exports provided: values, keys, getOrSet, StringIterator, PathIterator, TernarySearchTree, ResourceMap, Touch, LinkedMap, LRUCache */function(e,t,n){"use strict";n.r(t),n.d(t,"values",function(){return i}),n.d(t,"keys",function(){return s}),n.d(t,"getOrSet",function(){return a}),n.d(t,"StringIterator",function(){return c}),n.d(t,"PathIterator",function(){return l}),n.d(t,"TernarySearchTree",function(){return d}),n.d(t,"ResourceMap",function(){return h}),n.d(t,"Touch",function(){return u}),n.d(t,"LinkedMap",function(){return m}),n.d(t,"LRUCache",function(){return p});var r=n(/*! ./uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),o=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function i(e){var t=[];return e.forEach(function(e){return t.push(e)}),t}function s(e){var t=[];return e.forEach(function(e,n){return t.push(n)}),t}function a(e,t,n){var r=e.get(t);return void 0===r&&(r=n,e.set(t,r)),r}var u,c=function(){function e(){this._value="",this._pos=0}return e.prototype.reset=function(e){return this._value=e,this._pos=0,this},e.prototype.next=function(){return this._pos+=1,this},e.prototype.join=function(e){return e.join("")},e.prototype.hasNext=function(){return this._pos<this._value.length-1},e.prototype.cmp=function(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)},e.prototype.value=function(){return this._value[this._pos]},e}(),l=function(){function e(){}return e.prototype.reset=function(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()},e.prototype.hasNext=function(){return this._to<this._value.length},e.prototype.join=function(e){return e.join("/")},e.prototype.next=function(){this._from=this._to;for(var t=!0;this._to<this._value.length;this._to++){var n=this._value.charCodeAt(this._to);if(n===e._fwd||n===e._bwd){if(!t)break;this._from++}else t=!1}return this},e.prototype.cmp=function(e){for(var t=0,n=e.length,r=this._from;t<n&&r<this._to;){var o=e.charCodeAt(t)-this._value.charCodeAt(r);if(0!==o)return o;t+=1,r+=1}return n===this._to-this._from?0:t<n?-1:1},e.prototype.value=function(){return this._value.substring(this._from,this._to)},e._fwd="/".charCodeAt(0),e._bwd="\\".charCodeAt(0),e}(),f=function(){function e(){}return e.prototype.isEmpty=function(){return!(this.left||this.mid||this.right||this.element)},e}(),d=function(){function e(e){this._iter=e}return e.forPaths=function(){return new e(new l)},e.forStrings=function(){return new e(new c)},e.prototype.clear=function(){this._root=void 0},e.prototype.set=function(e,t){var n,r=this._iter.reset(e);for(this._root||(this._root=new f,this._root.str=r.value()),n=this._root;;){var o=r.cmp(n.str);if(o>0)n.left||(n.left=new f,n.left.str=r.value()),n=n.left;else if(o<0)n.right||(n.right=new f,n.right.str=r.value()),n=n.right;else{if(!r.hasNext())break;r.next(),n.mid||(n.mid=new f,n.mid.str=r.value()),n=n.mid}}var i=n.element;return n.element=t,i},e.prototype.get=function(e){for(var t=this._iter.reset(e),n=this._root;n;){var r=t.cmp(n.str);if(r>0)n=n.left;else if(r<0)n=n.right;else{if(!t.hasNext())break;t.next(),n=n.mid}}return n?n.element:void 0},e.prototype.delete=function(e){for(var t=this._iter.reset(e),n=[],r=this._root;r;){var o=t.cmp(r.str);if(o>0)n.push([1,r]),r=r.left;else if(o<0)n.push([-1,r]),r=r.right;else{if(!t.hasNext()){for(r.element=void 0;n.length>0&&r.isEmpty();){var i=n.pop(),s=i[0],a=i[1];switch(s){case 1:a.left=void 0;break;case 0:a.mid=void 0;break;case-1:a.right=void 0}r=a}break}t.next(),n.push([0,r]),r=r.mid}}},e.prototype.findSubstr=function(e){for(var t,n=this._iter.reset(e),r=this._root;r;){var o=n.cmp(r.str);if(o>0)r=r.left;else if(o<0)r=r.right;else{if(!n.hasNext())break;n.next(),t=r.element||t,r=r.mid}}return r&&r.element||t},e.prototype.findSuperstr=function(t){for(var n=this._iter.reset(t),r=this._root;r;){var o=n.cmp(r.str);if(o>0)r=r.left;else if(o<0)r=r.right;else{if(!n.hasNext()){if(!r.mid)return;var i=new e(this._iter);return i._root=r.mid,i}n.next(),r=r.mid}}},e.prototype.forEach=function(e){this._forEach(this._root,[],e)},e.prototype._forEach=function(e,t,n){e&&(this._forEach(e.left,t,n),t.push(e.str),e.element&&n(e.element,this._iter.join(t)),this._forEach(e.mid,t,n),t.pop(),this._forEach(e.right,t,n))},e}(),h=function(){function e(){this.map=new Map,this.ignoreCase=!1}return e.prototype.set=function(e,t){this.map.set(this.toKey(e),t)},e.prototype.get=function(e){return this.map.get(this.toKey(e))},e.prototype.has=function(e){return this.map.has(this.toKey(e))},Object.defineProperty(e.prototype,"size",{get:function(){return this.map.size},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this.map.clear()},e.prototype.delete=function(e){return this.map.delete(this.toKey(e))},e.prototype.forEach=function(e){this.map.forEach(e)},e.prototype.values=function(){return i(this.map)},e.prototype.toKey=function(e){var t=e.toString();return this.ignoreCase&&(t=t.toLowerCase()),t},e.prototype.keys=function(){return s(this.map).map(r.default.parse)},e}();!function(e){e[e.None=0]="None",e[e.AsOld=1]="AsOld",e[e.AsNew=2]="AsNew"}(u||(u={}));var m=function(){function e(){this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0}return e.prototype.clear=function(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0},e.prototype.isEmpty=function(){return!this._head&&!this._tail},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.get=function(e,t){void 0===t&&(t=u.None);var n=this._map.get(e);if(n)return t!==u.None&&this.touch(n,t),n.value},e.prototype.set=function(e,t,n){void 0===n&&(n=u.None);var r=this._map.get(e);if(r)r.value=t,n!==u.None&&this.touch(r,n);else{switch(r={key:e,value:t,next:void 0,previous:void 0},n){case u.None:this.addItemLast(r);break;case u.AsOld:this.addItemFirst(r);break;case u.AsNew:default:this.addItemLast(r)}this._map.set(e,r),this._size++}},e.prototype.delete=function(e){return!!this.remove(e)},e.prototype.remove=function(e){var t=this._map.get(e);if(t)return this._map.delete(e),this.removeItem(t),this._size--,t.value},e.prototype.shift=function(){if(this._head||this._tail){if(!this._head||!this._tail)throw new Error("Invalid list");var e=this._head;return this._map.delete(e.key),this.removeItem(e),this._size--,e.value}},e.prototype.forEach=function(e,t){for(var n=this._head;n;)t?e.bind(t)(n.value,n.key,this):e(n.value,n.key,this),n=n.next},e.prototype.values=function(){for(var e=[],t=this._head;t;)e.push(t.value),t=t.next;return e},e.prototype.keys=function(){for(var e=[],t=this._head;t;)e.push(t.key),t=t.next;return e},e.prototype.trimOld=function(e){if(!(e>=this.size))if(0!==e){for(var t=this._head,n=this.size;t&&n>e;)this._map.delete(t.key),t=t.next,n--;this._head=t,this._size=n,t.previous=void 0}else this.clear()},e.prototype.addItemFirst=function(e){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");e.next=this._head,this._head.previous=e}else this._tail=e;this._head=e},e.prototype.addItemLast=function(e){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");e.previous=this._tail,this._tail.next=e}else this._head=e;this._tail=e},e.prototype.removeItem=function(e){if(e===this._head&&e===this._tail)this._head=void 0,this._tail=void 0;else if(e===this._head)this._head=e.next;else if(e===this._tail)this._tail=e.previous;else{var t=e.next,n=e.previous;if(!t||!n)throw new Error("Invalid list");t.previous=n,n.next=t}},e.prototype.touch=function(e,t){if(!this._head||!this._tail)throw new Error("Invalid list");if(t===u.AsOld||t===u.AsNew)if(t===u.AsOld){if(e===this._head)return;var n=e.next,r=e.previous;e===this._tail?(r.next=void 0,this._tail=r):(n.previous=r,r.next=n),e.previous=void 0,e.next=this._head,this._head.previous=e,this._head=e}else if(t===u.AsNew){if(e===this._tail)return;n=e.next,r=e.previous;e===this._head?(n.previous=void 0,this._head=n):(n.previous=r,r.next=n),e.next=void 0,e.previous=this._tail,this._tail.next=e,this._tail=e}},e.prototype.toJSON=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),e},e.prototype.fromJSON=function(e){this.clear();for(var t=0,n=e;t<n.length;t++){var r=n[t],o=r[0],i=r[1];this.set(o,i)}},e}(),p=function(e){function t(t,n){void 0===n&&(n=1);var r=e.call(this)||this;return r._limit=t,r._ratio=Math.min(Math.max(0,n),1),r}return o(t,e),Object.defineProperty(t.prototype,"limit",{get:function(){return this._limit},set:function(e){this._limit=e,this.checkTrim()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ratio",{get:function(){return this._ratio},set:function(e){this._ratio=Math.min(Math.max(0,e),1),this.checkTrim()},enumerable:!0,configurable:!0}),t.prototype.get=function(t){return e.prototype.get.call(this,t,u.AsNew)},t.prototype.peek=function(t){return e.prototype.get.call(this,t,u.None)},t.prototype.set=function(t,n){e.prototype.set.call(this,t,n,u.AsNew),this.checkTrim()},t.prototype.checkTrim=function(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))},t}(m)},"./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/*! exports provided: LANGUAGE_DEFAULT, Platform, isWindows, isMacintosh, isLinux, isNative, isWeb, platform, isRootUser, language, locale, translationsConfigFile, globals, setImmediate, OS */function(e,t,n){"use strict";n.r(t),function(e,r){n.d(t,"LANGUAGE_DEFAULT",function(){return h}),n.d(t,"Platform",function(){return o}),n.d(t,"isWindows",function(){return _}),n.d(t,"isMacintosh",function(){return b}),n.d(t,"isLinux",function(){return S}),n.d(t,"isNative",function(){return C}),n.d(t,"isWeb",function(){return E}),n.d(t,"platform",function(){return x}),n.d(t,"isRootUser",function(){return j}),n.d(t,"language",function(){return w}),n.d(t,"locale",function(){return A}),n.d(t,"translationsConfigFile",function(){return N}),n.d(t,"globals",function(){return P}),n.d(t,"setImmediate",function(){return k}),n.d(t,"OS",function(){return T});var o,i=!1,s=!1,a=!1,u=!1,c=!1,l=void 0,f=void 0,d=void 0,h="en";if("object"==typeof e&&"function"==typeof e.nextTick&&"string"==typeof e.platform){i="win32"===e.platform,s="darwin"===e.platform,a="linux"===e.platform;var m=e.env.VSCODE_NLS_CONFIG;if(m)try{var p=JSON.parse(m),g=p.availableLanguages["*"];l=p.locale,f=g||h,d=p._translationsConfigFile}catch(e){}u=!0}else if("object"==typeof navigator){var v=navigator.userAgent;i=v.indexOf("Windows")>=0,s=v.indexOf("Macintosh")>=0,a=v.indexOf("Linux")>=0,c=!0,f=l=navigator.language}!function(e){e[e.Web=0]="Web",e[e.Mac=1]="Mac",e[e.Linux=2]="Linux",e[e.Windows=3]="Windows"}(o||(o={}));var y=o.Web;u&&(s?y=o.Mac:i?y=o.Windows:a&&(y=o.Linux));var _=i,b=s,S=a,C=u,E=c,x=y;function j(){return u&&!i&&0===e.getuid()}var w=f,A=l,N=d,P="object"==typeof self?self:"object"==typeof r?r:{},O=null;function k(t){return null===O&&(O=P.setImmediate?P.setImmediate.bind(P):void 0!==e&&"function"==typeof e.nextTick?e.nextTick.bind(e):P.setTimeout.bind(P)),O(t)}var T=s?2:i?1:3}.call(this,n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"),n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/*! exports provided: empty, isFalsyOrWhitespace, pad, format, escape, escapeRegExpCharacters, trim, ltrim, rtrim, convertSimple2RegExpPattern, stripWildcards, startsWith, endsWith, createRegExp, regExpLeadsToEndlessLoop, regExpContainsBackreference, canNormalize, normalizeNFC, normalizeNFD, firstNonWhitespaceIndex, getLeadingWhitespace, lastNonWhitespaceIndex, compare, compareIgnoreCase, equalsIgnoreCase, startsWithIgnoreCase, commonPrefixLength, commonSuffixLength, overlap, isHighSurrogate, isLowSurrogate, containsRTL, containsEmoji, isBasicASCII, containsFullWidthCharacter, isFullWidthCharacter, lcut, removeAnsiEscapeCodes, UTF8_BOM_CHARACTER, startsWithUTF8BOM, stripUTF8BOM, safeBtoa, repeat, fuzzyContains, containsUppercaseCharacter */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return o}),n.d(t,"isFalsyOrWhitespace",function(){return i}),n.d(t,"pad",function(){return s}),n.d(t,"format",function(){return u}),n.d(t,"escape",function(){return c}),n.d(t,"escapeRegExpCharacters",function(){return l}),n.d(t,"trim",function(){return f}),n.d(t,"ltrim",function(){return d}),n.d(t,"rtrim",function(){return h}),n.d(t,"convertSimple2RegExpPattern",function(){return m}),n.d(t,"stripWildcards",function(){return p}),n.d(t,"startsWith",function(){return g}),n.d(t,"endsWith",function(){return v}),n.d(t,"createRegExp",function(){return y}),n.d(t,"regExpLeadsToEndlessLoop",function(){return _}),n.d(t,"regExpContainsBackreference",function(){return b}),n.d(t,"canNormalize",function(){return S}),n.d(t,"normalizeNFC",function(){return E}),n.d(t,"normalizeNFD",function(){return j}),n.d(t,"firstNonWhitespaceIndex",function(){return N}),n.d(t,"getLeadingWhitespace",function(){return P}),n.d(t,"lastNonWhitespaceIndex",function(){return O}),n.d(t,"compare",function(){return k}),n.d(t,"compareIgnoreCase",function(){return T}),n.d(t,"equalsIgnoreCase",function(){return D}),n.d(t,"startsWithIgnoreCase",function(){return V}),n.d(t,"commonPrefixLength",function(){return R}),n.d(t,"commonSuffixLength",function(){return U}),n.d(t,"overlap",function(){return K}),n.d(t,"isHighSurrogate",function(){return q}),n.d(t,"isLowSurrogate",function(){return B}),n.d(t,"containsRTL",function(){return H}),n.d(t,"containsEmoji",function(){return Y}),n.d(t,"isBasicASCII",function(){return G}),n.d(t,"containsFullWidthCharacter",function(){return Q}),n.d(t,"isFullWidthCharacter",function(){return X}),n.d(t,"lcut",function(){return Z}),n.d(t,"removeAnsiEscapeCodes",function(){return re}),n.d(t,"UTF8_BOM_CHARACTER",function(){return oe}),n.d(t,"startsWithUTF8BOM",function(){return ie}),n.d(t,"stripUTF8BOM",function(){return se}),n.d(t,"safeBtoa",function(){return ae}),n.d(t,"repeat",function(){return ue}),n.d(t,"fuzzyContains",function(){return ce}),n.d(t,"containsUppercaseCharacter",function(){return le});var r=n(/*! ./map.js */"./node_modules/monaco-editor/esm/vs/base/common/map.js"),o="";function i(e){return!e||"string"!=typeof e||0===e.trim().length}function s(e,t,n){void 0===n&&(n="0");for(var r=""+e,o=[r],i=r.length;i<t;i++)o.push(n);return o.reverse().join("")}var a=/{(\d+)}/g;function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return 0===t.length?e:e.replace(a,function(e,n){var r=parseInt(n,10);return isNaN(r)||r<0||r>=t.length?e:t[r]})}function c(e){return e.replace(/[<|>|&]/g,function(e){switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";default:return e}})}function l(e){return e.replace(/[\-\\\{\}\*\+\?\|\^\$\.\[\]\(\)\#]/g,"\\$&")}function f(e,t){return void 0===t&&(t=" "),h(d(e,t),t)}function d(e,t){if(!e||!t)return e;var n=t.length;if(0===n||0===e.length)return e;for(var r=0;e.indexOf(t,r)===r;)r+=n;return e.substring(r)}function h(e,t){if(!e||!t)return e;var n=t.length,r=e.length;if(0===n||0===r)return e;for(var o=r,i=-1;-1!==(i=e.lastIndexOf(t,o-1))&&i+n===o;){if(0===i)return"";o=i}return e.substring(0,o)}function m(e){return e.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}function p(e){return e.replace(/\*/g,"")}function g(e,t){if(e.length<t.length)return!1;if(e===t)return!0;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function v(e,t){var n=e.length-t.length;return n>0?e.indexOf(t,n)===n:0===n&&e===t}function y(e,t,n){if(void 0===n&&(n={}),!e)throw new Error("Cannot create regex from empty string");t||(e=l(e)),n.wholeWord&&(/\B/.test(e.charAt(0))||(e="\\b"+e),/\B/.test(e.charAt(e.length-1))||(e+="\\b"));var r="";return n.global&&(r+="g"),n.matchCase||(r+="i"),n.multiline&&(r+="m"),new RegExp(e,r)}function _(e){return"^"!==e.source&&"^$"!==e.source&&"$"!==e.source&&"^\\s*$"!==e.source&&(e.exec("")&&0===e.lastIndex)}function b(e){return!!e.match(/([^\\]|^)(\\\\)*\\\d+/)}var S="function"==typeof"".normalize,C=new r.LRUCache(1e4);function E(e){return A(e,"NFC",C)}var x=new r.LRUCache(1e4);function j(e){return A(e,"NFD",x)}var w=/[^\u0000-\u0080]/;function A(e,t,n){if(!S||!e)return e;var r,o=n.get(e);return o||(r=w.test(e)?e.normalize(t):e,n.set(e,r),r)}function N(e){for(var t=0,n=e.length;t<n;t++){var r=e.charCodeAt(t);if(32!==r&&9!==r)return t}return-1}function P(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);for(var r=t;r<n;r++){var o=e.charCodeAt(r);if(32!==o&&9!==o)return e.substring(t,r)}return e.substring(t,n)}function O(e,t){void 0===t&&(t=e.length-1);for(var n=t;n>=0;n--){var r=e.charCodeAt(n);if(32!==r&&9!==r)return n}return-1}function k(e,t){return e<t?-1:e>t?1:0}function T(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){var o=e.charCodeAt(r),i=t.charCodeAt(r);if(o!==i){I(o)&&(o+=32),I(i)&&(i+=32);var s=o-i;if(0!==s)return L(o)&&L(i)?s:k(e.toLowerCase(),t.toLowerCase())}}return e.length<t.length?-1:e.length>t.length?1:0}function L(e){return e>=97&&e<=122}function I(e){return e>=65&&e<=90}function M(e){return L(e)||I(e)}function D(e,t){return(e?e.length:0)===(t?t.length:0)&&F(e,t)}function F(e,t,n){if(void 0===n&&(n=e.length),"string"!=typeof e||"string"!=typeof t)return!1;for(var r=0;r<n;r++){var o=e.charCodeAt(r),i=t.charCodeAt(r);if(o!==i)if(M(o)&&M(i)){var s=Math.abs(o-i);if(0!==s&&32!==s)return!1}else if(String.fromCharCode(o).toLowerCase()!==String.fromCharCode(i).toLowerCase())return!1}return!0}function V(e,t){var n=t.length;return!(t.length>e.length)&&F(e,t,n)}function R(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n++)if(e.charCodeAt(n)!==t.charCodeAt(n))return n;return r}function U(e,t){var n,r=Math.min(e.length,t.length),o=e.length-1,i=t.length-1;for(n=0;n<r;n++)if(e.charCodeAt(o-n)!==t.charCodeAt(i-n))return n;return r}function W(e,t,n,r,o,i){for(;t<n&&o<i;){if(e[t]!==r[o])return!1;t+=1,o+=1}return!0}function K(e,t){var n=e.length,r=t.length,o=n-r;if(0===o)return e===t?n:0;for(o<0&&(r+=o,o=0);o<n&&r>0;){if(W(e,o,n,t,0,r))return r;r-=1,o+=1}return 0}function q(e){return 55296<=e&&e<=56319}function B(e){return 56320<=e&&e<=57343}var J=/(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u08BD\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE33\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDCFF]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD50-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;function H(e){return J.test(e)}var $=/(?:[\u231A\u231B\u23F0\u23F3\u2600-\u27BF\u2B50\u2B55]|\uD83C[\uDDE6-\uDDFF\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F\uDE80-\uDEF8]|\uD83E[\uDD00-\uDDE6])/;function Y(e){return $.test(e)}var z=/^[\t\n\r\x20-\x7E]*$/;function G(e){return z.test(e)}function Q(e){for(var t=0,n=e.length;t<n;t++)if(X(e.charCodeAt(t)))return!0;return!1}function X(e){return(e=+e)>=11904&&e<=55215||e>=63744&&e<=64255||e>=65281&&e<=65374}function Z(e,t){if(e.length<t)return e;for(var n=/\b/g,r=0;n.test(e)&&!(e.length-n.lastIndex<t);)r=n.lastIndex,n.lastIndex+=1;return e.substring(r).replace(/^\s/,o)}var ee=/\x1B\x5B[12]?K/g,te=/\x1b\[\d+m/g,ne=/\x1b\[0?m/g;function re(e){return e&&(e=(e=(e=e.replace(ee,"")).replace(te,"")).replace(ne,"")),e}var oe=String.fromCharCode(65279);function ie(e){return e&&e.length>0&&65279===e.charCodeAt(0)}function se(e){return ie(e)?e.substr(1):e}function ae(e){return btoa(encodeURIComponent(e))}function ue(e,t){for(var n="",r=0;r<t;r++)n+=e;return n}function ce(e,t){if(!e||!t)return!1;if(e.length<t.length)return!1;for(var n=t.length,r=e.toLowerCase(),o=0,i=-1;o<n;){var s=r.indexOf(t[o],i+1);if(s<0)return!1;i=s,o++}return!0}function le(e,t){return void 0===t&&(t=!1),!!e&&(t&&(e=e.replace(/\\./g,"")),e.toLowerCase()!==e)}},"./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),o=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function i(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function s(e){return encodeURIComponent(e).replace(/[!'()*]/g,i)}function a(e){return e.replace(/[#?]/,i)}var u=/^\w[\w\d+.-]*$/,c=/^\//,l=/^\/\//;var f="",d="/",h=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,m=/^\/[a-zA-Z]:/,p=/^(\/)?([A-Z]:)/,g=/^[a-zA-Z]:/,v=function(){function e(e,t,n,r,o){"object"==typeof e?(this.scheme=e.scheme||f,this.authority=e.authority||f,this.path=e.path||f,this.query=e.query||f,this.fragment=e.fragment||f):(this.scheme=e||f,this.authority=t||f,this.path=n||f,this.query=r||f,this.fragment=o||f,function(e){if(e.scheme&&!u.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!c.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(l.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this))}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"fsPath",{get:function(){return _(this)},enumerable:!0,configurable:!0}),e.prototype.with=function(e){if(!e)return this;var t=e.scheme,n=e.authority,r=e.path,o=e.query,i=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=f),void 0===n?n=this.authority:null===n&&(n=f),void 0===r?r=this.path:null===r&&(r=f),void 0===o?o=this.query:null===o&&(o=f),void 0===i?i=this.fragment:null===i&&(i=f),t===this.scheme&&n===this.authority&&r===this.path&&o===this.query&&i===this.fragment?this:new y(t,n,r,o,i)},e.parse=function(e){var t=h.exec(e);return t?new y(t[2]||f,decodeURIComponent(t[4]||f),decodeURIComponent(t[5]||f),decodeURIComponent(t[7]||f),decodeURIComponent(t[9]||f)):new y(f,f,f,f,f)},e.file=function(e){var t=f;if(r.isWindows&&(e=e.replace(/\\/g,d)),e[0]===d&&e[1]===d){var n=e.indexOf(d,2);-1===n?(t=e.substring(2),e=d):(t=e.substring(2,n),e=e.substring(n)||d)}return g.test(e)?e=d+e:e[0]!==d&&(e=d+e),new y("file",t,e,f,f)},e.from=function(e){return new y(e.scheme,e.authority,e.path,e.query,e.fragment)},e.prototype.toString=function(e){return void 0===e&&(e=!1),b(this,e)},e.prototype.toJSON=function(){var e={$mid:1,fsPath:this.fsPath,external:this.toString()};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){if(t){if(t instanceof e)return t;var n=new y(t);return n._fsPath=t.fsPath,n._formatted=t.external,n}return t},e}();t.default=v;var y=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return o(t,e),Object.defineProperty(t.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=_(this)),this._fsPath},enumerable:!0,configurable:!0}),t.prototype.toString=function(e){return void 0===e&&(e=!1),e?b(this,!0):(this._formatted||(this._formatted=b(this,!1)),this._formatted)},t}(v);function _(e){var t;return t=e.authority&&e.path&&"file"===e.scheme?"//"+e.authority+e.path:m.test(e.path)?e.path[1].toLowerCase()+e.path.substr(2):e.path,r.isWindows&&(t=t.replace(/\//g,"\\")),t}function b(e,t){var n=t?a:s,r=[],o=e.scheme,i=e.authority,u=e.path,c=e.query,l=e.fragment;if(o&&r.push(o,":"),(i||"file"===o)&&r.push("//"),i){if(-1!==(v=i.indexOf("@"))){var h=i.substr(0,v);i=i.substr(v+1),-1===(v=h.indexOf(":"))?r.push(n(h)):r.push(n(h.substr(0,v)),":",n(h.substr(v+1))),r.push("@")}-1===(v=(i=i.toLowerCase()).indexOf(":"))?r.push(n(i)):r.push(n(i.substr(0,v)),i.substr(v))}if(u){var m=p.exec(u);m&&(u=m[1]?"/"+m[2].toLowerCase()+u.substr(3):m[2].toLowerCase()+u.substr(2));for(var g=0;;){var v;if(-1===(v=u.indexOf(d,g))){r.push(n(u.substring(g)));break}r.push(n(u.substring(g,v)),d),g=v+1}}return c&&r.push("?",n(c)),l&&r.push("#",n(l)),r.join(f)}},"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js ***!
  \*********************************************************************/
/*! exports provided: Promise, TPromise, PPromise */function(e,t,n){"use strict";n.r(t),function(e,r){var o;n.d(t,"Promise",function(){return i}),n.d(t,"TPromise",function(){return s}),n.d(t,"PPromise",function(){return a}),function(){var t=Object.create(null);t["WinJS/Core/_WinJS"]={};var n=function(e,n,r){var o={},i=!1,s=n.map(function(e){return"exports"===e?(i=!0,o):t[e]}),a=r.apply({},s);t[e]=i?o:a};n("WinJS/Core/_Global",[],function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0!==e?e:{}}),n("WinJS/Core/_BaseCoreUtils",["WinJS/Core/_Global"],function(e){var t=null;return{hasWinRT:!!e.Windows,markSupportedForProcessing:function(e){return e.supportedForProcessing=!0,e},_setImmediate:function(n){null===t&&(t=e.setImmediate?e.setImmediate.bind(e):void 0!==r&&"function"==typeof r.nextTick?r.nextTick.bind(r):e.setTimeout.bind(e)),t(n)}}}),n("WinJS/Core/_WriteProfilerMark",["WinJS/Core/_Global"],function(e){return e.msWriteProfilerMark||function(){}}),n("WinJS/Core/_Base",["WinJS/Core/_WinJS","WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_WriteProfilerMark"],function(e,t,n,r){function o(e,t,n){var r,o,i,s=Object.keys(t),a=Array.isArray(e);for(o=0,i=s.length;o<i;o++){var u=s[o],c=95!==u.charCodeAt(0),l=t[u];!l||"object"!=typeof l||void 0===l.value&&"function"!=typeof l.get&&"function"!=typeof l.set?c?a?e.forEach(function(e){e[u]=l}):e[u]=l:(r=r||{})[u]={value:l,enumerable:c,configurable:!0,writable:!0}:(void 0===l.enumerable&&(l.enumerable=c),n&&l.setName&&"function"==typeof l.setName&&l.setName(n+"."+u),(r=r||{})[u]=l)}r&&(a?e.forEach(function(e){Object.defineProperties(e,r)}):Object.defineProperties(e,r))}return function(){var n=e;function i(n,r){var o=n||{};if(r){var i=r.split(".");o===t&&"WinJS"===i[0]&&(o=e,i.splice(0,1));for(var s=0,a=i.length;s<a;s++){var u=i[s];o[u]||Object.defineProperty(o,u,{value:{},writable:!1,enumerable:!0,configurable:!0}),o=o[u]}}return o}function s(e,t,n){var r=i(e,t);return n&&o(r,n,t||"<ANONYMOUS>"),r}n.Namespace||(n.Namespace=Object.create(Object.prototype));var a={uninitialized:1,working:2,initialized:3};Object.defineProperties(n.Namespace,{defineWithParent:{value:s,writable:!0,enumerable:!0,configurable:!0},define:{value:function(e,n){return s(t,e,n)},writable:!0,enumerable:!0,configurable:!0},_lazy:{value:function(e){var t,n,o=a.uninitialized;return{setName:function(e){t=e},get:function(){switch(o){case a.initialized:return n;case a.uninitialized:o=a.working;try{r("WinJS.Namespace._lazy:"+t+",StartTM"),n=e()}finally{r("WinJS.Namespace._lazy:"+t+",StopTM"),o=a.uninitialized}return e=null,o=a.initialized,n;case a.working:throw"Illegal: reentrancy on initialization";default:throw"Illegal"}},set:function(e){switch(o){case a.working:throw"Illegal: reentrancy on initialization";default:o=a.initialized,n=e}},enumerable:!0,configurable:!0}},writable:!0,enumerable:!0,configurable:!0},_moduleDefine:{value:function(e,n,r){var s=[e],a=null;return n&&(a=i(t,n),s.push(a)),o(s,r,n||"<ANONYMOUS>"),a},writable:!0,enumerable:!0,configurable:!0}})}(),function(){function t(e,t,r){return e=e||function(){},n.markSupportedForProcessing(e),t&&o(e.prototype,t),r&&o(e,r),e}e.Namespace.define("WinJS.Class",{define:t,derive:function(e,r,i,s){if(e){r=r||function(){};var a=e.prototype;return r.prototype=Object.create(a),n.markSupportedForProcessing(r),Object.defineProperty(r.prototype,"constructor",{value:r,writable:!0,configurable:!0,enumerable:!0}),i&&o(r.prototype,i),s&&o(r,s),r}return t(r,i,s)},mix:function(e){var t,n;for(e=e||function(){},t=1,n=arguments.length;t<n;t++)o(e.prototype,arguments[t]);return e}})}(),{Namespace:e.Namespace,Class:e.Class}}),n("WinJS/Core/_ErrorFromName",["WinJS/Core/_Base"],function(e){var t=e.Class.derive(Error,function(e,t){this.name=e,this.message=t||e},{},{supportedForProcessing:!1});return e.Namespace.define("WinJS",{ErrorFromName:t}),t}),n("WinJS/Core/_Events",["exports","WinJS/Core/_Base"],function(e,t){function n(e){var t="_on"+e+"state";return{get:function(){var e=this[t];return e&&e.userHandler},set:function(n){var r=this[t];n?(r||(r={wrapper:function(e){return r.userHandler(e)},userHandler:n},Object.defineProperty(this,t,{value:r,enumerable:!1,writable:!0,configurable:!0}),this.addEventListener(e,r.wrapper,!1)),r.userHandler=n):r&&(this.removeEventListener(e,r.wrapper,!1),this[t]=null)},enumerable:!0}}var r=t.Class.define(function(e,t,n){this.detail=t,this.target=n,this.timeStamp=Date.now(),this.type=e},{bubbles:{value:!1,writable:!1},cancelable:{value:!1,writable:!1},currentTarget:{get:function(){return this.target}},defaultPrevented:{get:function(){return this._preventDefaultCalled}},trusted:{value:!1,writable:!1},eventPhase:{value:0,writable:!1},target:null,timeStamp:null,type:null,preventDefault:function(){this._preventDefaultCalled=!0},stopImmediatePropagation:function(){this._stopImmediatePropagationCalled=!0},stopPropagation:function(){}},{supportedForProcessing:!1}),o={_listeners:null,addEventListener:function(e,t,n){n=n||!1,this._listeners=this._listeners||{};for(var r=this._listeners[e]=this._listeners[e]||[],o=0,i=r.length;o<i;o++){var s=r[o];if(s.useCapture===n&&s.listener===t)return}r.push({listener:t,useCapture:n})},dispatchEvent:function(e,t){var n=this._listeners&&this._listeners[e];if(n){for(var o=new r(e,t,this),i=0,s=(n=n.slice(0,n.length)).length;i<s&&!o._stopImmediatePropagationCalled;i++)n[i].listener(o);return o.defaultPrevented||!1}return!1},removeEventListener:function(e,t,n){n=n||!1;var r=this._listeners&&this._listeners[e];if(r)for(var o=0,i=r.length;o<i;o++){var s=r[o];if(s.listener===t&&s.useCapture===n){r.splice(o,1),0===r.length&&delete this._listeners[e];break}}}};t.Namespace._moduleDefine(e,"WinJS.Utilities",{_createEventProperty:n,createEventProperties:function(){for(var e={},t=0,r=arguments.length;t<r;t++){var o=arguments[t];e["on"+o]=n(o)}return e},eventMixin:o})}),n("WinJS/Core/_Trace",["WinJS/Core/_Global"],function(e){function t(e){return e}return{_traceAsyncOperationStarting:e.Debug&&e.Debug.msTraceAsyncOperationStarting&&e.Debug.msTraceAsyncOperationStarting.bind(e.Debug)||t,_traceAsyncOperationCompleted:e.Debug&&e.Debug.msTraceAsyncOperationCompleted&&e.Debug.msTraceAsyncOperationCompleted.bind(e.Debug)||t,_traceAsyncCallbackStarting:e.Debug&&e.Debug.msTraceAsyncCallbackStarting&&e.Debug.msTraceAsyncCallbackStarting.bind(e.Debug)||t,_traceAsyncCallbackCompleted:e.Debug&&e.Debug.msTraceAsyncCallbackCompleted&&e.Debug.msTraceAsyncCallbackCompleted.bind(e.Debug)||t}}),n("WinJS/Promise/_StateMachine",["WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_Base","WinJS/Core/_ErrorFromName","WinJS/Core/_Events","WinJS/Core/_Trace"],function(e,t,n,r,o,i){e.Debug&&(e.Debug.setNonUserCodeExceptions=!0);var s=new(n.Class.mix(n.Class.define(null,{},{supportedForProcessing:!1}),o.eventMixin));s._listeners={};var a="error",u="Canceled",c=!1,l={promise:1,thenPromise:2,errorPromise:4,exceptionPromise:8,completePromise:16};l.all=l.promise|l.thenPromise|l.errorPromise|l.exceptionPromise|l.completePromise;var f,d,h,m,p,g,v,y,_,b,S=1;function C(){}f={name:"created",enter:function(e){e._setState(d)},cancel:C,done:C,then:C,_completed:C,_error:C,_notify:C,_progress:C,_setCompleteValue:C,_setErrorValue:C},d={name:"working",enter:C,cancel:function(e){e._setState(p)},done:O,then:U,_completed:x,_error:k,_notify:C,_progress:M,_setCompleteValue:R,_setErrorValue:V},h={name:"waiting",enter:function(e){var t=e._value;if(t instanceof K&&t._state!==b&&t._state!==y)D(t,{promise:e});else{var n=function(r){t._errorId?e._chainedError(r,t):(I(e,r,w,t,n),e._error(r))};n.handlesOnError=!0,t.then(e._completed.bind(e),n,e._progress.bind(e))}},cancel:function(e){e._setState(m)},done:O,then:U,_completed:x,_error:k,_notify:C,_progress:M,_setCompleteValue:R,_setErrorValue:V},m={name:"waiting_canceled",enter:function(e){e._setState(g);var t=e._value;t.cancel&&t.cancel()},cancel:C,done:O,then:U,_completed:x,_error:k,_notify:C,_progress:M,_setCompleteValue:R,_setErrorValue:V},p={name:"canceled",enter:function(e){e._setState(g),e._cancelAction()},cancel:C,done:O,then:U,_completed:x,_error:k,_notify:C,_progress:M,_setCompleteValue:R,_setErrorValue:V},g={name:"canceling",enter:function(e){var t=new Error(u);t.name=t.message,e._value=t,e._setState(_)},cancel:C,done:C,then:C,_completed:C,_error:C,_notify:C,_progress:C,_setCompleteValue:C,_setErrorValue:C},v={name:"complete_notify",enter:function(e){if(e.done=J.prototype.done,e.then=J.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(y)},cancel:C,done:null,then:null,_completed:C,_error:C,_notify:T,_progress:C,_setCompleteValue:C,_setErrorValue:C},y={name:"success",enter:function(e){e.done=J.prototype.done,e.then=J.prototype.then,e._cleanupAction()},cancel:C,done:null,then:null,_completed:C,_error:C,_notify:T,_progress:C,_setCompleteValue:C,_setErrorValue:C},_={name:"error_notify",enter:function(e){if(e.done=q.prototype.done,e.then=q.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(b)},cancel:C,done:null,then:null,_completed:C,_error:C,_notify:L,_progress:C,_setCompleteValue:C,_setErrorValue:C},b={name:"error",enter:function(e){e.done=q.prototype.done,e.then=q.prototype.then,e._cleanupAction()},cancel:C,done:null,then:null,_completed:C,_error:C,_notify:L,_progress:C,_setCompleteValue:C,_setErrorValue:C};var E=n.Class.define(null,{_listeners:null,_nextState:null,_state:null,_value:null,cancel:function(){this._state.cancel(this),this._run()},done:function(e,t,n){this._state.done(this,e,t,n)},then:function(e,t,n){return this._state.then(this,e,t,n)},_chainedError:function(e,t){var n=this._state._error(this,e,A,t);return this._run(),n},_completed:function(e){var t=this._state._completed(this,e);return this._run(),t},_error:function(e){var t=this._state._error(this,e,N);return this._run(),t},_progress:function(e){this._state._progress(this,e)},_setState:function(e){this._nextState=e},_setCompleteValue:function(e){this._state._setCompleteValue(this,e),this._run()},_setChainedErrorValue:function(e,t){var n=this._state._setErrorValue(this,e,A,t);return this._run(),n},_setExceptionValue:function(e){var t=this._state._setErrorValue(this,e,P);return this._run(),t},_run:function(){for(;this._nextState;)this._state=this._nextState,this._nextState=null,this._state.enter(this)}},{supportedForProcessing:!1});function x(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?h:v,e._value=t,e._setState(n)}function j(e,t,n,r,o,i){return{exception:e,error:t,promise:n,handler:i,id:r,parent:o}}function w(e,t,n,r){var o=n._isException,i=n._errorId;return j(o?t:null,o?null:t,e,i,n,r)}function A(e,t,n){var r=n._isException,o=n._errorId;return F(e,o,r),j(r?t:null,r?null:t,e,o,n)}function N(e,t){var n=++S;return F(e,n),j(null,t,e,n)}function P(e,t){var n=++S;return F(e,n,!0),j(t,null,e,n)}function O(e,t,n,r){D(e,{c:t,e:n,p:r,asyncOpID:i._traceAsyncOperationStarting("WinJS.Promise.done")})}function k(e,t,n,r){e._value=t,I(e,t,n,r),e._setState(_)}function T(t,n){var r,o,s=t._value,a=t._listeners;if(a)for(t._listeners=null,r=0,o=Array.isArray(a)?a.length:1;r<o;r++){var u=1===o?a:a[r],c=u.c,l=u.promise;if(i._traceAsyncOperationCompleted(u.asyncOpID,e.Debug&&e.Debug.MS_ASYNC_OP_STATUS_SUCCESS),l){i._traceAsyncCallbackStarting(u.asyncOpID);try{l._setCompleteValue(c?c(s):s)}catch(e){l._setExceptionValue(e)}finally{i._traceAsyncCallbackCompleted()}l._state!==h&&l._listeners&&n.push(l)}else J.prototype.done.call(t,c)}}function L(t,n){var r,o,s=t._value,a=t._listeners;if(a)for(t._listeners=null,r=0,o=Array.isArray(a)?a.length:1;r<o;r++){var c=1===o?a:a[r],l=c.e,f=c.promise,d=e.Debug&&(s&&s.name===u?e.Debug.MS_ASYNC_OP_STATUS_CANCELED:e.Debug.MS_ASYNC_OP_STATUS_ERROR);if(i._traceAsyncOperationCompleted(c.asyncOpID,d),f){var m=!1;try{l?(i._traceAsyncCallbackStarting(c.asyncOpID),m=!0,l.handlesOnError||I(f,s,w,t,l),f._setCompleteValue(l(s))):f._setChainedErrorValue(s,t)}catch(e){f._setExceptionValue(e)}finally{m&&i._traceAsyncCallbackCompleted()}f._state!==h&&f._listeners&&n.push(f)}else q.prototype.done.call(t,null,l)}}function I(e,t,n,r,o){if(s._listeners[a]){if(t instanceof Error&&t.message===u)return;s.dispatchEvent(a,n(e,t,r,o))}}function M(e,t){var n,r,o=e._listeners;if(o)for(n=0,r=Array.isArray(o)?o.length:1;n<r;n++){var i=1===r?o:o[n],s=i.p;if(s)try{s(t)}catch(e){}i.c||i.e||!i.promise||i.promise._progress(t)}}function D(e,t){var n=e._listeners;n?(n=Array.isArray(n)?n:[n]).push(t):n=t,e._listeners=n}function F(e,t,n){e._isException=n||!1,e._errorId=t}function V(e,t,n,r){e._value=t,I(e,t,n,r),e._setState(b)}function R(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?h:y,e._value=t,e._setState(n)}function U(e,t,n,r){var o=new K(e);return D(e,{promise:o,c:t,e:n,p:r,asyncOpID:i._traceAsyncOperationStarting("WinJS.Promise.then")}),o}var W,K=n.Class.derive(E,function(e){c&&(!0===c||c&l.thenPromise)&&(this._stack=H._getStack()),this._creator=e,this._setState(f),this._run()},{_creator:null,_cancelAction:function(){this._creator&&this._creator.cancel()},_cleanupAction:function(){this._creator=null}},{supportedForProcessing:!1}),q=n.Class.define(function(e){c&&(!0===c||c&l.errorPromise)&&(this._stack=H._getStack()),this._value=e,I(this,e,N)},{cancel:function(){},done:function(e,t){var n=this._value;if(t)try{t.handlesOnError||I(null,n,w,this,t);var r=t(n);return void(r&&"object"==typeof r&&"function"==typeof r.done&&r.done())}catch(e){n=e}n instanceof Error&&n.message===u||H._doneHandler(n)},then:function(e,t){if(!t)return this;var n,r=this._value;try{t.handlesOnError||I(null,r,w,this,t),n=new J(t(r))}catch(e){n=e===r?this:new B(e)}return n}},{supportedForProcessing:!1}),B=n.Class.derive(q,function(e){c&&(!0===c||c&l.exceptionPromise)&&(this._stack=H._getStack()),this._value=e,I(this,e,P)},{},{supportedForProcessing:!1}),J=n.Class.define(function(e){if(c&&(!0===c||c&l.completePromise)&&(this._stack=H._getStack()),e&&"object"==typeof e&&"function"==typeof e.then){var t=new K(null);return t._setCompleteValue(e),t}this._value=e},{cancel:function(){},done:function(e){if(e)try{var t=e(this._value);t&&"object"==typeof t&&"function"==typeof t.done&&t.done()}catch(e){H._doneHandler(e)}},then:function(e){try{var t=e?e(this._value):this._value;return t===this._value?this:new J(t)}catch(e){return new B(e)}}},{supportedForProcessing:!1});var H=n.Class.derive(E,function(e,t){c&&(!0===c||c&l.promise)&&(this._stack=H._getStack()),this._oncancel=t,this._setState(f),this._run();try{e(this._completed.bind(this),this._error.bind(this),this._progress.bind(this))}catch(e){this._setExceptionValue(e)}},{_oncancel:null,_cancelAction:function(){try{if(!this._oncancel)throw new Error("Promise did not implement oncancel");this._oncancel()}catch(e){e.message,e.stack;s.dispatchEvent("error",e)}},_cleanupAction:function(){this._oncancel=null}},{addEventListener:function(e,t,n){s.addEventListener(e,t,n)},any:function(e){return new H(function(t,n){var r=Object.keys(e);0===r.length&&t();var o=0;r.forEach(function(i){H.as(e[i]).then(function(){t({key:i,value:e[i]})},function(s){s instanceof Error&&s.name===u?++o===r.length&&t(H.cancel):n({key:i,value:e[i]})})})},function(){Object.keys(e).forEach(function(t){var n=H.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},as:function(e){return e&&"object"==typeof e&&"function"==typeof e.then?e:new J(e)},cancel:{get:function(){return W=W||new q(new r(u))}},dispatchEvent:function(e,t){return s.dispatchEvent(e,t)},is:function(e){return e&&"object"==typeof e&&"function"==typeof e.then},join:function(e){return new H(function(t,n,r){var o=Object.keys(e),i=Array.isArray(e)?[]:{},s=Array.isArray(e)?[]:{},a=0,c=o.length,l=function(e){if(0==--c){var a=Object.keys(i).length;if(0===a)t(s);else{var l=0;o.forEach(function(e){var t=i[e];t instanceof Error&&t.name===u&&l++}),l===a?t(H.cancel):n(i)}}else r({Key:e,Done:!0})};o.forEach(function(t){var n=e[t];void 0===n?a++:H.then(n,function(e){s[t]=e,l(t)},function(e){i[t]=e,l(t)})}),0!==(c-=a)||t(s)},function(){Object.keys(e).forEach(function(t){var n=H.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},removeEventListener:function(e,t,n){s.removeEventListener(e,t,n)},supportedForProcessing:!1,then:function(e,t,n,r){return H.as(e).then(t,n,r)},thenEach:function(e,t,n,r){var o=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(i){o[i]=H.as(e[i]).then(t,n,r)}),H.join(o)},timeout:function(n,r){var o=function(n){var r;return new H(function(o){n?r=e.setTimeout(o,n):t._setImmediate(o)},function(){r&&e.clearTimeout(r)})}(n);return r?function(e,t){var n=function(){e.cancel()};return e.then(function(){t.cancel()}),t.then(n,n),t}(o,r):o},wrap:function(e){return new J(e)},wrapError:function(e){return new q(e)},_veryExpensiveTagWithStack:{get:function(){return c},set:function(e){c=e}},_veryExpensiveTagWithStack_tag:l,_getStack:function(){if(e.Debug&&e.Debug.debuggerEnabled)try{throw new Error}catch(e){return e.stack}},_cancelBlocker:function(e,t){if(!H.is(e))return H.wrap(e);var n,r,o=new H(function(e,t){n=e,r=t},function(){n=null,r=null,t&&t()});return e.then(function(e){n&&n(e)},function(e){r&&r(e)}),o}});return Object.defineProperties(H,o.createEventProperties(a)),H._doneHandler=function(e){t._setImmediate(function(){throw e})},{PromiseStateMachine:E,Promise:H,state_created:f}}),n("WinJS/Promise",["WinJS/Core/_Base","WinJS/Promise/_StateMachine"],function(e,t){return e.Namespace.define("WinJS",{Promise:t.Promise}),t.Promise}),(o=t["WinJS/Core/_WinJS"]).TPromise=o.Promise,o.PPromise=o.Promise}();var i=o.Promise,s=o.TPromise,a=o.PPromise}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/*! exports provided: logOnceWebWorkerWarning, SimpleWorkerClient, SimpleWorkerServer, create */function(e,t,n){"use strict";n.r(t),n.d(t,"logOnceWebWorkerWarning",function(){return f}),n.d(t,"SimpleWorkerClient",function(){return h}),n.d(t,"SimpleWorkerServer",function(){return m}),n.d(t,"create",function(){return p});var r=n(/*! ../errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),o=n(/*! ../lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),i=n(/*! ../winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),s=n(/*! ../async.js */"./node_modules/monaco-editor/esm/vs/base/common/async.js"),a=n(/*! ../platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),u=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c="$initialize",l=!1;function f(e){a.isWeb&&(l||(l=!0,console.warn("Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/Microsoft/monaco-editor#faq")),console.warn(e.message))}var d=function(){function e(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}return e.prototype.setWorkerId=function(e){this._workerId=e},e.prototype.sendMessage=function(e,t){var n=String(++this._lastSentReq),r={c:null,e:null},o=new i.TPromise(function(e,t,n){r.c=e,r.e=t},function(){});return this._pendingReplies[n]=r,this._send({vsWorker:this._workerId,req:n,method:e,args:t}),o},e.prototype.handleMessage=function(e){var t;try{t=JSON.parse(e)}catch(e){}t&&t.vsWorker&&(-1!==this._workerId&&t.vsWorker!==this._workerId||this._handleMessage(t))},e.prototype._handleMessage=function(e){var t=this;if(e.seq){var n=e;if(!this._pendingReplies[n.seq])return void console.warn("Got reply to unknown seq");var o=this._pendingReplies[n.seq];if(delete this._pendingReplies[n.seq],n.err){var i=n.err;return n.err.$isError&&((i=new Error).name=n.err.name,i.message=n.err.message,i.stack=n.err.stack),void o.e(i)}o.c(n.res)}else{var s=e,a=s.req;this._handler.handleMessage(s.method,s.args).then(function(e){t._send({vsWorker:t._workerId,seq:a,res:e,err:void 0})},function(e){e.detail instanceof Error&&(e.detail=Object(r.transformErrorForSerialization)(e.detail)),t._send({vsWorker:t._workerId,seq:a,res:void 0,err:Object(r.transformErrorForSerialization)(e)})})}},e.prototype._send=function(e){var t=JSON.stringify(e);this._handler.sendMessage(t)},e}(),h=function(e){function t(t,n){var r=e.call(this)||this,o=null,s=null;r._worker=r._register(t.create("vs/base/common/worker/simpleWorker",function(e){r._protocol.handleMessage(e)},function(e){s(e)})),r._protocol=new d({sendMessage:function(e){r._worker.postMessage(e)},handleMessage:function(e,t){return i.TPromise.as(null)}}),r._protocol.setWorkerId(r._worker.getId());var a=null;void 0!==self.require&&"function"==typeof self.require.getConfig?a=self.require.getConfig():void 0!==self.requirejs&&(a=self.requirejs.s.contexts._.config),r._lazyProxy=new i.TPromise(function(e,t,n){o=e,s=t},function(){}),r._onModuleLoaded=r._protocol.sendMessage(c,[r._worker.getId(),n,a]),r._onModuleLoaded.then(function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=l(e[n],u);o(t)},function(e){s(e),r._onError("Worker failed to load "+n,e)});var u=function(e,t){return r._request(e,t)},l=function(e,t){return function(){var n=Array.prototype.slice.call(arguments,0);return t(e,n)}};return r}return u(t,e),t.prototype.getProxyObject=function(){return new s.ShallowCancelThenPromise(this._lazyProxy)},t.prototype._request=function(e,t){var n=this;return new i.TPromise(function(r,o,i){n._onModuleLoaded.then(function(){n._protocol.sendMessage(e,t).then(r,o)},o)},function(){})},t.prototype._onError=function(e,t){console.error(e),console.info(t)},t}(o.Disposable),m=function(){function e(e,t){var n=this;this._requestHandler=t,this._protocol=new d({sendMessage:function(t){e(t)},handleMessage:function(e,t){return n._handleMessage(e,t)}})}return e.prototype.onmessage=function(e){this._protocol.handleMessage(e)},e.prototype._handleMessage=function(e,t){if(e===c)return this.initialize(t[0],t[1],t[2]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return i.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return i.TPromise.as(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return i.TPromise.wrapError(e)}},e.prototype.initialize=function(e,t,n){var r,o,s=this;if(this._protocol.setWorkerId(e),this._requestHandler){var a=[];for(var u in this._requestHandler)"function"==typeof this._requestHandler[u]&&a.push(u);return i.TPromise.as(a)}n&&(void 0!==n.baseUrl&&delete n.baseUrl,void 0!==n.paths&&void 0!==n.paths.vs&&delete n.paths.vs,n.catchError=!0,self.require.config(n));var c=new i.TPromise(function(e,t,n){r=e,o=t});return self.require([t],function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0];s._requestHandler=n.create();var o=[];for(var i in s._requestHandler)"function"==typeof s._requestHandler[i]&&o.push(i);r(o)},o),c},e}();function p(e){return new m(e,null)}},"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/*! exports provided: CharacterClassifier, CharacterSet */function(e,t,n){"use strict";n.r(t),n.d(t,"CharacterClassifier",function(){return o}),n.d(t,"CharacterSet",function(){return i});var r=n(/*! ./uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),o=function(){function e(t){var n=Object(r.toUint8)(t);this._defaultValue=n,this._asciiMap=e._createAsciiMap(n),this._map=new Map}return e._createAsciiMap=function(e){for(var t=new Uint8Array(256),n=0;n<256;n++)t[n]=e;return t},e.prototype.set=function(e,t){var n=Object(r.toUint8)(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)},e.prototype.get=function(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue},e}(),i=function(){function e(){this._actual=new o(0)}return e.prototype.add=function(e){this._actual.set(e,1)},e.prototype.has=function(e){return 1===this._actual.get(e)},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/*! exports provided: Position */function(e,t,n){"use strict";n.r(t),n.d(t,"Position",function(){return r});var r=function(){function e(e,t){this.lineNumber=e,this.column=t}return e.prototype.equals=function(t){return e.equals(this,t)},e.equals=function(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column},e.prototype.isBefore=function(t){return e.isBefore(this,t)},e.isBefore=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column},e.prototype.isBeforeOrEqual=function(t){return e.isBeforeOrEqual(this,t)},e.isBeforeOrEqual=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column},e.compare=function(e,t){var n=0|e.lineNumber,r=0|t.lineNumber;return n===r?(0|e.column)-(0|t.column):n-r},e.prototype.clone=function(){return new e(this.lineNumber,this.column)},e.prototype.toString=function(){return"("+this.lineNumber+","+this.column+")"},e.lift=function(t){return new e(t.lineNumber,t.column)},e.isIPosition=function(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/*! exports provided: Range */function(e,t,n){"use strict";n.r(t),n.d(t,"Range",function(){return o});var r=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),o=function(){function e(e,t,n,r){e>n||e===n&&t>r?(this.startLineNumber=n,this.startColumn=r,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=r)}return e.prototype.isEmpty=function(){return e.isEmpty(this)},e.isEmpty=function(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn},e.prototype.containsPosition=function(t){return e.containsPosition(this,t)},e.containsPosition=function(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))},e.prototype.containsRange=function(t){return e.containsRange(this,t)},e.containsRange=function(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))},e.prototype.plusRange=function(t){return e.plusRange(this,t)},e.plusRange=function(t,n){var r,o,i,s;return n.startLineNumber<t.startLineNumber?(r=n.startLineNumber,o=n.startColumn):n.startLineNumber===t.startLineNumber?(r=n.startLineNumber,o=Math.min(n.startColumn,t.startColumn)):(r=t.startLineNumber,o=t.startColumn),n.endLineNumber>t.endLineNumber?(i=n.endLineNumber,s=n.endColumn):n.endLineNumber===t.endLineNumber?(i=n.endLineNumber,s=Math.max(n.endColumn,t.endColumn)):(i=t.endLineNumber,s=t.endColumn),new e(r,o,i,s)},e.prototype.intersectRanges=function(t){return e.intersectRanges(this,t)},e.intersectRanges=function(t,n){var r=t.startLineNumber,o=t.startColumn,i=t.endLineNumber,s=t.endColumn,a=n.startLineNumber,u=n.startColumn,c=n.endLineNumber,l=n.endColumn;return r<a?(r=a,o=u):r===a&&(o=Math.max(o,u)),i>c?(i=c,s=l):i===c&&(s=Math.min(s,l)),r>i?null:r===i&&o>s?null:new e(r,o,i,s)},e.prototype.equalsRange=function(t){return e.equalsRange(this,t)},e.equalsRange=function(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn},e.prototype.getEndPosition=function(){return new r.Position(this.endLineNumber,this.endColumn)},e.prototype.getStartPosition=function(){return new r.Position(this.startLineNumber,this.startColumn)},e.prototype.toString=function(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"},e.prototype.setEndPosition=function(t,n){return new e(this.startLineNumber,this.startColumn,t,n)},e.prototype.setStartPosition=function(t,n){return new e(t,n,this.endLineNumber,this.endColumn)},e.prototype.collapseToStart=function(){return e.collapseToStart(this)},e.collapseToStart=function(t){return new e(t.startLineNumber,t.startColumn,t.startLineNumber,t.startColumn)},e.fromPositions=function(t,n){return void 0===n&&(n=t),new e(t.lineNumber,t.column,n.lineNumber,n.column)},e.lift=function(t){return t?new e(t.startLineNumber,t.startColumn,t.endLineNumber,t.endColumn):null},e.isIRange=function(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn},e.areIntersectingOrTouching=function(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)},e.compareRangesUsingStarts=function(e,t){var n=0|e.startLineNumber,r=0|t.startLineNumber;if(n===r){var o=0|e.startColumn,i=0|t.startColumn;if(o===i){var s=0|e.endLineNumber,a=0|t.endLineNumber;return s===a?(0|e.endColumn)-(0|t.endColumn):s-a}return o-i}return n-r},e.compareRangesUsingEnds=function(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber},e.spansMultipleLines=function(e){return e.endLineNumber>e.startLineNumber},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/*! exports provided: SelectionDirection, Selection */function(e,t,n){"use strict";n.r(t),n.d(t,"SelectionDirection",function(){return r}),n.d(t,"Selection",function(){return a});var r,o=n(/*! ./range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),i=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),s=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(r||(r={}));var a=function(e){function t(t,n,r,o){var i=e.call(this,t,n,r,o)||this;return i.selectionStartLineNumber=t,i.selectionStartColumn=n,i.positionLineNumber=r,i.positionColumn=o,i}return s(t,e),t.prototype.clone=function(){return new t(this.selectionStartLineNumber,this.selectionStartColumn,this.positionLineNumber,this.positionColumn)},t.prototype.toString=function(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"},t.prototype.equalsSelection=function(e){return t.selectionsEqual(this,e)},t.selectionsEqual=function(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn},t.prototype.getDirection=function(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?r.LTR:r.RTL},t.prototype.setEndPosition=function(e,n){return this.getDirection()===r.LTR?new t(this.startLineNumber,this.startColumn,e,n):new t(e,n,this.startLineNumber,this.startColumn)},t.prototype.getPosition=function(){return new i.Position(this.positionLineNumber,this.positionColumn)},t.prototype.setStartPosition=function(e,n){return this.getDirection()===r.LTR?new t(e,n,this.endLineNumber,this.endColumn):new t(this.endLineNumber,this.endColumn,e,n)},t.fromPositions=function(e,n){return void 0===n&&(n=e),new t(e.lineNumber,e.column,n.lineNumber,n.column)},t.liftSelection=function(e){return new t(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)},t.selectionsArrEqual=function(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0},t.isISelection=function(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn},t.createWithDirection=function(e,n,o,i,s){return s===r.LTR?new t(e,n,o,i):new t(o,i,e,n)},t}(o.Range)},"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/token.js ***!
  \***********************************************************************/
/*! exports provided: Token, TokenizationResult, TokenizationResult2 */function(e,t,n){"use strict";n.r(t),n.d(t,"Token",function(){return r}),n.d(t,"TokenizationResult",function(){return o}),n.d(t,"TokenizationResult2",function(){return i});var r=function(){function e(e,t,n){this.offset=0|e,this.type=t,this.language=n}return e.prototype.toString=function(){return"("+this.offset+", "+this.type+")"},e}(),o=function(){return function(e,t){this.tokens=e,this.endState=t}}(),i=function(){return function(e,t){this.tokens=e,this.endState=t}}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js ***!
  \**********************************************************************/
/*! exports provided: Uint8Matrix, toUint8, toUint32, toUint32Array */function(e,t,n){"use strict";n.r(t),n.d(t,"Uint8Matrix",function(){return r}),n.d(t,"toUint8",function(){return o}),n.d(t,"toUint32",function(){return i}),n.d(t,"toUint32Array",function(){return s});var r=function(){function e(e,t,n){for(var r=new Uint8Array(e*t),o=0,i=e*t;o<i;o++)r[o]=n;this._data=r,this.rows=e,this.cols=t}return e.prototype.get=function(e,t){return this._data[e*this.cols+t]},e.prototype.set=function(e,t,n){this._data[e*this.cols+t]=n},e}();function o(e){return e<0?0:e>255?255:0|e}function i(e){return e<0?0:e>4294967295?4294967295:0|e}function s(e){for(var t=e.length,n=new Uint32Array(t),r=0;r<t;r++)n[r]=i(e[r]);return n}},"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js ***!
  \******************************************************************************/
/*! exports provided: DiffComputer */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffComputer",function(){return h});var r=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),o=n(/*! ../../../base/common/strings.js */"./node_modules/monaco-editor/esm/vs/base/common/strings.js"),i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=5e3,a=3;function u(e,t,n,o){return new r.LcsDiff(e,t,n).ComputeDiff(o)}var c=function(){function e(e,t,n){this.buffer=e,this.startMarkers=t,this.endMarkers=n}return e.prototype.getLength=function(){return this.startMarkers.length},e.prototype.getElementHash=function(e){return this.buffer.substring(this.startMarkers[e].offset,this.endMarkers[e].offset)},e.prototype.getStartLineNumber=function(e){return e===this.startMarkers.length?this.startMarkers[e-1].lineNumber+1:this.startMarkers[e].lineNumber},e.prototype.getStartColumn=function(e){return this.startMarkers[e].column},e.prototype.getEndLineNumber=function(e){return this.endMarkers[e].lineNumber},e.prototype.getEndColumn=function(e){return this.endMarkers[e].column},e}(),l=function(e){function t(n){for(var r="",o=[],i=[],s=0,a=0,u=n.length;a<u;a++){r+=n[a];var c=t._getFirstNonBlankColumn(n[a],1),l=t._getLastNonBlankColumn(n[a],1);o.push({offset:s+c-1,lineNumber:a+1,column:c}),i.push({offset:s+l-1,lineNumber:a+1,column:l}),s+=n[a].length}return e.call(this,r,o,i)||this}return i(t,e),t._getFirstNonBlankColumn=function(e,t){var n=o.firstNonWhitespaceIndex(e);return-1===n?t:n+1},t._getLastNonBlankColumn=function(e,t){var n=o.lastNonWhitespaceIndex(e);return-1===n?t:n+2},t.prototype.getCharSequence=function(e,t){for(var n=[],r=[],o=e;o<=t;o++)for(var i=this.startMarkers[o],s=this.endMarkers[o],a=i.offset;a<s.offset;a++)n.push({offset:a,lineNumber:i.lineNumber,column:i.column+(a-i.offset)}),r.push({offset:a+1,lineNumber:i.lineNumber,column:i.column+(a-i.offset)+1});return new c(this.buffer,n,r)},t}(c),f=function(){function e(e,t,n,r,o,i,s,a){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=r,this.modifiedStartLineNumber=o,this.modifiedStartColumn=i,this.modifiedEndLineNumber=s,this.modifiedEndColumn=a}return e.createFromDiffChange=function(t,n,r){var o,i,s,a,u,c,l,f;return 0===t.originalLength?(o=0,i=0,s=0,a=0):(o=n.getStartLineNumber(t.originalStart),i=n.getStartColumn(t.originalStart),s=n.getEndLineNumber(t.originalStart+t.originalLength-1),a=n.getEndColumn(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(u=0,c=0,l=0,f=0):(u=r.getStartLineNumber(t.modifiedStart),c=r.getStartColumn(t.modifiedStart),l=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1),f=r.getEndColumn(t.modifiedStart+t.modifiedLength-1)),new e(o,i,s,a,u,c,l,f)},e}();var d=function(){function e(e,t,n,r,o){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=r,this.charChanges=o}return e.createFromDiffResult=function(t,n,r,o,i){var s,c,l,d,h;if(0===t.originalLength?(s=n.getStartLineNumber(t.originalStart)-1,c=0):(s=n.getStartLineNumber(t.originalStart),c=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(l=r.getStartLineNumber(t.modifiedStart)-1,d=0):(l=r.getStartLineNumber(t.modifiedStart),d=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),0!==t.originalLength&&0!==t.modifiedLength&&o()){var m=n.getCharSequence(t.originalStart,t.originalStart+t.originalLength-1),p=r.getCharSequence(t.modifiedStart,t.modifiedStart+t.modifiedLength-1),g=u(m,p,o,!0);i&&(g=function(e){if(e.length<=1)return e;for(var t=[e[0]],n=t[0],r=1,o=e.length;r<o;r++){var i=e[r],s=i.originalStart-(n.originalStart+n.originalLength),u=i.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(s,u)<a?(n.originalLength=i.originalStart+i.originalLength-n.originalStart,n.modifiedLength=i.modifiedStart+i.modifiedLength-n.modifiedStart):(t.push(i),n=i)}return t}(g)),h=[];for(var v=0,y=g.length;v<y;v++)h.push(f.createFromDiffChange(g[v],m,p))}return new e(s,c,l,d,h)},e}(),h=function(){function e(e,t,n){this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.maximumRunTimeMs=s,this.originalLines=e,this.modifiedLines=t,this.original=new l(e),this.modified=new l(t)}return e.prototype.computeDiff=function(){if(1===this.original.getLength()&&0===this.original.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.getLength(),charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];if(1===this.modified.getLength()&&0===this.modified.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:this.original.getLength(),modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];this.computationStartTime=(new Date).getTime();var e=u(this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldMakePrettyDiff);if(this.shouldIgnoreTrimWhitespace){for(var t=[],n=0,r=e.length;n<r;n++)t.push(d.createFromDiffResult(e[n],this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges));return t}for(var o=[],i=0,s=0,a=(n=-1,e.length);n<a;n++){for(var c=n+1<a?e[n+1]:null,f=c?c.originalStart:this.originalLines.length,h=c?c.modifiedStart:this.modifiedLines.length;i<f&&s<h;){var m=this.originalLines[i],p=this.modifiedLines[s];if(m!==p){for(var g=l._getFirstNonBlankColumn(m,1),v=l._getFirstNonBlankColumn(p,1);g>1&&v>1;){if(m.charCodeAt(g-2)!==p.charCodeAt(v-2))break;g--,v--}(g>1||v>1)&&this._pushTrimWhitespaceCharChange(o,i+1,1,g,s+1,1,v);for(var y=l._getLastNonBlankColumn(m,1),_=l._getLastNonBlankColumn(p,1),b=m.length+1,S=p.length+1;y<b&&_<S;){if(m.charCodeAt(y-1)!==m.charCodeAt(_-1))break;y++,_++}(y<b||_<S)&&this._pushTrimWhitespaceCharChange(o,i+1,y,b,s+1,_,S)}i++,s++}c&&(o.push(d.createFromDiffResult(c,this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges)),i+=c.originalLength,s+=c.modifiedLength)}return o},e.prototype._pushTrimWhitespaceCharChange=function(e,t,n,r,o,i,s){this._mergeTrimWhitespaceCharChange(e,t,n,r,o,i,s)||e.push(new d(t,t,o,o,[new f(t,n,t,r,o,i,o,s)]))},e.prototype._mergeTrimWhitespaceCharChange=function(e,t,n,r,o,i,s){var a=e.length;if(0===a)return!1;var u=e[a-1];return 0!==u.originalEndLineNumber&&0!==u.modifiedEndLineNumber&&(u.originalEndLineNumber+1===t&&u.modifiedEndLineNumber+1===o&&(u.originalEndLineNumber=t,u.modifiedEndLineNumber=o,u.charChanges.push(new f(t,n,t,r,o,i,o,s)),!0))},e.prototype._continueProcessingPredicate=function(){return 0===this.maximumRunTimeMs||(new Date).getTime()-this.computationStartTime<this.maximumRunTimeMs},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/*! exports provided: MirrorTextModel */function(e,t,n){"use strict";n.r(t),n.d(t,"MirrorTextModel",function(){return i});var r=n(/*! ../viewModel/prefixSumComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"),o=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),i=function(){function e(e,t,n,r){this._uri=e,this._lines=t,this._eol=n,this._versionId=r}return e.prototype.dispose=function(){this._lines.length=0},Object.defineProperty(e.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),e.prototype.getText=function(){return this._lines.join(this._eol)},e.prototype.onEvents=function(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);for(var t=e.changes,n=0,r=t.length;n<r;n++){var i=t[n];this._acceptDeleteRange(i.range),this._acceptInsertText(new o.Position(i.range.startLineNumber,i.range.startColumn),i.text)}this._versionId=e.versionId},e.prototype._ensureLineStarts=function(){if(!this._lineStarts){for(var e=this._eol.length,t=this._lines.length,n=new Uint32Array(t),o=0;o<t;o++)n[o]=this._lines[o].length+e;this._lineStarts=new r.PrefixSumComputer(n)}},e.prototype._setLineText=function(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)},e.prototype._acceptDeleteRange=function(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}},e.prototype._acceptInsertText=function(e,t){if(0!==t.length){var n=t.split(/\r\n|\r|\n/);if(1!==n.length){n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);for(var r=new Uint32Array(n.length-1),o=1;o<n.length;o++)this._lines.splice(e.lineNumber+o-1,0,n[o]),r[o-1]=n[o].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,r)}else this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1))}},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js ***!
  \*****************************************************************************/
/*! exports provided: USUAL_WORD_SEPARATORS, DEFAULT_WORD_REGEXP, ensureValidWordDefinition, getWordAtText */function(e,t,n){"use strict";n.r(t),n.d(t,"USUAL_WORD_SEPARATORS",function(){return r}),n.d(t,"DEFAULT_WORD_REGEXP",function(){return o}),n.d(t,"ensureValidWordDefinition",function(){return i}),n.d(t,"getWordAtText",function(){return s});var r="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";var o=function(e){void 0===e&&(e="");for(var t="(-?\\d*\\.\\d\\w*)|([^",n=0;n<r.length;n++)e.indexOf(r[n])>=0||(t+="\\"+r[n]);return t+="\\s]+)",new RegExp(t,"g")}();function i(e){var t=o;if(e&&e instanceof RegExp)if(e.global)t=e;else{var n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}function s(e,t,n,r){t.lastIndex=0;var o=t.exec(n);if(!o)return null;var i=o[0].indexOf(" ")>=0?function(e,t,n,r){var o,i=e-1-r;for(t.lastIndex=0;o=t.exec(n);){if(o.index>i)return null;if(t.lastIndex>=i)return{word:o[0],startColumn:r+1+o.index,endColumn:r+1+t.lastIndex}}return null}(e,t,n,r):function(e,t,n,r){var o,i=e-1-r,s=n.lastIndexOf(" ",i-1)+1,a=n.indexOf(" ",i);for(-1===a&&(a=n.length),t.lastIndex=s;o=t.exec(n);)if(o.index<=i&&t.lastIndex>=i)return{word:o[0],startColumn:r+1+o.index,endColumn:r+1+t.lastIndex};return null}(e,t,n,r);return t.lastIndex=0,i}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js ***!
  \*******************************************************************************/
/*! exports provided: computeLinks */function(e,t,n){"use strict";n.r(t),n.d(t,"computeLinks",function(){return c});var r=n(/*! ../core/characterClassifier.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"),o=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),i=function(){function e(e){for(var t=0,n=0,r=0,i=e.length;r<i;r++){var s=e[r],a=s[0],u=s[1],c=s[2];u>t&&(t=u),a>n&&(n=a),c>n&&(n=c)}t++,n++;var l=new o.Uint8Matrix(n,t,0);for(r=0,i=e.length;r<i;r++){var f=e[r];a=f[0],u=f[1],c=f[2];l.set(a,u,c)}this._states=l,this._maxCharCode=t}return e.prototype.nextState=function(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)},e}(),s=null;var a=null;var u=function(){function e(){}return e._createLink=function(e,t,n,r,o){var i=o-1;do{var s=t.charCodeAt(i);if(2!==e.get(s))break;i--}while(i>r);if(r>0){var a=t.charCodeAt(r-1),u=t.charCodeAt(i);(40===a&&41===u||91===a&&93===u||123===a&&125===u)&&i--}return{range:{startLineNumber:n,startColumn:r+1,endLineNumber:n,endColumn:i+2},url:t.substring(r,i+1)}},e.computeLinks=function(t){for(var n=(null===s&&(s=new i([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),s),o=function(){if(null===a){a=new r.CharacterClassifier(0);for(var e=0;e<" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".length;e++)a.set(" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".charCodeAt(e),1);for(e=0;e<".,;".length;e++)a.set(".,;".charCodeAt(e),2)}return a}(),u=[],c=1,l=t.getLineCount();c<=l;c++){for(var f=t.getLineContent(c),d=f.length,h=0,m=0,p=0,g=1,v=!1,y=!1,_=!1;h<d;){var b=!1,S=f.charCodeAt(h);if(13===g){var C=void 0;switch(S){case 40:v=!0,C=0;break;case 41:C=v?0:1;break;case 91:y=!0,C=0;break;case 93:C=y?0:1;break;case 123:_=!0,C=0;break;case 125:C=_?0:1;break;case 39:C=34===p||96===p?0:1;break;case 34:C=39===p||96===p?0:1;break;case 96:C=39===p||34===p?0:1;break;default:C=o.get(S)}1===C&&(u.push(e._createLink(o,f,c,m,h)),b=!0)}else if(12===g){1===(C=o.get(S))?b=!0:g=13}else 0===(g=n.nextState(g,S))&&(b=!0);b&&(g=1,v=!1,y=!1,_=!1,m=h+1,p=S),h++}13===g&&u.push(e._createLink(o,f,c,m,d))}return u},e}();function c(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?u.computeLinks(e):[]}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js ***!
  \*************************************************************************************************/
/*! exports provided: BasicInplaceReplace */function(e,t,n){"use strict";n.r(t),n.d(t,"BasicInplaceReplace",function(){return r});var r=function(){function e(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}return e.prototype.navigateValueSet=function(e,t,n,r,o){var i;if(e&&t&&(i=this.doNavigateValueSet(t,o)))return{range:e,value:i};if(n&&r&&(i=this.doNavigateValueSet(r,o)))return{range:n,value:i};return null},e.prototype.doNavigateValueSet=function(e,t){var n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)},e.prototype.numberReplace=function(e,t){var n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),r=Number(e),o=parseFloat(e);return isNaN(r)||isNaN(o)||r!==o?null:0!==r||t?(r=Math.floor(r*n),r+=t?n:-n,String(r/n)):null},e.prototype.textReplace=function(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)},e.prototype.valueSetsReplace=function(e,t,n){for(var r=null,o=0,i=e.length;null===r&&o<i;o++)r=this.valueSetReplace(e[o],t,n);return r},e.prototype.valueSetReplace=function(e,t,n){var r=e.indexOf(t);return r>=0?((r+=n?1:-1)<0?r=e.length-1:r%=e.length,e[r]):null},e.INSTANCE=new e,e}()},"./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services sync ***!
  \***********************************************************************/
/*! no static exports found */function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive"},"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/*! exports provided: BaseEditorSimpleWorker, EditorSimpleWorkerImpl, create */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseEditorSimpleWorker",function(){return v}),n.d(t,"EditorSimpleWorkerImpl",function(){return y}),n.d(t,"create",function(){return _});var r=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),o=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),i=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),s=n(/*! ../diff/diffComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"),a=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),u=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),c=n(/*! ../model/mirrorTextModel.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js"),l=n(/*! ../modes/linkComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"),f=n(/*! ../modes/supports/inplaceReplaceSupport.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js"),d=n(/*! ../model/wordHelper.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js"),h=n(/*! ../standalone/standaloneBase.js */"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js"),m=n(/*! ../../../base/common/platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),p=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return p(t,e),Object.defineProperty(t.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"eol",{get:function(){return this._eol},enumerable:!0,configurable:!0}),t.prototype.getValue=function(){return this.getText()},t.prototype.getLinesContent=function(){return this._lines.slice(0)},t.prototype.getLineCount=function(){return this._lines.length},t.prototype.getLineContent=function(e){return this._lines[e-1]},t.prototype.getWordAtPosition=function(e,t){var n=Object(d.getWordAtText)(e.column,Object(d.ensureValidWordDefinition)(t),this._lines[e.lineNumber-1],0);return n?new i.Range(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null},t.prototype.getWordUntilPosition=function(e,t){var n=this.getWordAtPosition(e,t);return n?{word:this._lines[e.lineNumber-1].substring(n.startColumn-1,e.column-1),startColumn:n.startColumn,endColumn:e.column}:{word:"",startColumn:e.column,endColumn:e.column}},t.prototype.createWordIterator=function(e){var t,n=this,r={done:!1,value:""},o=0,i=0,s=[],a=function(){if(i<s.length)r.done=!1,r.value=t.substring(s[i].start,s[i].end),i+=1;else{if(!(o>=n._lines.length))return t=n._lines[o],s=n._wordenize(t,e),i=0,o+=1,a();r.done=!0,r.value=void 0}return r};return{next:a}},t.prototype._wordenize=function(e,t){var n,r=[];for(t.lastIndex=0;(n=t.exec(e))&&0!==n[0].length;)r.push({start:n.index,end:n.index+n[0].length});return r},t.prototype.getValueInRange=function(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);var t=this._eol,n=e.startLineNumber-1,r=e.endLineNumber-1,o=[];o.push(this._lines[n].substring(e.startColumn-1));for(var i=n+1;i<r;i++)o.push(this._lines[i]);return o.push(this._lines[r].substring(0,e.endColumn-1)),o.join(t)},t.prototype.offsetAt=function(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)},t.prototype.positionAt=function(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();var t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}},t.prototype._validateRange=function(e){var t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e},t.prototype._validatePosition=function(e){if(!u.Position.isIPosition(e))throw new Error("bad position");var t=e.lineNumber,n=e.column,r=!1;if(t<1)t=1,n=1,r=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,r=!0;else{var o=this._lines[t-1].length+1;n<1?(n=1,r=!0):n>o&&(n=o,r=!0)}return r?{lineNumber:t,column:n}:e},t}(c.MirrorTextModel),v=function(){function e(e){this._foreignModuleFactory=e,this._foreignModule=null}return e.prototype.computeDiff=function(e,t,n){var r=this._getModel(e),i=this._getModel(t);if(!r||!i)return null;var a=r.getLinesContent(),u=i.getLinesContent(),c=new s.DiffComputer(a,u,{shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return o.TPromise.as(c.computeDiff())},e.prototype.computeDirtyDiff=function(e,t,n){var r=this._getModel(e),i=this._getModel(t);if(!r||!i)return null;var a=r.getLinesContent(),u=i.getLinesContent(),c=new s.DiffComputer(a,u,{shouldPostProcessCharChanges:!1,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return o.TPromise.as(c.computeDiff())},e.prototype.computeMoreMinimalEdits=function(t,n){var r=this._getModel(t);if(!r)return o.TPromise.as(n);for(var s,u=[],c=0,l=n;c<l.length;c++){var f=l[c],d=f.range,h=f.text,m=f.eol;if("number"==typeof m&&(s=m),d){var p=r.getValueInRange(d);if(p!==(h=h.replace(/\r\n|\n|\r/g,r.eol)))if(Math.max(h.length,p.length)>e._diffLimit)u.push({range:d,text:h});else for(var g=Object(a.stringDiff)(p,h,!1),v=r.offsetAt(i.Range.lift(d).getStartPosition()),y=0,_=g;y<_.length;y++){var b=_[y],S=r.positionAt(v+b.originalStart),C=r.positionAt(v+b.originalStart+b.originalLength),E={text:h.substr(b.modifiedStart,b.modifiedLength),range:{startLineNumber:S.lineNumber,startColumn:S.column,endLineNumber:C.lineNumber,endColumn:C.column}};r.getValueInRange(E.range)!==E.text&&u.push(E)}}}return"number"==typeof s&&u.push({eol:s,text:void 0,range:void 0}),o.TPromise.as(u)},e.prototype.computeLinks=function(e){var t=this._getModel(e);return t?o.TPromise.as(Object(l.computeLinks)(t)):null},e.prototype.textualSuggest=function(t,n,r,i){var s=this._getModel(t);if(s){var a=[],u=new RegExp(r,i),c=s.getWordUntilPosition(n,u).word,l=Object.create(null);l[c]=!0;for(var f=s.createWordIterator(u),d=f.next();!d.done&&a.length<=e._suggestionsLimit;d=f.next()){var h=d.value;l[h]||(l[h]=!0,isNaN(Number(h))&&a.push({type:"text",label:h,insertText:h,noAutoAccept:!0,overwriteBefore:c.length}))}return o.TPromise.as({suggestions:a})}},e.prototype.navigateValueSet=function(e,t,n,r,i){var s=this._getModel(e);if(!s)return null;var a=new RegExp(r,i);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});var u=s.getValueInRange(t),c=s.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},a),l=null;null!==c&&(l=s.getValueInRange(c));var d=f.BasicInplaceReplace.INSTANCE.navigateValueSet(t,u,c,l,n);return o.TPromise.as(d)},e.prototype.loadForeignModule=function(e,t){var r=this,i={getMirrorModels:function(){return r._getModels()}};if(this._foreignModuleFactory){this._foreignModule=this._foreignModuleFactory(i,t);var s=[];for(var a in this._foreignModule)"function"==typeof this._foreignModule[a]&&s.push(a);return o.TPromise.as(s)}return new o.TPromise(function(o,s){Promise.resolve().then(function(){var s=[n("./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive")(e)];(function(e){r._foreignModule=e.create(i,t);var n=[];for(var s in r._foreignModule)"function"==typeof r._foreignModule[s]&&n.push(s);o(n)}).apply(null,s)}).catch(s.bind(this))})},e.prototype.fmr=function(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return o.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return o.TPromise.as(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return o.TPromise.wrapError(e)}},e._diffLimit=1e4,e._suggestionsLimit=1e4,e}(),y=function(e){function t(t){var n=e.call(this,t)||this;return n._models=Object.create(null),n}return p(t,e),t.prototype.dispose=function(){this._models=Object.create(null)},t.prototype._getModel=function(e){return this._models[e]},t.prototype._getModels=function(){var e=this,t=[];return Object.keys(this._models).forEach(function(n){return t.push(e._models[n])}),t},t.prototype.acceptNewModel=function(e){this._models[e.url]=new g(r.default.parse(e.url),e.lines,e.EOL,e.versionId)},t.prototype.acceptModelChanged=function(e,t){this._models[e]&&this._models[e].onEvents(t)},t.prototype.acceptRemovedModel=function(e){this._models[e]&&delete this._models[e]},t}(v);function _(){return new y(null)}"function"==typeof importScripts&&(m.globals.monaco=Object(h.createMonacoBaseAPI)())},"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js ***!
  \**************************************************************************************/
/*! exports provided: Severity, MarkerSeverity, KeyMod, KeyCode, createMonacoBaseAPI */function(e,t,n){"use strict";n.r(t),n.d(t,"Severity",function(){return r}),n.d(t,"MarkerSeverity",function(){return o}),n.d(t,"KeyMod",function(){return p}),n.d(t,"KeyCode",function(){return m}),n.d(t,"createMonacoBaseAPI",function(){return g});var r,o,i=n(/*! ../../../base/common/event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),s=n(/*! ../../../base/common/keyCodes.js */"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js"),a=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),u=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),c=n(/*! ../core/selection.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"),l=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),f=n(/*! ../../../base/common/cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),d=n(/*! ../core/token.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js"),h=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js");!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(r||(r={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(o||(o={}));var m,p=function(){function e(){}return e.chord=function(e,t){return Object(s.KeyChord)(e,t)},e.CtrlCmd=2048,e.Shift=1024,e.Alt=512,e.WinCtrl=256,e}();function g(){return{editor:void 0,languages:void 0,CancellationTokenSource:f.CancellationTokenSource,Emitter:i.Emitter,KeyCode:m,KeyMod:p,Position:a.Position,Range:u.Range,Selection:c.Selection,SelectionDirection:c.SelectionDirection,Severity:r,MarkerSeverity:o,Promise:l.TPromise,Uri:h.default,Token:d.Token}}!function(e){e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(m||(m={}))},"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js ***!
  \****************************************************************************************/
/*! exports provided: PrefixSumIndexOfResult, PrefixSumComputer, PrefixSumComputerWithCache */function(e,t,n){"use strict";n.r(t),n.d(t,"PrefixSumIndexOfResult",function(){return o}),n.d(t,"PrefixSumComputer",function(){return i}),n.d(t,"PrefixSumComputerWithCache",function(){return s});var r=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),o=function(){return function(e,t){this.index=e,this.remainder=t}}(),i=function(){function e(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}return e.prototype.getCount=function(){return this.values.length},e.prototype.insertValues=function(e,t){e=Object(r.toUint32)(e);var n=this.values,o=this.prefixSum,i=t.length;return 0!==i&&(this.values=new Uint32Array(n.length+i),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+i),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(o.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.changeValue=function(e,t){return e=Object(r.toUint32)(e),t=Object(r.toUint32)(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)},e.prototype.removeValues=function(e,t){e=Object(r.toUint32)(e),t=Object(r.toUint32)(t);var n=this.values,o=this.prefixSum;if(e>=n.length)return!1;var i=n.length-e;return t>=i&&(t=i),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(o.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.getTotalValue=function(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)},e.prototype.getAccumulatedValue=function(e){return e<0?0:(e=Object(r.toUint32)(e),this._getAccumulatedValue(e))},e.prototype._getAccumulatedValue=function(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];var t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(var n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]},e.prototype.getIndexOf=function(e){e=Math.floor(e),this.getTotalValue();for(var t,n,r,i=0,s=this.values.length-1;i<=s;)if(t=i+(s-i)/2|0,e<(r=(n=this.prefixSum[t])-this.values[t]))s=t-1;else{if(!(e>=n))break;i=t+1}return new o(t,e-r)},e}(),s=function(){function e(e){this._cacheAccumulatedValueStart=0,this._cache=null,this._actual=new i(e),this._bustCache()}return e.prototype._bustCache=function(){this._cacheAccumulatedValueStart=0,this._cache=null},e.prototype.insertValues=function(e,t){this._actual.insertValues(e,t)&&this._bustCache()},e.prototype.changeValue=function(e,t){this._actual.changeValue(e,t)&&this._bustCache()},e.prototype.removeValues=function(e,t){this._actual.removeValues(e,t)&&this._bustCache()},e.prototype.getTotalValue=function(){return this._actual.getTotalValue()},e.prototype.getAccumulatedValue=function(e){return this._actual.getAccumulatedValue(e)},e.prototype.getIndexOf=function(e){if(e=Math.floor(e),null!==this._cache){var t=e-this._cacheAccumulatedValueStart;if(t>=0&&t<this._cache.length)return this._cache[t]}return this._actual.getIndexOf(e)},e.prototype.warmUpCache=function(e,t){for(var n=[],r=e;r<=t;r++)n[r-e]=this.getIndexOf(r);this._cache=n,this._cacheAccumulatedValueStart=e},e}()},"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/*! exports provided: initialize */function(e,t,n){"use strict";n.r(t),n.d(t,"initialize",function(){return s});var r=n(/*! ./common/services/editorSimpleWorker.js */"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"),o=n(/*! ../base/common/worker/simpleWorker.js */"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"),i=!1;function s(e){if(!i){i=!0;var t=new r.EditorSimpleWorkerImpl(e),n=new o.SimpleWorkerServer(function(e){self.postMessage(e)},t);self.onmessage=function(e){n.onmessage(e.data)}}}self.onmessage=function(e){i||s(null)}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js ***!
  \*****************************************************************************************/
/*! exports provided: removeProperty, setProperty, applyEdit, isWS */function(e,t,n){"use strict";n.r(t),n.d(t,"removeProperty",function(){return i}),n.d(t,"setProperty",function(){return s}),n.d(t,"applyEdit",function(){return u}),n.d(t,"isWS",function(){return c});var r=n(/*! ./format.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js"),o=n(/*! ./parser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js");function i(e,t,n){return s(e,t,void 0,n)}function s(e,t,n,r,i){for(var s,u=Object(o.parseTree)(e,[]),c=void 0,l=void 0;t.length>0&&(l=t.pop(),void 0===(c=Object(o.findNodeAtLocation)(u,t))&&void 0!==n);)"string"==typeof l?((s={})[l]=n,n=s):n=[n];if(c){if("object"===c.type&&"string"==typeof l&&Array.isArray(c.children)){var f=Object(o.findNodeAtLocation)(c,[l]);if(void 0!==f){if(void 0===n){if(!f.parent)throw new Error("Malformed AST");var d=c.children.indexOf(f.parent),h=void 0,m=f.parent.offset+f.parent.length;if(d>0)h=(b=c.children[d-1]).offset+b.length;else if(h=c.offset+1,c.children.length>1)m=c.children[1].offset;return a(e,{offset:h,length:m-h,content:""},r)}return a(e,{offset:f.offset,length:f.length,content:JSON.stringify(n)},r)}if(void 0===n)return[];var p=JSON.stringify(l)+": "+JSON.stringify(n),g=i?i(c.children.map(function(e){return e.children[0].value})):c.children.length,v=void 0;return a(e,v=g>0?{offset:(b=c.children[g-1]).offset+b.length,length:0,content:","+p}:0===c.children.length?{offset:c.offset+1,length:0,content:p}:{offset:c.offset+1,length:0,content:p+","},r)}if("array"===c.type&&"number"==typeof l&&Array.isArray(c.children)){if(-1===l){p=""+JSON.stringify(n),v=void 0;if(0===c.children.length)v={offset:c.offset+1,length:0,content:p};else v={offset:(b=c.children[c.children.length-1]).offset+b.length,length:0,content:","+p};return a(e,v,r)}if(void 0===n&&c.children.length>=0){var y=l,_=c.children[y];v=void 0;if(1===c.children.length)v={offset:c.offset+1,length:c.length-2,content:""};else if(c.children.length-1===y){var b,S=(b=c.children[y-1]).offset+b.length;v={offset:S,length:c.offset+c.length-2-S,content:""}}else v={offset:_.offset,length:c.children[y+1].offset-_.offset,content:""};return a(e,v,r)}throw new Error("Array modification not supported yet")}throw new Error("Can not add "+("number"!=typeof l?"index":"property")+" to parent of type "+c.type)}if(void 0===n)throw new Error("Can not delete in empty document");return a(e,{offset:u?u.offset:0,length:u?u.length:0,content:JSON.stringify(n)},r)}function a(e,t,n){var o=u(e,t),i=t.offset,s=t.offset+t.content.length;if(0===t.length||0===t.content.length){for(;i>0&&!Object(r.isEOL)(o,i-1);)i--;for(;s<o.length&&!Object(r.isEOL)(o,s);)s++}for(var a=Object(r.format)(o,{offset:i,length:s-i},n),c=a.length-1;c>=0;c--){var l=a[c];o=u(o,l),i=Math.min(i,l.offset),s=Math.max(s,l.offset+l.length),s+=l.content.length-l.length}return[{offset:i,length:e.length-(o.length-s)-i,content:o.substring(i,s)}]}function u(e,t){return e.substring(0,t.offset)+t.content+e.substring(t.offset+t.length)}function c(e,t){return-1!=="\r\n \t".indexOf(e.charAt(t))}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js ***!
  \*******************************************************************************************/
/*! exports provided: format, isEOL */function(e,t,n){"use strict";n.r(t),n.d(t,"format",function(){return o}),n.d(t,"isEOL",function(){return s});var r=n(/*! ./scanner.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js");function o(e,t,n){var o,a,u,c,l;if(t){for(c=t.offset,l=c+t.length,u=c;u>0&&!s(e,u-1);)u--;for(var f=l;f<e.length&&!s(e,f);)f++;a=e.substring(u,f),o=function(e,t,n){var r=0,o=0,i=n.tabSize||4;for(;r<e.length;){var s=e.charAt(r);if(" "===s)o++;else{if("\t"!==s)break;o+=i}r++}return Math.floor(o/i)}(a,0,n)}else a=e,o=0,u=0,c=0,l=e.length;var d,h=function(e,t){for(var n=0;n<t.length;n++){var r=t.charAt(n);if("\r"===r)return n+1<t.length&&"\n"===t.charAt(n+1)?"\r\n":"\r";if("\n"===r)return"\n"}return e&&e.eol||"\n"}(n,e),m=!1,p=0;d=n.insertSpaces?i(" ",n.tabSize||4):"\t";var g=Object(r.createScanner)(a,!1),v=!1;function y(){return h+i(d,o+p)}function _(){var e=g.scan();for(m=!1;15===e||14===e;)m=m||14===e,e=g.scan();return v=16===e||0!==g.getTokenError(),e}var b=[];function S(t,n,r){!v&&n<l&&r>c&&e.substring(n,r)!==t&&b.push({offset:n,length:r-n,content:t})}var C=_();if(17!==C){var E=g.getTokenOffset()+u;S(i(d,o),u,E)}for(;17!==C;){for(var x=g.getTokenOffset()+g.getTokenLength()+u,j=_(),w="";!m&&(12===j||13===j);){S(" ",x,g.getTokenOffset()+u),x=g.getTokenOffset()+g.getTokenLength()+u,w=12===j?y():"",j=_()}if(2===j)1!==C&&(p--,w=y());else if(4===j)3!==C&&(p--,w=y());else{switch(C){case 3:case 1:p++,w=y();break;case 5:case 12:w=y();break;case 13:w=m?y():" ";break;case 6:w=" ";break;case 10:if(6===j){w="";break}case 7:case 8:case 9:case 11:case 2:case 4:12===j||13===j?w=" ":5!==j&&17!==j&&(v=!0);break;case 16:v=!0}!m||12!==j&&13!==j||(w=y())}S(w,x,g.getTokenOffset()+u),C=j}return b}function i(e,t){for(var n="",r=0;r<t;r++)n+=e;return n}function s(e,t){return-1!=="\r\n".indexOf(e.charAt(t))}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js ***!
  \*******************************************************************************************/
/*! exports provided: getLocation, parse, parseTree, findNodeAtLocation, getNodeValue, visit, stripComments */function(e,t,n){"use strict";n.r(t),n.d(t,"getLocation",function(){return o}),n.d(t,"parse",function(){return i}),n.d(t,"parseTree",function(){return s}),n.d(t,"findNodeAtLocation",function(){return a}),n.d(t,"getNodeValue",function(){return u}),n.d(t,"visit",function(){return c}),n.d(t,"stripComments",function(){return l});var r=n(/*! ./scanner.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js");function o(e,t){var n=[],r=new Object,o=void 0,i={value:{},offset:0,length:0,type:"object"},s=!1;function a(e,t,n,r){i.value=e,i.offset=t,i.length=n,i.type=r,i.columnOffset=void 0,o=i}try{c(e,{onObjectBegin:function(e,i){if(t<=e)throw r;o=void 0,s=t>e,n.push("")},onObjectProperty:function(e,o,i){if(t<o)throw r;if(a(e,o,i,"property"),n[n.length-1]=e,t<=o+i)throw r},onObjectEnd:function(e,i){if(t<=e)throw r;o=void 0,n.pop()},onArrayBegin:function(e,i){if(t<=e)throw r;o=void 0,n.push(0)},onArrayEnd:function(e,i){if(t<=e)throw r;o=void 0,n.pop()},onLiteralValue:function(e,n,o){if(t<n)throw r;if(a(e,n,o,f(e)),t<=n+o)throw r},onSeparator:function(e,i,a){if(t<=i)throw r;if(":"===e&&o&&"property"===o.type)o.columnOffset=i,s=!1,o=void 0;else if(","===e){var u=n[n.length-1];"number"==typeof u?n[n.length-1]=u+1:(s=!0,n[n.length-1]=""),o=void 0}}})}catch(e){if(e!==r)throw e}return{path:n,previousNode:o,isAtPropertyKey:s,matches:function(e){for(var t=0,r=0;t<e.length&&r<n.length;r++)if(e[t]===n[r]||"*"===e[t])t++;else if("**"!==e[t])return!1;return t===e.length}}}function i(e,t,n){void 0===t&&(t=[]);var r=null,o=[],i=[];function s(e){Array.isArray(o)?o.push(e):r&&(o[r]=e)}return c(e,{onObjectBegin:function(){var e={};s(e),i.push(o),o=e,r=null},onObjectProperty:function(e){r=e},onObjectEnd:function(){o=i.pop()},onArrayBegin:function(){var e=[];s(e),i.push(o),o=e,r=null},onArrayEnd:function(){o=i.pop()},onLiteralValue:s,onError:function(e,n,r){t.push({error:e,offset:n,length:r})}},n),o[0]}function s(e,t,n){void 0===t&&(t=[]);var r={type:"array",offset:-1,length:-1,children:[]};function o(e){"property"===r.type&&(r.length=e-r.offset,r=r.parent)}function i(e){return r.children.push(e),e}c(e,{onObjectBegin:function(e){r=i({type:"object",offset:e,length:-1,parent:r,children:[]})},onObjectProperty:function(e,t,n){(r=i({type:"property",offset:t,length:-1,parent:r,children:[]})).children.push({type:"string",value:e,offset:t,length:n,parent:r})},onObjectEnd:function(e,t){r.length=e+t-r.offset,r=r.parent,o(e+t)},onArrayBegin:function(e,t){r=i({type:"array",offset:e,length:-1,parent:r,children:[]})},onArrayEnd:function(e,t){r.length=e+t-r.offset,r=r.parent,o(e+t)},onLiteralValue:function(e,t,n){i({type:f(e),offset:t,length:n,parent:r,value:e}),o(t+n)},onSeparator:function(e,t,n){"property"===r.type&&(":"===e?r.columnOffset=t:","===e&&o(t))},onError:function(e,n,r){t.push({error:e,offset:n,length:r})}},n);var s=r.children[0];return s&&delete s.parent,s}function a(e,t){if(e){for(var n=e,r=0,o=t;r<o.length;r++){var i=o[r];if("string"==typeof i){if("object"!==n.type||!Array.isArray(n.children))return;for(var s=!1,a=0,u=n.children;a<u.length;a++){var c=u[a];if(Array.isArray(c.children)&&c.children[0].value===i){n=c.children[1],s=!0;break}}if(!s)return}else{var l=i;if("array"!==n.type||l<0||!Array.isArray(n.children)||l>=n.children.length)return;n=n.children[l]}}return n}}function u(e){if("array"===e.type)return e.children.map(u);if("object"===e.type){for(var t=Object.create(null),n=0,r=e.children;n<r.length;n++){var o=r[n];t[o.children[0].value]=u(o.children[1])}return t}return e.value}function c(e,t,n){var o=Object(r.createScanner)(e,!1);function i(e){return e?function(){return e(o.getTokenOffset(),o.getTokenLength())}:function(){return!0}}function s(e){return e?function(t){return e(t,o.getTokenOffset(),o.getTokenLength())}:function(){return!0}}var a=i(t.onObjectBegin),u=s(t.onObjectProperty),c=i(t.onObjectEnd),l=i(t.onArrayBegin),f=i(t.onArrayEnd),d=s(t.onLiteralValue),h=s(t.onSeparator),m=i(t.onComment),p=s(t.onError),g=n&&n.disallowComments,v=n&&n.allowTrailingComma;function y(){for(;;){var e=o.scan();switch(o.getTokenError()){case 4:_(14);break;case 5:_(15);break;case 3:_(13);break;case 1:g||_(11);break;case 2:_(12);break;case 6:_(16)}switch(e){case 12:case 13:g?_(10):m();break;case 16:_(1);break;case 15:case 14:break;default:return e}}}function _(e,t,n){if(void 0===t&&(t=[]),void 0===n&&(n=[]),p(e),t.length+n.length>0)for(var r=o.getToken();17!==r;){if(-1!==t.indexOf(r)){y();break}if(-1!==n.indexOf(r))break;r=y()}}function b(e){var t=o.getTokenValue();return e?d(t):u(t),y(),!0}function S(){switch(o.getToken()){case 3:return function(){l(),y();for(var e=!1;4!==o.getToken()&&17!==o.getToken();){if(5===o.getToken()){if(e||_(4,[],[]),h(","),y(),4===o.getToken()&&v)break}else e&&_(6,[],[]);S()||_(4,[],[4,5]),e=!0}return f(),4!==o.getToken()?_(8,[4],[]):y(),!0}();case 1:return function(){a(),y();for(var e=!1;2!==o.getToken()&&17!==o.getToken();){if(5===o.getToken()){if(e||_(4,[],[]),h(","),y(),2===o.getToken()&&v)break}else e&&_(6,[],[]);(10!==o.getToken()?(_(3,[],[2,5]),0):(b(!1),6===o.getToken()?(h(":"),y(),S()||_(4,[],[2,5])):_(5,[],[2,5]),1))||_(4,[],[2,5]),e=!0}return c(),2!==o.getToken()?_(7,[2],[]):y(),!0}();case 10:return b(!0);default:return function(){switch(o.getToken()){case 11:var e=0;try{"number"!=typeof(e=JSON.parse(o.getTokenValue()))&&(_(2),e=0)}catch(e){_(2)}d(e);break;case 7:d(null);break;case 8:d(!0);break;case 9:d(!1);break;default:return!1}return y(),!0}()}}return y(),17===o.getToken()||(S()?(17!==o.getToken()&&_(9,[],[]),!0):(_(4,[],[]),!1))}function l(e,t){var n,o,i=Object(r.createScanner)(e),s=[],a=0;do{switch(o=i.getPosition(),n=i.scan()){case 12:case 13:case 17:a!==o&&s.push(e.substring(a,o)),void 0!==t&&s.push(i.getTokenValue().replace(/[^\r\n]/g,t)),a=i.getPosition()}}while(17!==n);return s.join("")}function f(e){switch(typeof e){case"boolean":return"boolean";case"number":return"number";case"string":return"string";default:return"null"}}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js ***!
  \********************************************************************************************/
/*! exports provided: createScanner */function(e,t,n){"use strict";function r(e,t){void 0===t&&(t=!1);var n=0,r=e.length,a="",u=0,c=16,l=0;function f(t,r){for(var o=0,i=0;o<t||!r;){var s=e.charCodeAt(n);if(s>=48&&s<=57)i=16*i+s-48;else if(s>=65&&s<=70)i=16*i+s-65+10;else{if(!(s>=97&&s<=102))break;i=16*i+s-97+10}n++,o++}return o<t&&(i=-1),i}function d(){if(a="",l=0,u=n,n>=r)return u=r,c=17;var t=e.charCodeAt(n);if(o(t)){do{n++,a+=String.fromCharCode(t),t=e.charCodeAt(n)}while(o(t));return c=15}if(i(t))return n++,a+=String.fromCharCode(t),13===t&&10===e.charCodeAt(n)&&(n++,a+="\n"),c=14;switch(t){case 123:return n++,c=1;case 125:return n++,c=2;case 91:return n++,c=3;case 93:return n++,c=4;case 58:return n++,c=6;case 44:return n++,c=5;case 34:return n++,a=function(){for(var t="",o=n;;){if(n>=r){t+=e.substring(o,n),l=2;break}var s=e.charCodeAt(n);if(34===s){t+=e.substring(o,n),n++;break}if(92!==s){if(s>=0&&s<=31){if(i(s)){t+=e.substring(o,n),l=2;break}l=6}n++}else{if(t+=e.substring(o,n),++n>=r){l=2;break}switch(s=e.charCodeAt(n++)){case 34:t+='"';break;case 92:t+="\\";break;case 47:t+="/";break;case 98:t+="\b";break;case 102:t+="\f";break;case 110:t+="\n";break;case 114:t+="\r";break;case 116:t+="\t";break;case 117:var a=f(4,!0);a>=0?t+=String.fromCharCode(a):l=4;break;default:l=5}o=n}}return t}(),c=10;case 47:var d=n-1;if(47===e.charCodeAt(n+1)){for(n+=2;n<r&&!i(e.charCodeAt(n));)n++;return a=e.substring(d,n),c=12}if(42===e.charCodeAt(n+1)){n+=2;for(var m=!1;n<r;){if(42===e.charCodeAt(n)&&n+1<r&&47===e.charCodeAt(n+1)){n+=2,m=!0;break}n++}return m||(n++,l=1),a=e.substring(d,n),c=13}return a+=String.fromCharCode(t),n++,c=16;case 45:if(a+=String.fromCharCode(t),++n===r||!s(e.charCodeAt(n)))return c=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return a+=function(){var t=n;if(48===e.charCodeAt(n))n++;else for(n++;n<e.length&&s(e.charCodeAt(n));)n++;if(n<e.length&&46===e.charCodeAt(n)){if(!(++n<e.length&&s(e.charCodeAt(n))))return l=3,e.substring(t,n);for(n++;n<e.length&&s(e.charCodeAt(n));)n++}var r=n;if(n<e.length&&(69===e.charCodeAt(n)||101===e.charCodeAt(n)))if((++n<e.length&&43===e.charCodeAt(n)||45===e.charCodeAt(n))&&n++,n<e.length&&s(e.charCodeAt(n))){for(n++;n<e.length&&s(e.charCodeAt(n));)n++;r=n}else l=3;return e.substring(t,r)}(),c=11;default:for(;n<r&&h(t);)n++,t=e.charCodeAt(n);if(u!==n){switch(a=e.substring(u,n)){case"true":return c=8;case"false":return c=9;case"null":return c=7}return c=16}return a+=String.fromCharCode(t),n++,c=16}}function h(e){if(o(e)||i(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:return!1}return!0}return{setPosition:function(e){n=e,a="",u=0,c=16,l=0},getPosition:function(){return n},scan:t?function(){var e;do{e=d()}while(e>=12&&e<=15);return e}:d,getToken:function(){return c},getTokenValue:function(){return a},getTokenOffset:function(){return u},getTokenLength:function(){return n-u},getTokenError:function(){return l}}}function o(e){return 32===e||9===e||11===e||12===e||160===e||5760===e||e>=8192&&e<=8203||8239===e||8287===e||12288===e||65279===e}function i(e){return 10===e||13===e||8232===e||8233===e}function s(e){return e>=48&&e<=57}n.r(t),n.d(t,"createScanner",function(){return r})},"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js ***!
  \************************************************************************************/
/*! exports provided: createScanner, getLocation, parse, parseTree, findNodeAtLocation, getNodeValue, visit, stripComments, format, modify, applyEdits */function(e,t,n){"use strict";n.r(t),n.d(t,"createScanner",function(){return a}),n.d(t,"getLocation",function(){return u}),n.d(t,"parse",function(){return c}),n.d(t,"parseTree",function(){return l}),n.d(t,"findNodeAtLocation",function(){return f}),n.d(t,"getNodeValue",function(){return d}),n.d(t,"visit",function(){return h}),n.d(t,"stripComments",function(){return m}),n.d(t,"format",function(){return p}),n.d(t,"modify",function(){return g}),n.d(t,"applyEdits",function(){return v});var r=n(/*! ./impl/format.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js"),o=n(/*! ./impl/edit.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js"),i=n(/*! ./impl/scanner.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js"),s=n(/*! ./impl/parser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js"),a=i.createScanner,u=s.getLocation,c=s.parse,l=s.parseTree,f=s.findNodeAtLocation,d=s.getNodeValue,h=s.visit,m=s.stripComments;function p(e,t,n){return r.format(e,t,n)}function g(e,t,n,r){return o.setProperty(e,t,n,r.formattingOptions,r.getInsertionIndex)}function v(e,t){for(var n=t.length-1;n>=0;n--)e=o.applyEdit(e,t[n]);return e}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/jsonLanguageService.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/jsonLanguageService.js ***!
  \******************************************************************************************************************/
/*! exports provided: TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, FormattingOptions, MarkedString, getLanguageService */function(e,t,n){"use strict";n.r(t),n.d(t,"getLanguageService",function(){return d});var r=n(/*! ../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js");n.d(t,"TextDocument",function(){return r.TextDocument}),n.d(t,"Position",function(){return r.Position}),n.d(t,"CompletionItem",function(){return r.CompletionItem}),n.d(t,"CompletionList",function(){return r.CompletionList}),n.d(t,"Range",function(){return r.Range}),n.d(t,"SymbolInformation",function(){return r.SymbolInformation}),n.d(t,"Diagnostic",function(){return r.Diagnostic}),n.d(t,"TextEdit",function(){return r.TextEdit}),n.d(t,"FormattingOptions",function(){return r.FormattingOptions}),n.d(t,"MarkedString",function(){return r.MarkedString});var o=n(/*! ./services/jsonCompletion.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js"),i=n(/*! ./services/jsonHover.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonHover.js"),s=n(/*! ./services/jsonValidation.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonValidation.js"),a=n(/*! ./services/jsonDocumentSymbols.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonDocumentSymbols.js"),u=n(/*! ./parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),c=n(/*! ./services/configuration.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/configuration.js"),l=n(/*! ./services/jsonSchemaService.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSchemaService.js"),f=n(/*! ../jsonc-parser/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js");function d(e){var t=e.promiseConstructor||Promise,n=new l.JSONSchemaService(e.schemaRequestService,e.workspaceContext,t);n.setSchemaContributions(c.schemaContributions);var d=new o.JSONCompletion(n,e.contributions,t),h=new i.JSONHover(n,e.contributions,t),m=new a.JSONDocumentSymbols(n),p=new s.JSONValidation(n,t);return{configure:function(e){n.clearExternalSchemas(),e.schemas&&e.schemas.forEach(function(e){n.registerExternalSchema(e.uri,e.fileMatch,e.schema)}),p.configure(e)},resetSchema:function(e){return n.onResourceChange(e)},doValidation:p.doValidation.bind(p),parseJSONDocument:function(e){return Object(u.parse)(e,{collectComments:!0})},newJSONDocument:function(e,t){return Object(u.newJSONDocument)(e,t)},doResolve:d.doResolve.bind(d),doComplete:d.doComplete.bind(d),findDocumentSymbols:m.findDocumentSymbols.bind(m),findColorSymbols:function(e,t){return m.findDocumentColors(e,t).then(function(e){return e.map(function(e){return e.range})})},findDocumentColors:m.findDocumentColors.bind(m),getColorPresentations:m.getColorPresentations.bind(m),doHover:h.doHover.bind(h),format:function(e,t,n){var o=void 0;if(t){var i=e.offsetAt(t.start);o={offset:i,length:e.offsetAt(t.end)-i}}var s={tabSize:n?n.tabSize:4,insertSpaces:!n||n.insertSpaces,eol:"\n"};return Object(f.format)(e.getText(),o,s).map(function(t){return r.TextEdit.replace(r.Range.create(e.positionAt(t.offset),e.positionAt(t.offset+t.length)),t.content)})}}}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js ***!
  \****************************************************************************************************************/
/*! exports provided: ErrorCode, ProblemSeverity, ASTNodeImpl, NullASTNodeImpl, BooleanASTNodeImpl, ArrayASTNodeImpl, NumberASTNodeImpl, StringASTNodeImpl, PropertyASTNodeImpl, ObjectASTNodeImpl, asSchema, EnumMatch, ValidationResult, newJSONDocument, getNodeValue, getNodePath, contains, JSONDocument, parse */function(e,t,n){"use strict";n.r(t),n.d(t,"ErrorCode",function(){return r}),n.d(t,"ProblemSeverity",function(){return l}),n.d(t,"ASTNodeImpl",function(){return m}),n.d(t,"NullASTNodeImpl",function(){return p}),n.d(t,"BooleanASTNodeImpl",function(){return g}),n.d(t,"ArrayASTNodeImpl",function(){return v}),n.d(t,"NumberASTNodeImpl",function(){return y}),n.d(t,"StringASTNodeImpl",function(){return _}),n.d(t,"PropertyASTNodeImpl",function(){return b}),n.d(t,"ObjectASTNodeImpl",function(){return S}),n.d(t,"asSchema",function(){return C}),n.d(t,"EnumMatch",function(){return h}),n.d(t,"ValidationResult",function(){return j}),n.d(t,"newJSONDocument",function(){return w}),n.d(t,"getNodeValue",function(){return A}),n.d(t,"getNodePath",function(){return N}),n.d(t,"contains",function(){return P}),n.d(t,"JSONDocument",function(){return O}),n.d(t,"parse",function(){return T});var r,o=n(/*! ../../jsonc-parser/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"),i=n(/*! ../utils/objects.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/objects.js"),s=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js"),a=n(/*! ../../vscode-uri/index.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js"),u=(n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),c=s.loadMessageBundle();!function(e){e[e.Undefined=0]="Undefined",e[e.EnumValueMismatch=1]="EnumValueMismatch",e[e.UnexpectedEndOfComment=257]="UnexpectedEndOfComment",e[e.UnexpectedEndOfString=258]="UnexpectedEndOfString",e[e.UnexpectedEndOfNumber=259]="UnexpectedEndOfNumber",e[e.InvalidUnicode=260]="InvalidUnicode",e[e.InvalidEscapeCharacter=261]="InvalidEscapeCharacter",e[e.InvalidCharacter=262]="InvalidCharacter",e[e.PropertyExpected=513]="PropertyExpected",e[e.CommaExpected=514]="CommaExpected",e[e.ColonExpected=515]="ColonExpected",e[e.ValueExpected=516]="ValueExpected",e[e.CommaOrCloseBacketExpected=517]="CommaOrCloseBacketExpected",e[e.CommaOrCloseBraceExpected=518]="CommaOrCloseBraceExpected",e[e.TrailingComma=519]="TrailingComma"}(r||(r={}));var l,f=/^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/,d=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;!function(e){e.Ignore="ignore",e.Error="error",e.Warning="warning"}(l||(l={}));var h,m=function(){function e(e,t,n){this.offset=t,this.length=n,this.parent=e}return Object.defineProperty(e.prototype,"children",{get:function(){return[]},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return"type: "+this.type+" ("+this.offset+"/"+this.length+")"+(this.parent?" parent: {"+this.parent.toString()+"}":"")},e}(),p=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.type="null",r}return u(t,e),t}(m),g=function(e){function t(t,n,r){var o=e.call(this,t,r)||this;return o.type="boolean",o.value=n,o}return u(t,e),t}(m),v=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.type="array",r.items=[],r}return u(t,e),Object.defineProperty(t.prototype,"children",{get:function(){return this.items},enumerable:!0,configurable:!0}),t}(m),y=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.type="number",r.isInteger=!0,r.value=Number.NaN,r}return u(t,e),t}(m),_=function(e){function t(t,n,r){var o=e.call(this,t,n,r)||this;return o.type="string",o.value="",o}return u(t,e),t}(m),b=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.type="property",r.colonOffset=-1,r}return u(t,e),Object.defineProperty(t.prototype,"children",{get:function(){return this.valueNode?[this.keyNode,this.valueNode]:[this.keyNode]},enumerable:!0,configurable:!0}),t}(m),S=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.type="object",r.properties=[],r}return u(t,e),Object.defineProperty(t.prototype,"children",{get:function(){return this.properties},enumerable:!0,configurable:!0}),t}(m);function C(e){return"boolean"==typeof e?e?{}:{not:{}}:e}!function(e){e[e.Key=0]="Key",e[e.Enum=1]="Enum"}(h||(h={}));var E=function(){function e(e,t){void 0===e&&(e=-1),void 0===t&&(t=null),this.focusOffset=e,this.exclude=t,this.schemas=[]}return e.prototype.add=function(e){this.schemas.push(e)},e.prototype.merge=function(e){var t;(t=this.schemas).push.apply(t,e.schemas)},e.prototype.include=function(e){return(-1===this.focusOffset||P(e,this.focusOffset))&&e!==this.exclude},e.prototype.newSub=function(){return new e(-1,this.exclude)},e}(),x=function(){function e(){}return Object.defineProperty(e.prototype,"schemas",{get:function(){return[]},enumerable:!0,configurable:!0}),e.prototype.add=function(e){},e.prototype.merge=function(e){},e.prototype.include=function(e){return!0},e.prototype.newSub=function(){return this},e.instance=new e,e}(),j=function(){function e(){this.problems=[],this.propertiesMatches=0,this.propertiesValueMatches=0,this.primaryValueMatches=0,this.enumValueMatch=!1,this.enumValues=null}return e.prototype.hasProblems=function(){return!!this.problems.length},e.prototype.mergeAll=function(e){var t=this;e.forEach(function(e){t.merge(e)})},e.prototype.merge=function(e){this.problems=this.problems.concat(e.problems)},e.prototype.mergeEnumValues=function(e){if(!this.enumValueMatch&&!e.enumValueMatch&&this.enumValues&&e.enumValues){this.enumValues=this.enumValues.concat(e.enumValues);for(var t=0,n=this.problems;t<n.length;t++){var o=n[t];o.code===r.EnumValueMismatch&&(o.message=c("enumWarning","Value is not accepted. Valid values: {0}.",this.enumValues.map(function(e){return JSON.stringify(e)}).join(", ")))}}},e.prototype.mergePropertyMatch=function(e){this.merge(e),this.propertiesMatches++,(e.enumValueMatch||!e.hasProblems()&&e.propertiesMatches)&&this.propertiesValueMatches++,e.enumValueMatch&&e.enumValues&&1===e.enumValues.length&&this.primaryValueMatches++},e.prototype.compare=function(e){var t=this.hasProblems();return t!==e.hasProblems()?t?-1:1:this.enumValueMatch!==e.enumValueMatch?e.enumValueMatch?-1:1:this.primaryValueMatches!==e.primaryValueMatches?this.primaryValueMatches-e.primaryValueMatches:this.propertiesValueMatches!==e.propertiesValueMatches?this.propertiesValueMatches-e.propertiesValueMatches:this.propertiesMatches-e.propertiesMatches},e}();function w(e,t){return void 0===t&&(t=[]),new O(e,[],[],t)}function A(e){switch(e.type){case"array":return e.items.map(A);case"object":for(var t=Object.create(null),n=0,r=e.properties;n<r.length;n++){var o=r[n];t[o.keyNode.value]=A(o.valueNode)}return t;case"string":case"number":case"boolean":return e.value}return null}function N(e){if(!e.parent)return[];var t=N(e.parent);if("property"===e.parent.type){var n=e.parent.keyNode.value;t.push(n)}else if("array"===e.parent.type){var r=e.parent.items.indexOf(e);-1!==r&&t.push(r)}return t}function P(e,t,n){return void 0===n&&(n=!1),t>=e.offset&&t<e.offset+e.length||n&&t===e.offset+e.length}var O=function(){function e(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=[]),this.root=e,this.syntaxErrors=t,this.comments=n,this.externalDiagnostic=r}return e.prototype.getNodeFromOffset=function(e){var t=function(n){if(e>=n.offset&&e<n.offset+n.length){for(var r=n.children,o=0;o<r.length&&r[o].offset<=e;o++){var i=t(r[o]);if(i)return i}return n}return null};return this.root&&t(this.root)},e.prototype.getNodeFromOffsetEndInclusive=function(e){var t=function(n){if(e>=n.offset&&e<=n.offset+n.length){for(var r=n.children,o=0;o<r.length&&r[o].offset<=e;o++){var i=t(r[o]);if(i)return i}return n}return null};return this.root&&t(this.root)},e.prototype.visit=function(e){if(this.root){var t=function(n){for(var r=e(n),o=n.children,i=0;i<o.length&&r;i++)r=t(o[i]);return r};t(this.root)}},e.prototype.validate=function(e){if(this.root&&e){var t=new j;return k(this.root,e,t,x.instance),t.problems}return null},e.prototype.getMatchingSchemas=function(e,t,n){void 0===t&&(t=-1),void 0===n&&(n=null);var r=new E(t,n);return this.root&&e&&k(this.root,e,new j,r),r.schemas},e}();function k(e,t,n,o){if(e&&o.include(e)){switch(e.type){case"object":!function(e,t,n,r){var o=Object.create(null),i=[];e.properties.forEach(function(e){var t=e.keyNode.value;o[t]=e.valueNode,i.push(t)}),Array.isArray(t.required)&&t.required.forEach(function(t){if(!o[t]){var r=e.parent&&"property"===e.parent.type&&e.parent.keyNode,i=r?{offset:r.offset,length:r.length}:{offset:e.offset,length:1};n.problems.push({location:i,severity:l.Warning,message:c("MissingRequiredPropWarning",'Missing property "{0}".',t)})}});var s=function(e){for(var t=i.indexOf(e);t>=0;)i.splice(t,1),t=i.indexOf(e)};t.properties&&Object.keys(t.properties).forEach(function(e){s(e);var i=t.properties[e],a=o[e];if(a)if("boolean"==typeof i)if(i)n.propertiesMatches++,n.propertiesValueMatches++;else{var u=a.parent;n.problems.push({location:{offset:u.keyNode.offset,length:u.keyNode.length},severity:l.Warning,message:t.errorMessage||c("DisallowedExtraPropWarning","Property {0} is not allowed.",e)})}else{var f=new j;k(a,i,f,r),n.mergePropertyMatch(f)}});t.patternProperties&&Object.keys(t.patternProperties).forEach(function(e){var a=new RegExp(e);i.slice(0).forEach(function(i){if(a.test(i)){s(i);var u=o[i];if(u){var f=t.patternProperties[e];if("boolean"==typeof f)if(f)n.propertiesMatches++,n.propertiesValueMatches++;else{var d=u.parent;n.problems.push({location:{offset:d.keyNode.offset,length:d.keyNode.length},severity:l.Warning,message:t.errorMessage||c("DisallowedExtraPropWarning","Property {0} is not allowed.",i)})}else{var h=new j;k(u,f,h,r),n.mergePropertyMatch(h)}}}})});"object"==typeof t.additionalProperties?i.forEach(function(e){var i=o[e];if(i){var s=new j;k(i,t.additionalProperties,s,r),n.mergePropertyMatch(s)}}):!1===t.additionalProperties&&i.length>0&&i.forEach(function(e){var r=o[e];if(r){var i=r.parent;n.problems.push({location:{offset:i.keyNode.offset,length:i.keyNode.length},severity:l.Warning,message:t.errorMessage||c("DisallowedExtraPropWarning","Property {0} is not allowed.",e)})}});t.maxProperties&&e.properties.length>t.maxProperties&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("MaxPropWarning","Object has more properties than limit of {0}.",t.maxProperties)});t.minProperties&&e.properties.length<t.minProperties&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("MinPropWarning","Object has fewer properties than the required number of {0}",t.minProperties)});t.dependencies&&Object.keys(t.dependencies).forEach(function(i){var s=o[i];if(s){var a=t.dependencies[i];if(Array.isArray(a))a.forEach(function(t){o[t]?n.propertiesValueMatches++:n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("RequiredDependentPropWarning","Object is missing property {0} required by property {1}.",t,i)})});else{var u=C(a);if(u){var f=new j;k(e,u,f,r),n.mergePropertyMatch(f)}}}});var a=C(t.propertyNames);a&&e.properties.forEach(function(e){var t=e.keyNode;t&&k(t,a,n,x.instance)})}(e,t,n,o);break;case"array":!function(e,t,n,r){if(Array.isArray(t.items)){var o=t.items;if(o.forEach(function(t,i){var s=C(t),a=new j,u=e.items[i];u?(k(u,s,a,r),n.mergePropertyMatch(a)):e.items.length>=o.length&&n.propertiesValueMatches++}),e.items.length>o.length)if("object"==typeof t.additionalItems)for(var i=o.length;i<e.items.length;i++){var s=new j;k(e.items[i],t.additionalItems,s,r),n.mergePropertyMatch(s)}else!1===t.additionalItems&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("additionalItemsWarning","Array has too many items according to schema. Expected {0} or fewer.",o.length)})}else{var a=C(t.items);a&&e.items.forEach(function(e){var t=new j;k(e,a,t,r),n.mergePropertyMatch(t)})}var u=C(t.contains);if(u){var f=e.items.some(function(e){var t=new j;return k(e,u,t,x.instance),!t.hasProblems()});f||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.errorMessage||c("requiredItemMissingWarning","Array does not contain required item.",t.minItems)})}t.minItems&&e.items.length<t.minItems&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("minItemsWarning","Array has too few items. Expected {0} or more.",t.minItems)});t.maxItems&&e.items.length>t.maxItems&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("maxItemsWarning","Array has too many items. Expected {0} or fewer.",t.minItems)});if(!0===t.uniqueItems){var d=A(e),h=d.some(function(e,t){return t!==d.lastIndexOf(e)});h&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("uniqueItemsWarning","Array has duplicate items.")})}}(e,t,n,o);break;case"string":!function(e,t,n,r){t.minLength&&e.value.length<t.minLength&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("minLengthWarning","String is shorter than the minimum length of {0}.",t.minLength)});t.maxLength&&e.value.length>t.maxLength&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("maxLengthWarning","String is longer than the maximum length of {0}.",t.maxLength)});if(t.pattern){var o=new RegExp(t.pattern);o.test(e.value)||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.patternErrorMessage||t.errorMessage||c("patternWarning",'String does not match the pattern of "{0}".',t.pattern)})}if(t.format)switch(t.format){case"uri":case"uri-reference":var i=void 0;if(e.value)try{var s=a.default.parse(e.value);s.scheme||"uri"!==t.format||(i=c("uriSchemeMissing","URI with a scheme is expected."))}catch(e){i=e.message}else i=c("uriEmpty","URI expected.");i&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.patternErrorMessage||t.errorMessage||c("uriFormatWarning","String is not a URI: {0}",i)});break;case"email":e.value.match(d)||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.patternErrorMessage||t.errorMessage||c("emailFormatWarning","String is not an e-mail address.")});break;case"color-hex":e.value.match(f)||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.patternErrorMessage||t.errorMessage||c("colorHexFormatWarning","Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.")})}}(e,t,n);break;case"number":!function(e,t,n,r){var o=e.value;"number"==typeof t.multipleOf&&o%t.multipleOf!=0&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("multipleOfWarning","Value is not divisible by {0}.",t.multipleOf)});function i(e,t){return"number"==typeof t?t:"boolean"==typeof t&&t?e:void 0}function s(e,t){if("boolean"!=typeof t||!t)return e}var a=i(t.minimum,t.exclusiveMinimum);"number"==typeof a&&o<=a&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("exclusiveMinimumWarning","Value is below the exclusive minimum of {0}.",a)});var u=i(t.maximum,t.exclusiveMaximum);"number"==typeof u&&o>=u&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("exclusiveMaximumWarning","Value is above the exclusive maximum of {0}.",u)});var f=s(t.minimum,t.exclusiveMinimum);"number"==typeof f&&o<f&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("minimumWarning","Value is below the minimum of {0}.",f)});var d=s(t.maximum,t.exclusiveMaximum);"number"==typeof d&&o>d&&n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("maximumWarning","Value is above the maximum of {0}.",d)})}(e,t,n);break;case"property":return k(e.valueNode,t,n,o)}!function(){function s(t){return e.type===t||"integer"===t&&"number"===e.type&&e.isInteger}Array.isArray(t.type)?t.type.some(s)||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.errorMessage||c("typeArrayMismatchWarning","Incorrect type. Expected one of {0}.",t.type.join(", "))}):t.type&&(s(t.type)||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:t.errorMessage||c("typeMismatchWarning",'Incorrect type. Expected "{0}".',t.type)}));Array.isArray(t.allOf)&&t.allOf.forEach(function(t){k(e,C(t),n,o)});var a=C(t.not);if(a){var u=new j,f=o.newSub();k(e,a,u,f),u.hasProblems()||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,message:c("notSchemaWarning","Matches a schema that is not allowed.")}),f.schemas.forEach(function(e){e.inverted=!e.inverted,o.add(e)})}var d=function(t,r){var i=[],s=null;return t.forEach(function(t){var n=C(t),a=new j,u=o.newSub();if(k(e,n,a,u),a.hasProblems()||i.push(n),s)if(r||a.hasProblems()||s.validationResult.hasProblems()){var c=a.compare(s.validationResult);c>0?s={schema:n,validationResult:a,matchingSchemas:u}:0===c&&(s.matchingSchemas.merge(u),s.validationResult.mergeEnumValues(a))}else s.matchingSchemas.merge(u),s.validationResult.propertiesMatches+=a.propertiesMatches,s.validationResult.propertiesValueMatches+=a.propertiesValueMatches;else s={schema:n,validationResult:a,matchingSchemas:u}}),i.length>1&&r&&n.problems.push({location:{offset:e.offset,length:1},severity:l.Warning,message:c("oneOfWarning","Matches multiple schemas when only one must validate.")}),null!==s&&(n.merge(s.validationResult),n.propertiesMatches+=s.validationResult.propertiesMatches,n.propertiesValueMatches+=s.validationResult.propertiesValueMatches,o.merge(s.matchingSchemas)),i.length};Array.isArray(t.anyOf)&&d(t.anyOf,!1);Array.isArray(t.oneOf)&&d(t.oneOf,!0);if(Array.isArray(t.enum)){for(var h=A(e),m=!1,p=0,g=t.enum;p<g.length;p++){var v=g[p];if(i.equals(h,v)){m=!0;break}}n.enumValues=t.enum,n.enumValueMatch=m,m||n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,code:r.EnumValueMismatch,message:t.errorMessage||c("enumWarning","Value is not accepted. Valid values: {0}.",t.enum.map(function(e){return JSON.stringify(e)}).join(", "))})}if(t.const){var h=A(e);i.equals(h,t.const)?n.enumValueMatch=!0:(n.problems.push({location:{offset:e.offset,length:e.length},severity:l.Warning,code:r.EnumValueMismatch,message:t.errorMessage||c("constWarning","Value must be {0}.",JSON.stringify(t.const))}),n.enumValueMatch=!1),n.enumValues=[t.const]}t.deprecationMessage&&e.parent&&n.problems.push({location:{offset:e.parent.offset,length:e.parent.length},severity:l.Warning,message:t.deprecationMessage})}(),o.add({node:e,schema:t})}}function T(e,t){var n=[],i=e.getText(),s=o.createScanner(i,!1),a=t&&t.collectComments?[]:void 0;function u(){for(;;){var e=s.scan();switch(h(),e){case 12:case 13:Array.isArray(a)&&a.push({offset:s.getTokenOffset(),length:s.getTokenLength()});break;case 15:case 14:break;default:return e}}}function f(e,t,r){0!==n.length&&n[n.length-1].location.offset===r.offset||n.push({message:e,location:r,code:t,severity:l.Error})}function d(e,t,n,r,o){void 0===n&&(n=null),void 0===r&&(r=[]),void 0===o&&(o=[]);var a=s.getTokenOffset(),c=s.getTokenOffset()+s.getTokenLength();if(a===c&&a>0){for(a--;a>0&&/\s/.test(i.charAt(a));)a--;c=a+1}if(f(e,t,{offset:a,length:c-a}),n&&m(n,!1),r.length+o.length>0)for(var l=s.getToken();17!==l;){if(-1!==r.indexOf(l)){u();break}if(-1!==o.indexOf(l))break;l=u()}return n}function h(){switch(s.getTokenError()){case 4:return d(c("InvalidUnicode","Invalid unicode sequence in string."),r.InvalidUnicode),!0;case 5:return d(c("InvalidEscapeCharacter","Invalid escape character in string."),r.InvalidEscapeCharacter),!0;case 3:return d(c("UnexpectedEndOfNumber","Unexpected end of number."),r.UnexpectedEndOfNumber),!0;case 1:return d(c("UnexpectedEndOfComment","Unexpected end of comment."),r.UnexpectedEndOfComment),!0;case 2:return d(c("UnexpectedEndOfString","Unexpected end of string."),r.UnexpectedEndOfString),!0;case 6:return d(c("InvalidCharacter","Invalid characters in string. Control characters must be escaped."),r.InvalidCharacter),!0}return!1}function m(e,t){return e.length=s.getTokenOffset()+s.getTokenLength()-e.offset,t&&u(),e}function C(t,o){var i=new b(t,s.getTokenOffset()),a=E(i);if(!a){if(16!==s.getToken())return null;d(c("DoubleQuotesExpected","Property keys must be doublequoted"),r.Undefined);var f=new _(i,s.getTokenOffset(),s.getTokenLength());f.value=s.getTokenValue(),a=f,u()}i.keyNode=a;var h=o[a.value];if(h?(n.push({location:{offset:i.keyNode.offset,length:i.keyNode.length},message:c("DuplicateKeyWarning","Duplicate object key"),code:r.Undefined,severity:l.Warning}),"object"==typeof h&&n.push({location:{offset:h.keyNode.offset,length:h.keyNode.length},message:c("DuplicateKeyWarning","Duplicate object key"),code:r.Undefined,severity:l.Warning}),o[a.value]=!0):o[a.value]=i,6===s.getToken())i.colonOffset=s.getTokenOffset(),u();else if(d(c("ColonExpected","Colon expected"),r.ColonExpected),10===s.getToken()&&e.positionAt(a.offset+a.length).line<e.positionAt(s.getTokenOffset()).line)return i.length=a.length,i;var m=x(i,a.value);return m?(i.valueNode=m,i.length=m.offset+m.length-i.offset,i):d(c("ValueExpected","Value expected"),r.ValueExpected,i,[],[2,5])}function E(e){if(10!==s.getToken())return null;var t=new _(e,s.getTokenOffset());return t.value=s.getTokenValue(),m(t,!0)}function x(e,t){return function(e){if(3!==s.getToken())return null;var t=new v(e,s.getTokenOffset());u();for(var n=0,o=!1;4!==s.getToken()&&17!==s.getToken();){if(5===s.getToken()){o||d(c("ValueExpected","Value expected"),r.ValueExpected);var i=s.getTokenOffset();if(u(),4===s.getToken()){o&&f(c("TrailingComma","Trailing comma"),r.TrailingComma,{offset:i,length:1});continue}}else o&&d(c("ExpectedComma","Expected comma"),r.CommaExpected);var a=x(t,n++);a?t.items.push(a):d(c("PropertyExpected","Value expected"),r.ValueExpected,null,[],[4,5]),o=!0}return 4!==s.getToken()?d(c("ExpectedCloseBracket","Expected comma or closing bracket"),r.CommaOrCloseBacketExpected,t):m(t,!0)}(e)||function(e){if(1!==s.getToken())return null;var t=new S(e,s.getTokenOffset()),n=Object.create(null);u();for(var o=!1;2!==s.getToken()&&17!==s.getToken();){if(5===s.getToken()){o||d(c("PropertyExpected","Property expected"),r.PropertyExpected);var i=s.getTokenOffset();if(u(),2===s.getToken()){o&&f(c("TrailingComma","Trailing comma"),r.TrailingComma,{offset:i,length:1});continue}}else o&&d(c("ExpectedComma","Expected comma"),r.CommaExpected);var a=C(t,n);a?t.properties.push(a):d(c("PropertyExpected","Property expected"),r.PropertyExpected,null,[],[2,5]),o=!0}return 2!==s.getToken()?d(c("ExpectedCloseBrace","Expected comma or closing brace"),r.CommaOrCloseBraceExpected,t):m(t,!0)}(e)||E(e)||function(e){if(11!==s.getToken())return null;var t=new y(e,s.getTokenOffset());if(0===s.getTokenError()){var n=s.getTokenValue();try{var o=JSON.parse(n);if("number"!=typeof o)return d(c("InvalidNumberFormat","Invalid number format."),r.Undefined,t);t.value=o}catch(e){return d(c("InvalidNumberFormat","Invalid number format."),r.Undefined,t)}t.isInteger=-1===n.indexOf(".")}return m(t,!0)}(e)||function(e){switch(s.getToken()){case 7:return m(new p(e,s.getTokenOffset()),!0);case 8:return m(new g(e,!0,s.getTokenOffset()),!0);case 9:return m(new g(e,!1,s.getTokenOffset()),!0);default:return null}}(e)}var j=null;return 17!==u()&&((j=x(null))?17!==s.getToken()&&d(c("End of file expected","End of file expected."),r.Undefined):d(c("Invalid symbol","Expected a JSON object, array or literal."),r.Undefined)),new O(j,n,a)}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/configuration.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/configuration.js ***!
  \*********************************************************************************************************************/
/*! exports provided: schemaContributions */function(e,t,n){"use strict";n.r(t),n.d(t,"schemaContributions",function(){return o});var r=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js").loadMessageBundle(),o={schemaAssociations:{},schemas:{"http://json-schema.org/draft-04/schema#":{title:r("schema.json","Describes a JSON file using a schema. See json-schema.org for more info."),$schema:"http://json-schema.org/draft-04/schema#",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},positiveInteger:{type:"integer",minimum:0},positiveIntegerDefault0:{allOf:[{$ref:"#/definitions/positiveInteger"},{default:0}]},simpleTypes:{type:"string",enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},minItems:1,uniqueItems:!0}},type:"object",properties:{id:{type:"string",format:"uri",description:r("schema.json.id","A unique identifier for the schema.")},$schema:{type:"string",format:"uri",description:r("schema.json.$schema","The schema to verify this document against ")},title:{type:"string",description:r("schema.json.title","A descriptive title of the element")},description:{type:"string",description:r("schema.json.description","A long description of the element. Used in hover menus and suggestions.")},default:{description:r("schema.json.default","A default value. Used by suggestions.")},multipleOf:{type:"number",minimum:0,exclusiveMinimum:!0,description:r("schema.json.multipleOf","A number that should cleanly divide the current value (i.e. have no remainder)")},maximum:{type:"number",description:r("schema.json.maximum","The maximum numerical value, inclusive by default.")},exclusiveMaximum:{type:"boolean",default:!1,description:r("schema.json.exclusiveMaximum","Makes the maximum property exclusive.")},minimum:{type:"number",description:r("schema.json.minimum","The minimum numerical value, inclusive by default.")},exclusiveMinimum:{type:"boolean",default:!1,description:r("schema.json.exclusiveMininum","Makes the minimum property exclusive.")},maxLength:{allOf:[{$ref:"#/definitions/positiveInteger"}],description:r("schema.json.maxLength","The maximum length of a string.")},minLength:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}],description:r("schema.json.minLength","The minimum length of a string.")},pattern:{type:"string",format:"regex",description:r("schema.json.pattern","A regular expression to match the string against. It is not implicitly anchored.")},additionalItems:{anyOf:[{type:"boolean"},{$ref:"#"}],default:{},description:r("schema.json.additionalItems","For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail.")},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:{},description:r("schema.json.items","For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on.")},maxItems:{allOf:[{$ref:"#/definitions/positiveInteger"}],description:r("schema.json.maxItems","The maximum number of items that can be inside an array. Inclusive.")},minItems:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}],description:r("schema.json.minItems","The minimum number of items that can be inside an array. Inclusive.")},uniqueItems:{type:"boolean",default:!1,description:r("schema.json.uniqueItems","If all of the items in the array must be unique. Defaults to false.")},maxProperties:{allOf:[{$ref:"#/definitions/positiveInteger"}],description:r("schema.json.maxProperties","The maximum number of properties an object can have. Inclusive.")},minProperties:{allOf:[{$ref:"#/definitions/positiveIntegerDefault0"}],description:r("schema.json.minProperties","The minimum number of properties an object can have. Inclusive.")},required:{allOf:[{$ref:"#/definitions/stringArray"}],description:r("schema.json.required","An array of strings that lists the names of all properties required on this object.")},additionalProperties:{anyOf:[{type:"boolean"},{$ref:"#"}],default:{},description:r("schema.json.additionalProperties","Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail.")},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{},description:r("schema.json.definitions","Not used for validation. Place subschemas here that you wish to reference inline with $ref")},properties:{type:"object",additionalProperties:{$ref:"#"},default:{},description:r("schema.json.properties","A map of property names to schemas for each property.")},patternProperties:{type:"object",additionalProperties:{$ref:"#"},default:{},description:r("schema.json.patternProperties","A map of regular expressions on property names to schemas for matching properties.")},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]},description:r("schema.json.dependencies","A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object.")},enum:{type:"array",minItems:1,uniqueItems:!0,description:r("schema.json.enum","The set of literal values that are valid")},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}],description:r("schema.json.type","Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types.")},format:{anyOf:[{type:"string",description:r("schema.json.format","Describes the format expected for the value."),enum:["date-time","uri","email","hostname","ipv4","ipv6","regex"]},{type:"string"}]},allOf:{allOf:[{$ref:"#/definitions/schemaArray"}],description:r("schema.json.allOf","An array of schemas, all of which must match.")},anyOf:{allOf:[{$ref:"#/definitions/schemaArray"}],description:r("schema.json.anyOf","An array of schemas, where at least one must match.")},oneOf:{allOf:[{$ref:"#/definitions/schemaArray"}],description:r("schema.json.oneOf","An array of schemas, exactly one of which must match.")},not:{allOf:[{$ref:"#"}],description:r("schema.json.not","A schema which must not match.")}},dependencies:{exclusiveMaximum:["maximum"],exclusiveMinimum:["minimum"]},default:{}}}}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js ***!
  \**********************************************************************************************************************/
/*! exports provided: JSONCompletion */function(e,t,n){"use strict";n.r(t),n.d(t,"JSONCompletion",function(){return c});var r=n(/*! ../parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),o=n(/*! ../../jsonc-parser/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"),i=n(/*! ../utils/json.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/json.js"),s=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js"),a=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),u=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js").loadMessageBundle(),c=function(){function e(e,t,n){void 0===t&&(t=[]),this.templateVarIdCounter=0,this.schemaService=e,this.contributions=t,this.promise=n||Promise}return e.prototype.doResolve=function(e){for(var t=this.contributions.length-1;t>=0;t--)if(this.contributions[t].resolveCompletion){var n=this.contributions[t].resolveCompletion(e);if(n)return n}return this.promise.resolve(e)},e.prototype.doComplete=function(e,t,n){var o=this,i={items:[],isIncomplete:!1},s=e.offsetAt(t),u=n.getNodeFromOffsetEndInclusive(s);if(this.isInComment(e,u?u.offset:0,s))return Promise.resolve(i);var c=this.getCurrentWord(e,s),l=null;if(!u||"string"!==u.type&&"number"!==u.type&&"boolean"!==u.type&&"null"!==u.type){var f=s-c.length;f>0&&'"'===e.getText()[f-1]&&f--,l=a.Range.create(e.positionAt(f),t)}else l=a.Range.create(e.positionAt(u.offset),e.positionAt(u.offset+u.length));var d={},h={add:function(e){var t=d[e.label];t?t.documentation||(t.documentation=e.documentation):(d[e.label]=e,l&&(e.textEdit=a.TextEdit.replace(l,e.insertText)),i.items.push(e))},setAsIncomplete:function(){i.isIncomplete=!0},error:function(e){console.error(e)},log:function(e){console.log(e)},getNumberOfProposals:function(){return i.items.length}};return this.schemaService.getSchemaForResource(e.uri,n).then(function(t){var f=[],m=!0,p="",g=null;if(u&&"string"===u.type){var v=u.parent;v&&"property"===v.type&&v.keyNode===u&&(m=!v.valueNode,g=v,p=e.getText().substr(u.offset+1,u.length-2),v&&(u=v.parent))}if(u&&"object"===u.type){if(u.offset===s)return i;u.properties.forEach(function(e){g&&g===e||(d[e.keyNode.value]=a.CompletionItem.create("__"))});var y="";m&&(y=o.evaluateSeparatorAfter(e,e.offsetAt(l.end))),t?o.getPropertyCompletions(t,n,u,m,y,h):o.getSchemaLessPropertyCompletions(n,u,p,h);var _=r.getNodePath(u);o.contributions.forEach(function(t){var n=t.collectPropertyCompletions(e.uri,_,c,m,""===y,h);n&&f.push(n)}),!t&&c.length>0&&'"'!==e.getText().charAt(s-c.length-1)&&h.add({kind:a.CompletionItemKind.Property,label:o.getLabelForValue(c),insertText:o.getInsertTextForProperty(c,null,!1,y),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""})}var b={};return t?o.getValueCompletions(t,n,u,s,e,h,b):o.getSchemaLessValueCompletions(n,u,s,e,h),o.contributions.length>0&&o.getContributedValueCompletions(n,u,s,e,h,f),o.promise.all(f).then(function(){if(0===h.getNumberOfProposals()){var t=s;!u||"string"!==u.type&&"number"!==u.type&&"boolean"!==u.type&&"null"!==u.type||(t=u.offset+u.length);var n=o.evaluateSeparatorAfter(e,t);o.addFillerValueCompletions(b,n,h)}return i})})},e.prototype.getPropertyCompletions=function(e,t,n,r,o,i){var u=this;t.getMatchingSchemas(e.schema,n.offset).forEach(function(e){if(e.node===n&&!e.inverted){var t=e.schema.properties;t&&Object.keys(t).forEach(function(e){var n=t[e];if("object"==typeof n&&!n.deprecationMessage&&!n.doNotSuggest){var c={kind:a.CompletionItemKind.Property,label:e,insertText:u.getInsertTextForProperty(e,n,r,o),insertTextFormat:a.InsertTextFormat.Snippet,filterText:u.getFilterTextForValue(e),documentation:n.description||""};Object(s.endsWith)(c.insertText,"$1"+o)&&(c.command={title:"Suggest",command:"editor.action.triggerSuggest"}),i.add(c)}})}})},e.prototype.getSchemaLessPropertyCompletions=function(e,t,n,r){var o=this,i=function(e){e.properties.forEach(function(e){var t=e.keyNode.value;r.add({kind:a.CompletionItemKind.Property,label:t,insertText:o.getInsertTextForValue(t,""),insertTextFormat:a.InsertTextFormat.Snippet,filterText:o.getFilterTextForValue(t),documentation:""})})};if(t.parent)if("property"===t.parent.type){var s=t.parent.keyNode.value;e.visit(function(e){return"property"===e.type&&e!==t.parent&&e.keyNode.value===s&&e.valueNode&&"object"===e.valueNode.type&&i(e.valueNode),!0})}else"array"===t.parent.type&&t.parent.items.forEach(function(e){"object"===e.type&&e!==t&&i(e)});else"object"===t.type&&r.add({kind:a.CompletionItemKind.Property,label:"$schema",insertText:this.getInsertTextForProperty("$schema",null,!0,""),insertTextFormat:a.InsertTextFormat.Snippet,documentation:"",filterText:this.getFilterTextForValue("$schema")})},e.prototype.getSchemaLessValueCompletions=function(e,t,n,o,i){var s=this,u=n;if(!t||"string"!==t.type&&"number"!==t.type&&"boolean"!==t.type&&"null"!==t.type||(u=t.offset+t.length,t=t.parent),!t)return i.add({kind:this.getSuggestionKind("object"),label:"Empty object",insertText:this.getInsertTextForValue({},""),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""}),void i.add({kind:this.getSuggestionKind("array"),label:"Empty array",insertText:this.getInsertTextForValue([],""),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""});var c=this.evaluateSeparatorAfter(o,u),l=function(e){r.contains(e.parent,n,!0)||i.add({kind:s.getSuggestionKind(e.type),label:s.getLabelTextForMatchingNode(e,o),insertText:s.getInsertTextForMatchingNode(e,o,c),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""}),"boolean"===e.type&&s.addBooleanValueCompletion(!e.value,c,i)};if("property"===t.type&&n>t.colonOffset){var f=t.valueNode;if(f&&(n>f.offset+f.length||"object"===f.type||"array"===f.type))return;var d=t.keyNode.value;e.visit(function(e){return"property"===e.type&&e.keyNode.value===d&&e.valueNode&&l(e.valueNode),!0}),"$schema"===d&&t.parent&&!t.parent.parent&&this.addDollarSchemaCompletions(c,i)}if("array"===t.type)if(t.parent&&"property"===t.parent.type){var h=t.parent.keyNode.value;e.visit(function(e){var t=e;return"property"===e.type&&t.keyNode.value===h&&t.valueNode&&"array"===t.valueNode.type&&t.valueNode.items.forEach(l),!0})}else t.items.forEach(l)},e.prototype.getValueCompletions=function(e,t,n,r,o,i,s){var a=this,u=r,c=null,l=null;if(!n||"string"!==n.type&&"number"!==n.type&&"boolean"!==n.type&&"null"!==n.type||(u=n.offset+n.length,l=n,n=n.parent),n){if("property"===n.type&&r>n.colonOffset){var f=n.valueNode;if(f&&r>f.offset+f.length)return;c=n.keyNode.value,n=n.parent}if(n&&(null!==c||"array"===n.type)){var d=this.evaluateSeparatorAfter(o,u);t.getMatchingSchemas(e.schema,n.offset,l).forEach(function(e){if(e.node===n&&!e.inverted&&e.schema){if("array"===n.type&&e.schema.items)if(Array.isArray(e.schema.items)){var t=a.findItemAtOffset(n,o,r);t<e.schema.items.length&&a.addSchemaValueCompletions(e.schema.items[t],d,i,s)}else a.addSchemaValueCompletions(e.schema.items,d,i,s);if(e.schema.properties){var u=e.schema.properties[c];u&&a.addSchemaValueCompletions(u,d,i,s)}}}),"$schema"!==c||n.parent||this.addDollarSchemaCompletions(d,i),s.boolean&&(this.addBooleanValueCompletion(!0,d,i),this.addBooleanValueCompletion(!1,d,i)),s.null&&this.addNullValueCompletion(d,i)}}else this.addSchemaValueCompletions(e.schema,"",i,s)},e.prototype.getContributedValueCompletions=function(e,t,n,o,i,s){if(t){if("string"!==t.type&&"number"!==t.type&&"boolean"!==t.type&&"null"!==t.type||(t=t.parent),"property"===t.type&&n>t.colonOffset){var a=t.keyNode.value,u=t.valueNode;if(!u||n<=u.offset+u.length){var c=r.getNodePath(t.parent);this.contributions.forEach(function(e){var t=e.collectValueCompletions(o.uri,c,a,i);t&&s.push(t)})}}}else this.contributions.forEach(function(e){var t=e.collectDefaultCompletions(o.uri,i);t&&s.push(t)})},e.prototype.addSchemaValueCompletions=function(e,t,n,r){var o=this;"object"==typeof e&&(this.addEnumValueCompletions(e,t,n),this.addDefaultValueCompletions(e,t,n),this.collectTypes(e,r),Array.isArray(e.allOf)&&e.allOf.forEach(function(e){return o.addSchemaValueCompletions(e,t,n,r)}),Array.isArray(e.anyOf)&&e.anyOf.forEach(function(e){return o.addSchemaValueCompletions(e,t,n,r)}),Array.isArray(e.oneOf)&&e.oneOf.forEach(function(e){return o.addSchemaValueCompletions(e,t,n,r)}))},e.prototype.addDefaultValueCompletions=function(e,t,n,r){var o=this;void 0===r&&(r=0);var i=!1;if(e.default){for(var s=e.type,c=e.default,l=r;l>0;l--)c=[c],s="array";n.add({kind:this.getSuggestionKind(s),label:this.getLabelForValue(c),insertText:this.getInsertTextForValue(c,t),insertTextFormat:a.InsertTextFormat.Snippet,detail:u("json.suggest.default","Default value")}),i=!0}Array.isArray(e.defaultSnippets)&&e.defaultSnippets.forEach(function(s){var u,c,l=e.type,f=s.body,d=s.label;if(void 0!==f){e.type;for(var h=r;h>0;h--)f=[f],"array";u=o.getInsertTextForSnippetValue(f,t),c=o.getFilterTextForSnippetValue(f),d=d||o.getLabelForSnippetValue(f)}else if("string"==typeof s.bodyText){var m="",p="",g="";for(h=r;h>0;h--)m=m+g+"[\n",p=p+"\n"+g+"]",g+="\t",l="array";u=m+g+s.bodyText.split("\n").join("\n"+g)+p+t,d=d||u,c=u.replace(/[\n]/g,"")}n.add({kind:o.getSuggestionKind(l),label:d,documentation:s.description,insertText:u,insertTextFormat:a.InsertTextFormat.Snippet,filterText:c}),i=!0}),i||"object"!=typeof e.items||Array.isArray(e.items)||this.addDefaultValueCompletions(e.items,t,n,r+1)},e.prototype.addEnumValueCompletions=function(e,t,n){if(Array.isArray(e.enum))for(var r=0,o=e.enum.length;r<o;r++){var i=e.enum[r],s=e.description;e.enumDescriptions&&r<e.enumDescriptions.length&&(s=e.enumDescriptions[r]),n.add({kind:this.getSuggestionKind(e.type),label:this.getLabelForValue(i),insertText:this.getInsertTextForValue(i,t),insertTextFormat:a.InsertTextFormat.Snippet,documentation:s})}},e.prototype.collectTypes=function(e,t){if(!Array.isArray(e.enum)){var n=e.type;Array.isArray(n)?n.forEach(function(e){return t[e]=!0}):t[n]=!0}},e.prototype.addFillerValueCompletions=function(e,t,n){e.object&&n.add({kind:this.getSuggestionKind("object"),label:"{}",insertText:this.getInsertTextForGuessedValue({},t),insertTextFormat:a.InsertTextFormat.Snippet,detail:u("defaults.object","New object"),documentation:""}),e.array&&n.add({kind:this.getSuggestionKind("array"),label:"[]",insertText:this.getInsertTextForGuessedValue([],t),insertTextFormat:a.InsertTextFormat.Snippet,detail:u("defaults.array","New array"),documentation:""})},e.prototype.addBooleanValueCompletion=function(e,t,n){n.add({kind:this.getSuggestionKind("boolean"),label:e?"true":"false",insertText:this.getInsertTextForValue(e,t),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""})},e.prototype.addNullValueCompletion=function(e,t){t.add({kind:this.getSuggestionKind("null"),label:"null",insertText:"null"+e,insertTextFormat:a.InsertTextFormat.Snippet,documentation:""})},e.prototype.addDollarSchemaCompletions=function(e,t){var n=this;this.schemaService.getRegisteredSchemaIds(function(e){return"http"===e||"https"===e}).forEach(function(r){return t.add({kind:a.CompletionItemKind.Module,label:n.getLabelForValue(r),filterText:n.getFilterTextForValue(r),insertText:n.getInsertTextForValue(r,e),insertTextFormat:a.InsertTextFormat.Snippet,documentation:""})})},e.prototype.getLabelForValue=function(e){var t=JSON.stringify(e);return t.length>57?t.substr(0,57).trim()+"...":t},e.prototype.getFilterTextForValue=function(e){return JSON.stringify(e)},e.prototype.getFilterTextForSnippetValue=function(e){return JSON.stringify(e).replace(/\$\{\d+:([^}]+)\}|\$\d+/g,"$1")},e.prototype.getLabelForSnippetValue=function(e){var t=JSON.stringify(e);return(t=t.replace(/\$\{\d+:([^}]+)\}|\$\d+/g,"$1")).length>57?t.substr(0,57).trim()+"...":t},e.prototype.getInsertTextForPlainText=function(e){return e.replace(/[\\\$\}]/g,"\\$&")},e.prototype.getInsertTextForValue=function(e,t){var n=JSON.stringify(e,null,"\t");return"{}"===n?"{\n\t$1\n}"+t:"[]"===n?"[\n\t$1\n]"+t:this.getInsertTextForPlainText(n+t)},e.prototype.getInsertTextForSnippetValue=function(e,t){return Object(i.stringifyObject)(e,"",function(e){return"string"==typeof e&&"^"===e[0]?e.substr(1):JSON.stringify(e)})+t},e.prototype.getInsertTextForGuessedValue=function(e,t){switch(typeof e){case"object":return null===e?"${1:null}"+t:this.getInsertTextForValue(e,t);case"string":var n=JSON.stringify(e);return n=n.substr(1,n.length-2),'"${1:'+(n=this.getInsertTextForPlainText(n))+'}"'+t;case"number":case"boolean":return"${1:"+JSON.stringify(e)+"}"+t}return this.getInsertTextForValue(e,t)},e.prototype.getSuggestionKind=function(e){if(Array.isArray(e)){var t=e;e=t.length>0?t[0]:null}if(!e)return a.CompletionItemKind.Value;switch(e){case"string":return a.CompletionItemKind.Value;case"object":return a.CompletionItemKind.Module;case"property":return a.CompletionItemKind.Property;default:return a.CompletionItemKind.Value}},e.prototype.getLabelTextForMatchingNode=function(e,t){switch(e.type){case"array":return"[]";case"object":return"{}";default:return t.getText().substr(e.offset,e.length)}},e.prototype.getInsertTextForMatchingNode=function(e,t,n){switch(e.type){case"array":return this.getInsertTextForValue([],n);case"object":return this.getInsertTextForValue({},n);default:var r=t.getText().substr(e.offset,e.length)+n;return this.getInsertTextForPlainText(r)}},e.prototype.getInsertTextForProperty=function(e,t,n,r){var o=this.getInsertTextForValue(e,"");if(!n)return o;var i,s=o+": ",a=0;if(t){if(Array.isArray(t.defaultSnippets)){if(1===t.defaultSnippets.length){var u=t.defaultSnippets[0].body;void 0!==u&&(i=this.getInsertTextForSnippetValue(u,""))}a+=t.defaultSnippets.length}if(t.enum&&(i||1!==t.enum.length||(i=this.getInsertTextForGuessedValue(t.enum[0],"")),a+=t.enum.length),void 0!==t.default&&(i||(i=this.getInsertTextForGuessedValue(t.default,"")),a++),0===a){var c=Array.isArray(t.type)?t.type[0]:t.type;switch(c||(t.properties?c="object":t.items&&(c="array")),c){case"boolean":i="$1";break;case"string":i='"$1"';break;case"object":i="{\n\t$1\n}";break;case"array":i="[\n\t$1\n]";break;case"number":case"integer":i="${1:0}";break;case"null":i="${1:null}";break;default:return o}}}return(!i||a>1)&&(i="$1"),s+i+r},e.prototype.getCurrentWord=function(e,t){for(var n=t-1,r=e.getText();n>=0&&-1===' \t\n\r\v":{[,]}'.indexOf(r.charAt(n));)n--;return r.substring(n+1,t)},e.prototype.evaluateSeparatorAfter=function(e,t){var n=o.createScanner(e.getText(),!0);switch(n.setPosition(t),n.scan()){case 5:case 2:case 4:case 17:return"";default:return","}},e.prototype.findItemAtOffset=function(e,t,n){for(var r=o.createScanner(t.getText(),!0),i=e.items,s=i.length-1;s>=0;s--){var a=i[s];if(n>a.offset+a.length)return r.setPosition(a.offset+a.length),5===r.scan()&&n>=r.getTokenOffset()+r.getTokenLength()?s+1:s;if(n>=a.offset)return s}return 0},e.prototype.isInComment=function(e,t,n){var r=o.createScanner(e.getText(),!1);r.setPosition(t);for(var i=r.scan();17!==i&&r.getTokenOffset()+r.getTokenLength()<n;)i=r.scan();return(12===i||13===i)&&r.getTokenOffset()<=n},e}()},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonDocumentSymbols.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonDocumentSymbols.js ***!
  \***************************************************************************************************************************/
/*! exports provided: JSONDocumentSymbols */function(e,t,n){"use strict";n.r(t),n.d(t,"JSONDocumentSymbols",function(){return a});var r=n(/*! ../parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),o=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js"),i=n(/*! ../utils/colors.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js"),s=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),a=function(){function e(e){this.schemaService=e}return e.prototype.findDocumentSymbols=function(e,t){var n=this,i=t.root;if(!i)return null;var a=e.uri;if(("vscode://defaultsettings/keybindings.json"===a||o.endsWith(a.toLowerCase(),"/user/keybindings.json"))&&"array"===i.type){var u=[];return i.items.forEach(function(t){if("object"===t.type)for(var n=0,o=t.properties;n<o.length;n++){var i=o[n];if("key"===i.keyNode.value){if(i.valueNode){var a=s.Location.create(e.uri,s.Range.create(e.positionAt(t.offset),e.positionAt(t.offset+t.length)));u.push({name:r.getNodeValue(i.valueNode),kind:s.SymbolKind.Function,location:a})}return}}}),u}var c=function(t,r,o){return"array"===r.type?r.items.forEach(function(e){return c(t,e,o)}):"object"===r.type&&r.properties.forEach(function(r){var i=s.Location.create(e.uri,s.Range.create(e.positionAt(r.offset),e.positionAt(r.offset+r.length))),a=r.valueNode;if(a){var u=o?o+"."+r.keyNode.value:r.keyNode.value;t.push({name:r.keyNode.value,kind:n.getSymbolKind(a.type),location:i,containerName:o}),c(t,a,u)}}),t};return c([],i,void 0)},e.prototype.getSymbolKind=function(e){switch(e){case"object":return s.SymbolKind.Module;case"string":return s.SymbolKind.String;case"number":return s.SymbolKind.Number;case"array":return s.SymbolKind.Array;case"boolean":return s.SymbolKind.Boolean;default:return s.SymbolKind.Variable}},e.prototype.findDocumentColors=function(e,t){return this.schemaService.getSchemaForResource(e.uri,t).then(function(n){var o=[];if(n)for(var a={},u=0,c=t.getMatchingSchemas(n.schema);u<c.length;u++){var l=c[u];if(!l.inverted&&l.schema&&("color"===l.schema.format||"color-hex"===l.schema.format)&&l.node&&"string"===l.node.type){var f=String(l.node.offset);if(!a[f]){var d=Object(i.colorFromHex)(r.getNodeValue(l.node));if(d){var h=s.Range.create(e.positionAt(l.node.offset),e.positionAt(l.node.offset+l.node.length));o.push({color:d,range:h})}a[f]=!0}}}return o})},e.prototype.getColorPresentations=function(e,t,n,r){var o,i=[],a=Math.round(255*n.red),u=Math.round(255*n.green),c=Math.round(255*n.blue);function l(e){var t=e.toString(16);return 2!==t.length?"0"+t:t}return o=1===n.alpha?"#"+l(a)+l(u)+l(c):"#"+l(a)+l(u)+l(c)+l(Math.round(255*n.alpha)),i.push({label:o,textEdit:s.TextEdit.replace(r,JSON.stringify(o))}),i},e}()},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonHover.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonHover.js ***!
  \*****************************************************************************************************************/
/*! exports provided: JSONHover */function(e,t,n){"use strict";n.r(t),n.d(t,"JSONHover",function(){return i});var r=n(/*! ../parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),o=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),i=function(){function e(e,t,n){void 0===t&&(t=[]),this.schemaService=e,this.contributions=t,this.promise=n||Promise}return e.prototype.doHover=function(e,t,n){var i=e.offsetAt(t),a=n.getNodeFromOffset(i);if(!a||("object"===a.type||"array"===a.type)&&i>a.offset+1&&i<a.offset+a.length-1)return this.promise.resolve(null);var u=a;if("string"===a.type){var c=a.parent;if("property"===c.type&&c.keyNode===a&&!(a=c.valueNode))return this.promise.resolve(null)}for(var l=o.Range.create(e.positionAt(u.offset),e.positionAt(u.offset+u.length)),f=function(e){return{contents:e,range:l}},d=r.getNodePath(a),h=this.contributions.length-1;h>=0;h--){var m=this.contributions[h].getInfoContribution(e.uri,d);if(m)return m.then(function(e){return f(e)})}return this.schemaService.getSchemaForResource(e.uri,n).then(function(e){if(e){var t=null,o=null,i=null,u=null;n.getMatchingSchemas(e.schema,a.offset).every(function(e){if(e.node===a&&!e.inverted&&e.schema&&(t=t||e.schema.title,o=o||e.schema.markdownDescription||s(e.schema.description),e.schema.enum)){var n=e.schema.enum.indexOf(r.getNodeValue(a));e.schema.markdownEnumDescriptions?i=e.schema.markdownEnumDescriptions[n]:e.schema.enumDescriptions&&(i=s(e.schema.enumDescriptions[n])),i&&"string"!=typeof(u=e.schema.enum[n])&&(u=JSON.stringify(u))}return!0});var c="";return t&&(c=s(t)),o&&(c.length>0&&(c+="\n\n"),c+=o),i&&(c.length>0&&(c+="\n\n"),c+="`"+s(u)+"`: "+i),f([c])}return null})},e}();function s(e){if(e)return e.replace(/([^\n\r])(\r?\n)([^\n\r])/gm,"$1\n\n$3").replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSchemaService.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonSchemaService.js ***!
  \*************************************************************************************************************************/
/*! exports provided: UnresolvedSchema, ResolvedSchema, JSONSchemaService */function(e,t,n){"use strict";n.r(t),n.d(t,"UnresolvedSchema",function(){return l}),n.d(t,"ResolvedSchema",function(){return f}),n.d(t,"JSONSchemaService",function(){return d});var r=n(/*! ../../jsonc-parser/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"),o=n(/*! ../../vscode-uri/index.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js"),i=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js"),s=n(/*! ../parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),a=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js").loadMessageBundle(),u=function(){function e(e){try{this.patternRegExp=new RegExp(i.convertSimple2RegExpPattern(e)+"$")}catch(e){this.patternRegExp=null}this.schemas=[]}return e.prototype.addSchema=function(e){this.schemas.push(e)},e.prototype.matchesPattern=function(e){return this.patternRegExp&&this.patternRegExp.test(e)},e.prototype.getSchemas=function(){return this.schemas},e}(),c=function(){function e(e,t,n){this.service=e,this.url=t,n&&(this.unresolvedSchema=this.service.promise.resolve(new l(n)))}return e.prototype.getUnresolvedSchema=function(){return this.unresolvedSchema||(this.unresolvedSchema=this.service.loadSchema(this.url)),this.unresolvedSchema},e.prototype.getResolvedSchema=function(){var e=this;return this.resolvedSchema||(this.resolvedSchema=this.getUnresolvedSchema().then(function(t){return e.service.resolveSchemaContent(t,e.url)})),this.resolvedSchema},e.prototype.clearSchema=function(){this.resolvedSchema=null,this.unresolvedSchema=null},e}(),l=function(){return function(e,t){void 0===t&&(t=[]),this.schema=e,this.errors=t}}(),f=function(){function e(e,t){void 0===t&&(t=[]),this.schema=e,this.errors=t}return e.prototype.getSection=function(e){return s.asSchema(this.getSectionRecursive(e,this.schema))},e.prototype.getSectionRecursive=function(e,t){var n=this;if(!t||"boolean"==typeof t||0===e.length)return t;var r=e.shift();if(t.properties&&(t.properties[r],1))return this.getSectionRecursive(e,t.properties[r]);if(t.patternProperties)Object.keys(t.patternProperties).forEach(function(o){if(new RegExp(o).test(r))return n.getSectionRecursive(e,t.patternProperties[o])});else{if("object"==typeof t.additionalProperties)return this.getSectionRecursive(e,t.additionalProperties);if(r.match("[0-9]+"))if(Array.isArray(t.items)){var o=parseInt(r,10);if(!isNaN(o)&&t.items[o])return this.getSectionRecursive(e,t.items[o])}else if(t.items)return this.getSectionRecursive(e,t.items)}return null},e}(),d=function(){function e(e,t,n){this.contextService=t,this.requestService=e,this.promiseConstructor=n||Promise,this.callOnDispose=[],this.contributionSchemas={},this.contributionAssociations={},this.schemasById={},this.filePatternAssociations=[],this.filePatternAssociationById={},this.registeredSchemasIds={}}return e.prototype.getRegisteredSchemaIds=function(e){return Object.keys(this.registeredSchemasIds).filter(function(t){var n=o.default.parse(t).scheme;return"schemaservice"!==n&&(!e||e(n))})},Object.defineProperty(e.prototype,"promise",{get:function(){return this.promiseConstructor},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){for(;this.callOnDispose.length>0;)this.callOnDispose.pop()()},e.prototype.onResourceChange=function(e){e=this.normalizeId(e);var t=this.schemasById[e];return!!t&&(t.clearSchema(),!0)},e.prototype.normalizeId=function(e){return o.default.parse(e).toString()},e.prototype.setSchemaContributions=function(e){var t=this;if(e.schemas){var n=e.schemas;for(var r in n){var o=this.normalizeId(r);this.contributionSchemas[o]=this.addSchemaHandle(o,n[r])}}if(e.schemaAssociations){var i=e.schemaAssociations;for(var s in i){var a=i[s];this.contributionAssociations[s]=a;var u=this.getOrAddFilePatternAssociation(s);a.forEach(function(e){var n=t.normalizeId(e);u.addSchema(n)})}}},e.prototype.addSchemaHandle=function(e,t){var n=new c(this,e,t);return this.schemasById[e]=n,n},e.prototype.getOrAddSchemaHandle=function(e,t){return this.schemasById[e]||this.addSchemaHandle(e,t)},e.prototype.getOrAddFilePatternAssociation=function(e){var t=this.filePatternAssociationById[e];return t||(t=new u(e),this.filePatternAssociationById[e]=t,this.filePatternAssociations.push(t)),t},e.prototype.registerExternalSchema=function(e,t,n){var r=this;void 0===t&&(t=null);var o=this.normalizeId(e);return this.registeredSchemasIds[o]=!0,t&&t.forEach(function(e){r.getOrAddFilePatternAssociation(e).addSchema(o)}),n?this.addSchemaHandle(o,n):this.getOrAddSchemaHandle(o)},e.prototype.clearExternalSchemas=function(){var e=this;for(var t in this.schemasById={},this.filePatternAssociations=[],this.filePatternAssociationById={},this.registeredSchemasIds={},this.contributionSchemas)this.schemasById[t]=this.contributionSchemas[t],this.registeredSchemasIds[t]=!0;for(var n in this.contributionAssociations){var r=this.getOrAddFilePatternAssociation(n);this.contributionAssociations[n].forEach(function(t){var n=e.normalizeId(t);r.addSchema(n)})}},e.prototype.getResolvedSchema=function(e){var t=this.normalizeId(e),n=this.schemasById[t];return n?n.getResolvedSchema():this.promise.resolve(null)},e.prototype.loadSchema=function(e){if(!this.requestService){var t=a("json.schema.norequestservice","Unable to load schema from '{0}'. No schema request service available",h(e));return this.promise.resolve(new l({},[t]))}return this.requestService(e).then(function(t){if(!t){var n=a("json.schema.nocontent","Unable to load schema from '{0}': No content.",h(e));return new l({},[n])}var o,i=[];o=r.parse(t,i);var s=i.length?[a("json.schema.invalidFormat","Unable to parse content from '{0}': Parse error at offset {1}.",h(e),i[0].offset)]:[];return new l(o,s)},function(t){var n=a("json.schema.unabletoload","Unable to load schema from '{0}': {1}",h(e),t.toString());return new l({},[n])})},e.prototype.resolveSchemaContent=function(e,t){var n=this,r=e.errors.slice(0),o=e.schema,i=this.contextService,s=function(e,t,n,o){var i=function(e,t){if(!t)return e;var n=e;return"/"===t[0]&&(t=t.substr(1)),t.split("/").some(function(e){return!(n=n[e])}),n}(t,o);if(i)for(var s in i)i.hasOwnProperty(s)&&!e.hasOwnProperty(s)&&(e[s]=i[s]);else r.push(a("json.schema.invalidref","$ref '{0}' in '{1}' can not be resolved.",o,n))},u=function(e,t,o,u){return i&&!/^\w+:\/\/.*/.test(t)&&(t=i.resolveRelativePath(t,u)),t=n.normalizeId(t),n.getOrAddSchemaHandle(t).getUnresolvedSchema().then(function(n){if(n.errors.length){var i=o?t+"#"+o:t;r.push(a("json.schema.problemloadingref","Problems loading reference '{0}': {1}",i,n.errors[0]))}return s(e,n.schema,t,o),c(e,n.schema,t)})},c=function(e,t,r){if(!e||"object"!=typeof e)return Promise.resolve(null);for(var o=[e],i=[],a=[],c=function(e){for(;e.$ref;){var n=e.$ref.split("#",2);if(delete e.$ref,n[0].length>0)return void a.push(u(e,n[0],n[1],r));s(e,t,r,n[1])}!function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var i=r[n];"object"==typeof i&&o.push(i)}}(e.items,e.additionalProperties,e.not,e.contains,e.propertyNames),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var i=r[n];if("object"==typeof i)for(var s in i){var a=i[s];"object"==typeof a&&o.push(a)}}}(e.definitions,e.properties,e.patternProperties,e.dependencies),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=e;n<r.length;n++){var i=r[n];if(Array.isArray(i))for(var s=0,a=i;s<a.length;s++){var u=a[s];"object"==typeof u&&o.push(u)}}}(e.anyOf,e.allOf,e.oneOf,e.items)};o.length;){var l=o.pop();i.indexOf(l)>=0||(i.push(l),c(l))}return n.promise.all(a)};return c(o,o,t).then(function(e){return new f(o,r)})},e.prototype.getSchemaForResource=function(e,t){if(t&&t.root&&"object"===t.root.type){var n=t.root.properties.filter(function(e){return"$schema"===e.keyNode.value&&e.valueNode&&"string"===e.valueNode.type});if(n.length>0){var r=s.getNodeValue(n[0].valueNode);if(r&&i.startsWith(r,".")&&this.contextService&&(r=this.contextService.resolveRelativePath(r,e)),r){var o=this.normalizeId(r);return this.getOrAddSchemaHandle(o).getResolvedSchema()}}}for(var a=Object.create(null),u=[],c=0,l=this.filePatternAssociations;c<l.length;c++){var f=l[c];if(f.matchesPattern(e))for(var d=0,h=f.getSchemas();d<h.length;d++){var m=h[d];a[m]||(u.push(m),a[m]=!0)}}return u.length>0?this.createCombinedSchema(e,u).getResolvedSchema():this.promise.resolve(null)},e.prototype.createCombinedSchema=function(e,t){if(1===t.length)return this.getOrAddSchemaHandle(t[0]);var n="schemaservice://combinedSchema/"+encodeURIComponent(e),r={allOf:t.map(function(e){return{$ref:e}})};return this.addSchemaHandle(n,r)},e}();function h(e){try{var t=o.default.parse(e);if("file"===t.scheme)return t.fsPath}catch(e){}return e}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonValidation.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonValidation.js ***!
  \**********************************************************************************************************************/
/*! exports provided: JSONValidation */function(e,t,n){"use strict";n.r(t),n.d(t,"JSONValidation",function(){return s});var r=n(/*! ../parser/jsonParser.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/parser/jsonParser.js"),o=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),i=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js").loadMessageBundle(),s=function(){function e(e,t){this.jsonSchemaService=e,this.promise=t,this.validationEnabled=!0}return e.prototype.configure=function(e){e&&(this.validationEnabled=e.validate,this.commentSeverity=e.allowComments?r.ProblemSeverity.Ignore:r.ProblemSeverity.Error)},e.prototype.doValidation=function(e,t,n){var s=this;if(!this.validationEnabled)return this.promise.resolve([]);var u=[],c={},l=function(t){if(t.severity!==r.ProblemSeverity.Ignore){var n=t.location.offset+" "+t.location.length+" "+t.message;if(!c[n]){c[n]=!0;var i={start:e.positionAt(t.location.offset),end:e.positionAt(t.location.offset+t.location.length)},s=t.severity===r.ProblemSeverity.Error?o.DiagnosticSeverity.Error:o.DiagnosticSeverity.Warning;u.push({severity:s,range:i,message:t.message})}}};return this.jsonSchemaService.getSchemaForResource(e.uri,t).then(function(e){var o=n?n.trailingCommas:r.ProblemSeverity.Error,c=n?n.comments:s.commentSeverity;if(e){if(e.errors.length&&t.root){var f=t.root,d="object"===f.type?f.properties[0]:null;if(d&&"$schema"===d.keyNode.value){var h=d.valueNode||d;l({location:{offset:h.offset,length:h.length},message:e.errors[0],severity:r.ProblemSeverity.Warning})}else l({location:{offset:f.offset,length:1},message:e.errors[0],severity:r.ProblemSeverity.Warning})}else{var m=t.validate(e.schema);m&&m.forEach(l)}a(e.schema)&&(o=c=r.ProblemSeverity.Ignore)}if(t.syntaxErrors.forEach(function(e){e.code===r.ErrorCode.TrailingComma&&(e.severity=o),l(e)}),u.push.apply(u,t.externalDiagnostic),c!==r.ProblemSeverity.Ignore){var p=i("InvalidCommentToken","Comments are not permitted in JSON.");t.comments.forEach(function(e){l({location:e,severity:c,message:p})})}return u})},e}();function a(e){if(e&&"object"==typeof e){if(e.allowComments)return!0;if(e.allOf)return e.allOf.some(a)}return!1}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js ***!
  \***********************************************************************************************************/
/*! exports provided: hexDigit, colorFromHex, colorFrom256RGB */function(e,t,n){"use strict";n.r(t),n.d(t,"hexDigit",function(){return u}),n.d(t,"colorFromHex",function(){return c}),n.d(t,"colorFrom256RGB",function(){return l});var r=48,o=57,i=65,s=97,a=102;function u(e){return e<r?0:e<=o?e-r:(e<s&&(e+=s-i),e>=s&&e<=a?e-s+10:0)}function c(e){if("#"!==e[0])return null;switch(e.length){case 4:return{red:17*u(e.charCodeAt(1))/255,green:17*u(e.charCodeAt(2))/255,blue:17*u(e.charCodeAt(3))/255,alpha:1};case 5:return{red:17*u(e.charCodeAt(1))/255,green:17*u(e.charCodeAt(2))/255,blue:17*u(e.charCodeAt(3))/255,alpha:17*u(e.charCodeAt(4))/255};case 7:return{red:(16*u(e.charCodeAt(1))+u(e.charCodeAt(2)))/255,green:(16*u(e.charCodeAt(3))+u(e.charCodeAt(4)))/255,blue:(16*u(e.charCodeAt(5))+u(e.charCodeAt(6)))/255,alpha:1};case 9:return{red:(16*u(e.charCodeAt(1))+u(e.charCodeAt(2)))/255,green:(16*u(e.charCodeAt(3))+u(e.charCodeAt(4)))/255,blue:(16*u(e.charCodeAt(5))+u(e.charCodeAt(6)))/255,alpha:(16*u(e.charCodeAt(7))+u(e.charCodeAt(8)))/255}}return null}function l(e,t,n,r){return void 0===r&&(r=1),{red:e/255,green:t/255,blue:n/255,alpha:r}}},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/json.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/json.js ***!
  \*********************************************************************************************************/
/*! exports provided: stringifyObject */function(e,t,n){"use strict";function r(e,t,n){if(null!==e&&"object"==typeof e){var o=t+"\t";if(Array.isArray(e)){if(0===e.length)return"[]";for(var i="[\n",s=0;s<e.length;s++)i+=o+r(e[s],o,n),s<e.length-1&&(i+=","),i+="\n";return i+=t+"]"}var a=Object.keys(e);if(0===a.length)return"{}";for(i="{\n",s=0;s<a.length;s++){var u=a[s];i+=o+JSON.stringify(u)+": "+r(e[u],o,n),s<a.length-1&&(i+=","),i+="\n"}return i+=t+"}"}return n(e)}n.r(t),n.d(t,"stringifyObject",function(){return r})},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/objects.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/objects.js ***!
  \************************************************************************************************************/
/*! exports provided: equals */function(e,t,n){"use strict";function r(e,t){if(e===t)return!0;if(null===e||void 0===e||null===t||void 0===t)return!1;if(typeof e!=typeof t)return!1;if("object"!=typeof e)return!1;if(Array.isArray(e)!==Array.isArray(t))return!1;var n,o;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(n=0;n<e.length;n++)if(!r(e[n],t[n]))return!1}else{var i=[];for(o in e)i.push(o);i.sort();var s=[];for(o in t)s.push(o);if(s.sort(),!r(i,s))return!1;for(n=0;n<i.length;n++)if(!r(e[i[n]],t[i[n]]))return!1}return!0}n.r(t),n.d(t,"equals",function(){return r})},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/strings.js ***!
  \************************************************************************************************************/
/*! exports provided: startsWith, endsWith, convertSimple2RegExpPattern, repeat */function(e,t,n){"use strict";function r(e,t){if(e.length<t.length)return!1;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function o(e,t){var n=e.length-t.length;return n>0?e.lastIndexOf(t)===n:0===n&&e===t}function i(e){return e.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}function s(e,t){for(var n="";t>0;)1==(1&t)&&(n+=e),e+=e,t>>>=1;return n}n.r(t),n.d(t,"startsWith",function(){return r}),n.d(t,"endsWith",function(){return o}),n.d(t,"convertSimple2RegExpPattern",function(){return i}),n.d(t,"repeat",function(){return s})},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js ***!
  \***************************************************************************************************/
/*! exports provided: Position, Range, Location, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, CodeActionContext, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */function(e,t,n){"use strict";var r,o,i,s,a,u,c,l;n.r(t),n.d(t,"Position",function(){return r}),n.d(t,"Range",function(){return o}),n.d(t,"Location",function(){return i}),n.d(t,"DiagnosticSeverity",function(){return s}),n.d(t,"Diagnostic",function(){return a}),n.d(t,"Command",function(){return u}),n.d(t,"TextEdit",function(){return c}),n.d(t,"TextDocumentEdit",function(){return l}),n.d(t,"WorkspaceChange",function(){return O}),n.d(t,"TextDocumentIdentifier",function(){return f}),n.d(t,"VersionedTextDocumentIdentifier",function(){return d}),n.d(t,"TextDocumentItem",function(){return h}),n.d(t,"MarkupKind",function(){return m}),n.d(t,"CompletionItemKind",function(){return p}),n.d(t,"InsertTextFormat",function(){return g}),n.d(t,"CompletionItem",function(){return v}),n.d(t,"CompletionList",function(){return y}),n.d(t,"MarkedString",function(){return _}),n.d(t,"ParameterInformation",function(){return b}),n.d(t,"SignatureInformation",function(){return S}),n.d(t,"DocumentHighlightKind",function(){return C}),n.d(t,"DocumentHighlight",function(){return E}),n.d(t,"SymbolKind",function(){return x}),n.d(t,"SymbolInformation",function(){return j}),n.d(t,"CodeActionContext",function(){return w}),n.d(t,"CodeLens",function(){return A}),n.d(t,"FormattingOptions",function(){return N}),n.d(t,"DocumentLink",function(){return k}),n.d(t,"EOL",function(){return I}),n.d(t,"TextDocument",function(){return T}),n.d(t,"TextDocumentSaveReason",function(){return L}),function(e){e.create=function(e,t){return{line:e,character:t}},e.is=function(e){var t=e;return M.defined(t)&&M.number(t.line)&&M.number(t.character)}}(r||(r={})),function(e){e.create=function(e,t,n,o){if(M.number(e)&&M.number(t)&&M.number(n)&&M.number(o))return{start:r.create(e,t),end:r.create(n,o)};if(r.is(e)&&r.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+o+"]")},e.is=function(e){var t=e;return M.defined(t)&&r.is(t.start)&&r.is(t.end)}}(o||(o={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return M.defined(t)&&o.is(t.range)&&(M.string(t.uri)||M.undefined(t.uri))}}(i||(i={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(s||(s={})),function(e){e.create=function(e,t,n,r,o){var i={range:e,message:t};return M.defined(n)&&(i.severity=n),M.defined(r)&&(i.code=r),M.defined(o)&&(i.source=o),i},e.is=function(e){var t=e;return M.defined(t)&&o.is(t.range)&&M.string(t.message)&&(M.number(t.severity)||M.undefined(t.severity))&&(M.number(t.code)||M.string(t.code)||M.undefined(t.code))&&(M.string(t.source)||M.undefined(t.source))}}(a||(a={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o={title:e,command:t};return M.defined(n)&&n.length>0&&(o.arguments=n),o},e.is=function(e){var t=e;return M.defined(t)&&M.string(t.title)&&M.string(t.title)}}(u||(u={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}}}(c||(c={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return M.defined(t)&&d.is(t.textDocument)&&Array.isArray(t.edits)}}(l||(l={}));var f,d,h,m,p,g,v,y,_,b,S,C,E,x,j,w,A,N,P=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,t){this.edits.push(c.insert(e,t))},e.prototype.replace=function(e,t){this.edits.push(c.replace(e,t))},e.prototype.delete=function(e){this.edits.push(c.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),O=function(){function e(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var n=new P(e.edits);t._textEditChanges[e.textDocument.uri]=n}):e.changes&&Object.keys(e.changes).forEach(function(n){var r=new P(e.changes[n]);t._textEditChanges[n]=r}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(d.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var t=e;if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:o=[]};this._workspaceEdit.documentChanges.push(n),r=new P(o),this._textEditChanges[t.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var o=[];this._workspaceEdit.changes[e]=o,r=new P(o),this._textEditChanges[e]=r}return r},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return M.defined(t)&&M.string(t.uri)}}(f||(f={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return M.defined(t)&&M.string(t.uri)&&M.number(t.version)}}(d||(d={})),function(e){e.create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},e.is=function(e){var t=e;return M.defined(t)&&M.string(t.uri)&&M.string(t.languageId)&&M.number(t.version)&&M.string(t.text)}}(h||(h={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(m||(m={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(p||(p={})),function(e){e.PlainText=1,e.Snippet=2}(g||(g={})),function(e){e.create=function(e){return{label:e}}}(v||(v={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(y||(y={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(_||(_={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(b||(b={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o={label:e};return M.defined(t)&&(o.documentation=t),M.defined(n)?o.parameters=n:o.parameters=[],o}}(S||(S={})),function(e){e.Text=1,e.Read=2,e.Write=3}(C||(C={})),function(e){e.create=function(e,t){var n={range:e};return M.number(t)&&(n.kind=t),n}}(E||(E={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(x||(x={})),function(e){e.create=function(e,t,n,r,o){var i={name:e,kind:t,location:{uri:r,range:n}};return o&&(i.containerName=o),i}}(j||(j={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var t=e;return M.defined(t)&&M.typedArray(t.diagnostics,a.is)}}(w||(w={})),function(e){e.create=function(e,t){var n={range:e};return M.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return M.defined(t)&&o.is(t.range)&&(M.undefined(t.command)||u.is(t.command))}}(A||(A={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return M.defined(t)&&M.number(t.tabSize)&&M.boolean(t.insertSpaces)}}(N||(N={}));var k=function(){return function(){}}();!function(e){e.create=function(e,t){return{range:e,target:t}},e.is=function(e){var t=e;return M.defined(t)&&o.is(t.range)&&(M.undefined(t.target)||M.string(t.target))}}(k||(k={}));var T,L,I=["\n","\r\n","\r"];!function(e){e.create=function(e,t,n,r){return new D(e,t,n,r)},e.is=function(e){var t=e;return!!(M.defined(t)&&M.string(t.uri)&&(M.undefined(t.languageId)||M.string(t.languageId))&&M.number(t.lineCount)&&M.func(t.getText)&&M.func(t.positionAt)&&M.func(t.offsetAt))},e.applyEdits=function(e,t){for(var n=e.getText(),r=function e(t,n){if(t.length<=1)return t;var r=t.length/2|0,o=t.slice(0,r),i=t.slice(r);e(o,n),e(i,n);for(var s=0,a=0,u=0;s<o.length&&a<i.length;){var c=n(o[s],i[a]);t[u++]=c<=0?o[s++]:i[a++]}for(;s<o.length;)t[u++]=o[s++];for(;a<i.length;)t[u++]=i[a++];return t}(t,function(e,t){return 0==e.range.start.line-t.range.start.line?e.range.start.character-t.range.start.character:0}),o=n.length,i=r.length-1;i>=0;i--){var s=r[i],a=e.offsetAt(s.range.start),u=e.offsetAt(s.range.end);if(!(u<=o))throw new Error("Ovelapping edit");n=n.substring(0,a)+s.newText+n.substring(u,n.length),o=a}return n}}(T||(T={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(L||(L={}));var M,D=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var o=t.charAt(r);n="\r"===o||"\n"===o,"\r"===o&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,o=t.length;if(0===o)return r.create(0,e);for(;n<o;){var i=Math.floor((n+o)/2);t[i]>e?o=i:n=i+1}var s=n-1;return r.create(s,e-t[s])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.func=function(e){return"[object Function]"===t.call(e)},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(M||(M={}))},"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-uri/index.js ***!
  \***********************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),function(e){function n(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return encodeURIComponent(e).replace(/[!'()*]/g,n)}function o(e){return e.replace(/[#?]/,n)}var i,s=function(){function e(){this._scheme=e._empty,this._authority=e._empty,this._path=e._empty,this._query=e._empty,this._fragment=e._empty,this._formatted=null,this._fsPath=null}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"scheme",{get:function(){return this._scheme},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"authority",{get:function(){return this._authority},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this._path},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"query",{get:function(){return this._query},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fragment",{get:function(){return this._fragment},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fsPath",{get:function(){var t;this._fsPath||(t=this._authority&&this._path&&"file"===this.scheme?"//"+this._authority+this._path:e._driveLetterPath.test(this._path)?this._path[1].toLowerCase()+this._path.substr(2):this._path,i&&(t=t.replace(/\//g,"\\")),this._fsPath=t);return this._fsPath},enumerable:!0,configurable:!0}),e.prototype.with=function(t){if(!t)return this;var n=t.scheme,r=t.authority,o=t.path,i=t.query,s=t.fragment;if(void 0===n?n=this.scheme:null===n&&(n=""),void 0===r?r=this.authority:null===r&&(r=""),void 0===o?o=this.path:null===o&&(o=""),void 0===i?i=this.query:null===i&&(i=""),void 0===s?s=this.fragment:null===s&&(s=""),n===this.scheme&&r===this.authority&&o===this.path&&i===this.query&&s===this.fragment)return this;var a=new e;return a._scheme=n,a._authority=r,a._path=o,a._query=i,a._fragment=s,e._validate(a),a},e.parse=function(t){var n=new e,r=e._parseComponents(t);return n._scheme=r.scheme,n._authority=decodeURIComponent(r.authority),n._path=decodeURIComponent(r.path),n._query=decodeURIComponent(r.query),n._fragment=decodeURIComponent(r.fragment),e._validate(n),n},e.file=function(t){var n=new e;if(n._scheme="file",i&&(t=t.replace(/\\/g,e._slash)),t[0]===e._slash&&t[0]===t[1]){var r=t.indexOf(e._slash,2);-1===r?n._authority=t.substring(2):(n._authority=t.substring(2,r),n._path=t.substring(r))}else n._path=t;return n._path[0]!==e._slash&&(n._path=e._slash+n._path),e._validate(n),n},e._parseComponents=function(t){var n={scheme:e._empty,authority:e._empty,path:e._empty,query:e._empty,fragment:e._empty},r=e._regexp.exec(t);return r&&(n.scheme=r[2]||n.scheme,n.authority=r[4]||n.authority,n.path=r[5]||n.path,n.query=r[7]||n.query,n.fragment=r[9]||n.fragment),n},e.from=function(t){return(new e).with(t)},e._validate=function(t){if(t.scheme&&!e._schemePattern.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!e._singleSlashStart.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(e._doubleSlashStart.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')},e.prototype.toString=function(t){return void 0===t&&(t=!1),t?e._asFormatted(this,!0):(this._formatted||(this._formatted=e._asFormatted(this,!1)),this._formatted)},e._asFormatted=function(t,n){var i=n?o:r,s=[],a=t.scheme,u=t.authority,c=t.path,l=t.query,f=t.fragment;(a&&s.push(a,":"),(u||"file"===a)&&s.push("//"),u)&&(-1===(m=(u=u.toLowerCase()).indexOf(":"))?s.push(i(u)):s.push(i(u.substr(0,m)),u.substr(m)));if(c){var d=e._upperCaseDrive.exec(c);d&&(c=d[1]?"/"+d[2].toLowerCase()+c.substr(3):d[2].toLowerCase()+c.substr(2));for(var h=0;;){var m;if(-1===(m=c.indexOf(e._slash,h))){s.push(i(c.substring(h)));break}s.push(i(c.substring(h,m)),e._slash),h=m+1}}return l&&s.push("?",i(l)),f&&s.push("#",i(f)),s.join(e._empty)},e.prototype.toJSON=function(){var e={fsPath:this.fsPath,external:this.toString(),$mid:1};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){var n=new e;return n._scheme=t.scheme||e._empty,n._authority=t.authority||e._empty,n._path=t.path||e._empty,n._query=t.query||e._empty,n._fragment=t.fragment||e._empty,n._fsPath=t.fsPath,n._formatted=t.external,e._validate(n),n},e}();if(t.default=s,s._empty="",s._slash="/",s._regexp=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,s._driveLetterPath=/^\/[a-zA-z]:/,s._upperCaseDrive=/^(\/)?([A-Z]:)/,s._schemePattern=/^\w[\w\d+.-]*$/,s._singleSlashStart=/^\//,s._doubleSlashStart=/^\/\//,"object"==typeof e)i="win32"===e.platform;else if("object"==typeof navigator){var a=navigator.userAgent;i=a.indexOf("Windows")>=0}}.call(this,n(/*! ./../../../../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/fillers/vscode-nls.js ***!
  \*******************************************************************************/
/*! exports provided: loadMessageBundle, config */function(e,t,n){"use strict";function r(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return function(e,t){return 0===t.length?e:e.replace(/\{(\d+)\}/g,function(e,n){var r=n[0];return void 0!==t[r]?t[r]:e})}(t,n)}function o(e){return r}function i(e){return o}n.r(t),n.d(t,"loadMessageBundle",function(){return o}),n.d(t,"config",function(){return i})},"./node_modules/monaco-editor/esm/vs/language/json/json.worker.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/json.worker.js ***!
  \************************************************************************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../../editor/editor.worker.js */"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js"),o=n(/*! ./jsonWorker.js */"./node_modules/monaco-editor/esm/vs/language/json/jsonWorker.js");self.onmessage=function(){r.initialize(function(e,t){return new o.JSONWorker(e,t)})}},"./node_modules/monaco-editor/esm/vs/language/json/jsonWorker.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/jsonWorker.js ***!
  \***********************************************************************/
/*! exports provided: JSONWorker, create */function(e,t,n){"use strict";n.r(t),n.d(t,"JSONWorker",function(){return a}),n.d(t,"create",function(){return u});var r=n(/*! ./_deps/vscode-json-languageservice/jsonLanguageService.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/jsonLanguageService.js"),o=n(/*! ./_deps/vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),i=monaco.Promise,s=function(){function e(e){this.wrapped=new monaco.Promise(e)}return e.prototype.then=function(e,t){return this.wrapped.then(e,t)},e.prototype.getWrapped=function(){return this.wrapped},e.prototype.cancel=function(){this.wrapped.cancel()},e.resolve=function(e){return monaco.Promise.as(e)},e.reject=function(e){return monaco.Promise.wrapError(e)},e.all=function(e){return monaco.Promise.join(e)},e}(),a=function(){function e(e,t){this._ctx=e,this._languageSettings=t.languageSettings,this._languageId=t.languageId,this._languageService=r.getLanguageService({promiseConstructor:s}),this._languageService.configure(this._languageSettings)}return e.prototype.doValidation=function(e){var t=this._getTextDocument(e);if(t){var n=this._languageService.parseJSONDocument(t);return this._languageService.doValidation(t,n)}return i.as([])},e.prototype.doComplete=function(e,t){var n=this._getTextDocument(e),r=this._languageService.parseJSONDocument(n);return this._languageService.doComplete(n,t,r)},e.prototype.doResolve=function(e){return this._languageService.doResolve(e)},e.prototype.doHover=function(e,t){var n=this._getTextDocument(e),r=this._languageService.parseJSONDocument(n);return this._languageService.doHover(n,t,r)},e.prototype.format=function(e,t,n){var r=this._getTextDocument(e),o=this._languageService.format(r,t,n);return i.as(o)},e.prototype.resetSchema=function(e){return i.as(this._languageService.resetSchema(e))},e.prototype.findDocumentSymbols=function(e){var t=this._getTextDocument(e),n=this._languageService.parseJSONDocument(t),r=this._languageService.findDocumentSymbols(t,n);return i.as(r)},e.prototype.findDocumentColors=function(e){var t=this._getTextDocument(e),n=this._languageService.parseJSONDocument(t),r=this._languageService.findDocumentColors(t,n);return i.as(r)},e.prototype.getColorPresentations=function(e,t,n){var r=this._getTextDocument(e),o=this._languageService.parseJSONDocument(r),s=this._languageService.getColorPresentations(r,o,t,n);return i.as(s)},e.prototype._getTextDocument=function(e){for(var t=0,n=this._ctx.getMirrorModels();t<n.length;t++){var r=n[t];if(r.uri.toString()===e)return o.TextDocument.create(e,this._languageId,r.version,r.getValue())}return null},e}();function u(e,t){return new a(e,t)}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var e=a(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function p(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||l||a(h)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=p,o.addListener=p,o.once=p,o.off=p,o.removeListener=p,o.removeAllListeners=p,o.emit=p,o.prependListener=p,o.prependOnceListener=p,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,