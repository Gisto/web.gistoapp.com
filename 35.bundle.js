(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js ***!
  \************************************************************************************************************************************/
/*! exports provided: Position, Range, Location, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, CodeActionContext, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */function(e,t,n){"use strict";var r,i,o,u,a,c,s,d;n.r(t),n.d(t,"Position",function(){return r}),n.d(t,"Range",function(){return i}),n.d(t,"Location",function(){return o}),n.d(t,"DiagnosticSeverity",function(){return u}),n.d(t,"Diagnostic",function(){return a}),n.d(t,"Command",function(){return c}),n.d(t,"TextEdit",function(){return s}),n.d(t,"TextDocumentEdit",function(){return d}),n.d(t,"WorkspaceChange",function(){return M}),n.d(t,"TextDocumentIdentifier",function(){return f}),n.d(t,"VersionedTextDocumentIdentifier",function(){return l}),n.d(t,"TextDocumentItem",function(){return g}),n.d(t,"MarkupKind",function(){return m}),n.d(t,"CompletionItemKind",function(){return h}),n.d(t,"InsertTextFormat",function(){return p}),n.d(t,"CompletionItem",function(){return v}),n.d(t,"CompletionList",function(){return _}),n.d(t,"MarkedString",function(){return y}),n.d(t,"ParameterInformation",function(){return b}),n.d(t,"SignatureInformation",function(){return w}),n.d(t,"DocumentHighlightKind",function(){return k}),n.d(t,"DocumentHighlight",function(){return C}),n.d(t,"SymbolKind",function(){return I}),n.d(t,"SymbolInformation",function(){return x}),n.d(t,"CodeActionContext",function(){return E}),n.d(t,"CodeLens",function(){return D}),n.d(t,"FormattingOptions",function(){return S}),n.d(t,"DocumentLink",function(){return P}),n.d(t,"EOL",function(){return A}),n.d(t,"TextDocument",function(){return K}),n.d(t,"TextDocumentSaveReason",function(){return F}),function(e){e.create=function(e,t){return{line:e,character:t}},e.is=function(e){var t=e;return O.defined(t)&&O.number(t.line)&&O.number(t.character)}}(r||(r={})),function(e){e.create=function(e,t,n,i){if(O.number(e)&&O.number(t)&&O.number(n)&&O.number(i))return{start:r.create(e,t),end:r.create(n,i)};if(r.is(e)&&r.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+i+"]")},e.is=function(e){var t=e;return O.defined(t)&&r.is(t.start)&&r.is(t.end)}}(i||(i={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return O.defined(t)&&i.is(t.range)&&(O.string(t.uri)||O.undefined(t.uri))}}(o||(o={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(u||(u={})),function(e){e.create=function(e,t,n,r,i){var o={range:e,message:t};return O.defined(n)&&(o.severity=n),O.defined(r)&&(o.code=r),O.defined(i)&&(o.source=i),o},e.is=function(e){var t=e;return O.defined(t)&&i.is(t.range)&&O.string(t.message)&&(O.number(t.severity)||O.undefined(t.severity))&&(O.number(t.code)||O.string(t.code)||O.undefined(t.code))&&(O.string(t.source)||O.undefined(t.source))}}(a||(a={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={title:e,command:t};return O.defined(n)&&n.length>0&&(i.arguments=n),i},e.is=function(e){var t=e;return O.defined(t)&&O.string(t.title)&&O.string(t.title)}}(c||(c={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}}}(s||(s={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return O.defined(t)&&l.is(t.textDocument)&&Array.isArray(t.edits)}}(d||(d={}));var f,l,g,m,h,p,v,_,y,b,w,k,C,I,x,E,D,S,T=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,t){this.edits.push(s.insert(e,t))},e.prototype.replace=function(e,t){this.edits.push(s.replace(e,t))},e.prototype.delete=function(e){this.edits.push(s.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),M=function(){function e(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var n=new T(e.edits);t._textEditChanges[e.textDocument.uri]=n}):e.changes&&Object.keys(e.changes).forEach(function(n){var r=new T(e.changes[n]);t._textEditChanges[n]=r}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(l.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var t=e;if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(n),r=new T(i),this._textEditChanges[t.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new T(i),this._textEditChanges[e]=r}return r},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return O.defined(t)&&O.string(t.uri)}}(f||(f={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return O.defined(t)&&O.string(t.uri)&&O.number(t.version)}}(l||(l={})),function(e){e.create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},e.is=function(e){var t=e;return O.defined(t)&&O.string(t.uri)&&O.string(t.languageId)&&O.number(t.version)&&O.string(t.text)}}(g||(g={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(m||(m={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(h||(h={})),function(e){e.PlainText=1,e.Snippet=2}(p||(p={})),function(e){e.create=function(e){return{label:e}}}(v||(v={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(_||(_={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(y||(y={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(b||(b={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={label:e};return O.defined(t)&&(i.documentation=t),O.defined(n)?i.parameters=n:i.parameters=[],i}}(w||(w={})),function(e){e.Text=1,e.Read=2,e.Write=3}(k||(k={})),function(e){e.create=function(e,t){var n={range:e};return O.number(t)&&(n.kind=t),n}}(C||(C={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(I||(I={})),function(e){e.create=function(e,t,n,r,i){var o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o}}(x||(x={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var t=e;return O.defined(t)&&O.typedArray(t.diagnostics,a.is)}}(E||(E={})),function(e){e.create=function(e,t){var n={range:e};return O.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return O.defined(t)&&i.is(t.range)&&(O.undefined(t.command)||c.is(t.command))}}(D||(D={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return O.defined(t)&&O.number(t.tabSize)&&O.boolean(t.insertSpaces)}}(S||(S={}));var P=function(){return function(){}}();!function(e){e.create=function(e,t){return{range:e,target:t}},e.is=function(e){var t=e;return O.defined(t)&&i.is(t.range)&&(O.undefined(t.target)||O.string(t.target))}}(P||(P={}));var K,F,A=["\n","\r\n","\r"];!function(e){e.create=function(e,t,n,r){return new j(e,t,n,r)},e.is=function(e){var t=e;return!!(O.defined(t)&&O.string(t.uri)&&(O.undefined(t.languageId)||O.string(t.languageId))&&O.number(t.lineCount)&&O.func(t.getText)&&O.func(t.positionAt)&&O.func(t.offsetAt))},e.applyEdits=function(e,t){for(var n=e.getText(),r=function e(t,n){if(t.length<=1)return t;var r=t.length/2|0,i=t.slice(0,r),o=t.slice(r);e(i,n),e(o,n);for(var u=0,a=0,c=0;u<i.length&&a<o.length;){var s=n(i[u],o[a]);t[c++]=s<=0?i[u++]:o[a++]}for(;u<i.length;)t[c++]=i[u++];for(;a<o.length;)t[c++]=o[a++];return t}(t,function(e,t){return 0==e.range.start.line-t.range.start.line?e.range.start.character-t.range.start.character:0}),i=n.length,o=r.length-1;o>=0;o--){var u=r[o],a=e.offsetAt(u.range.start),c=e.offsetAt(u.range.end);if(!(c<=i))throw new Error("Ovelapping edit");n=n.substring(0,a)+u.newText+n.substring(c,n.length),i=a}return n}}(K||(K={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(F||(F={}));var O,j=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,i=t.length;if(0===i)return r.create(0,e);for(;n<i;){var o=Math.floor((n+i)/2);t[o]>e?i=o:n=o+1}var u=n-1;return r.create(u,e-t[u])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.func=function(e){return"[object Function]"===t.call(e)},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(O||(O={}))},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/htmlMode.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/htmlMode.js ***!
  \******************************************************************************************************/
/*! exports provided: setupMode */function(e,t,n){"use strict";n.r(t),n.d(t,"setupMode",function(){return o});var r=n(/*! ./workerManager.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/workerManager.js"),i=n(/*! ./languageFeatures.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/languageFeatures.js");function o(e){var t=new r.WorkerManager(e),n=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.getLanguageServiceWorker.apply(t,e)},o=e.languageId;monaco.languages.registerCompletionItemProvider(o,new i.CompletionAdapter(n)),monaco.languages.registerDocumentHighlightProvider(o,new i.DocumentHighlightAdapter(n)),monaco.languages.registerLinkProvider(o,new i.DocumentLinkAdapter(n)),"html"===o&&(monaco.languages.registerDocumentFormattingEditProvider(o,new i.DocumentFormattingEditProvider(n)),monaco.languages.registerDocumentRangeFormattingEditProvider(o,new i.DocumentRangeFormattingEditProvider(n)),new i.DiagnosticsAdapter(o,n,e))}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/languageFeatures.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/languageFeatures.js ***!
  \**************************************************************************************************************/
/*! exports provided: DiagnosticsAdapter, CompletionAdapter, DocumentHighlightAdapter, DocumentLinkAdapter, DocumentFormattingEditProvider, DocumentRangeFormattingEditProvider */function(e,t,n){"use strict";n.r(t),n.d(t,"DiagnosticsAdapter",function(){return o}),n.d(t,"CompletionAdapter",function(){return f}),n.d(t,"DocumentHighlightAdapter",function(){return l}),n.d(t,"DocumentLinkAdapter",function(){return g}),n.d(t,"DocumentFormattingEditProvider",function(){return h}),n.d(t,"DocumentRangeFormattingEditProvider",function(){return p});var r=n(/*! ./_deps/vscode-languageserver-types/main.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),i=(monaco.Uri,monaco.Range),o=function(){function e(e,t,n){var r=this;this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);var i=function(e){var t,n=e.getModeId();n===r._languageId&&(r._listener[e.uri.toString()]=e.onDidChangeContent(function(){clearTimeout(t),t=setTimeout(function(){return r._doValidate(e.uri,n)},500)}),r._doValidate(e.uri,n))},o=function(e){monaco.editor.setModelMarkers(e,r._languageId,[]);var t=e.uri.toString(),n=r._listener[t];n&&(n.dispose(),delete r._listener[t])};this._disposables.push(monaco.editor.onDidCreateModel(i)),this._disposables.push(monaco.editor.onWillDisposeModel(function(e){o(e)})),this._disposables.push(monaco.editor.onDidChangeModelLanguage(function(e){o(e.model),i(e.model)})),this._disposables.push(n.onDidChange(function(e){monaco.editor.getModels().forEach(function(e){e.getModeId()===r._languageId&&(o(e),i(e))})})),this._disposables.push({dispose:function(){for(var e in r._listener)r._listener[e].dispose()}}),monaco.editor.getModels().forEach(i)}return e.prototype.dispose=function(){this._disposables.forEach(function(e){return e&&e.dispose()}),this._disposables=[]},e.prototype._doValidate=function(e,t){this._worker(e).then(function(n){return n.doValidation(e.toString()).then(function(n){var i=n.map(function(e){return function(e,t){var n="number"==typeof t.code?String(t.code):t.code;return{severity:function(e){switch(e){case r.DiagnosticSeverity.Error:return monaco.MarkerSeverity.Error;case r.DiagnosticSeverity.Warning:return monaco.MarkerSeverity.Warning;case r.DiagnosticSeverity.Information:return monaco.MarkerSeverity.Info;case r.DiagnosticSeverity.Hint:return monaco.MarkerSeverity.Hint;default:return monaco.MarkerSeverity.Info}}(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)});monaco.editor.setModelMarkers(monaco.editor.getModel(e),t,i)})}).then(void 0,function(e){console.error(e)})},e}();function u(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function a(e){if(e)return{start:u(e.getStartPosition()),end:u(e.getEndPosition())}}function c(e){if(e)return new i(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function s(e){var t=monaco.languages.CompletionItemKind;switch(e){case r.CompletionItemKind.Text:return t.Text;case r.CompletionItemKind.Method:return t.Method;case r.CompletionItemKind.Function:return t.Function;case r.CompletionItemKind.Constructor:return t.Constructor;case r.CompletionItemKind.Field:return t.Field;case r.CompletionItemKind.Variable:return t.Variable;case r.CompletionItemKind.Class:return t.Class;case r.CompletionItemKind.Interface:return t.Interface;case r.CompletionItemKind.Module:return t.Module;case r.CompletionItemKind.Property:return t.Property;case r.CompletionItemKind.Unit:return t.Unit;case r.CompletionItemKind.Value:return t.Value;case r.CompletionItemKind.Enum:return t.Enum;case r.CompletionItemKind.Keyword:return t.Keyword;case r.CompletionItemKind.Snippet:return t.Snippet;case r.CompletionItemKind.Color:return t.Color;case r.CompletionItemKind.File:return t.File;case r.CompletionItemKind.Reference:return t.Reference}return t.Property}function d(e){if(e)return{range:c(e.range),text:e.newText}}var f=function(){function e(e){this._worker=e}return Object.defineProperty(e.prototype,"triggerCharacters",{get:function(){return[".",":","<",'"',"=","/"]},enumerable:!0,configurable:!0}),e.prototype.provideCompletionItems=function(e,t,n){e.getWordUntilPosition(t);var i=e.uri;return v(n,this._worker(i).then(function(e){return e.doComplete(i.toString(),u(t))}).then(function(e){if(e){var t=e.items.map(function(e){var t={label:e.label,insertText:e.insertText,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,kind:s(e.kind)};return e.textEdit&&(t.range=c(e.textEdit.range),t.insertText=e.textEdit.newText),e.insertTextFormat===r.InsertTextFormat.Snippet&&(t.insertText={value:t.insertText}),t});return{isIncomplete:e.isIncomplete,items:t}}}))},e}();var l=function(){function e(e){this._worker=e}return e.prototype.provideDocumentHighlights=function(e,t,n){var i=e.uri;return v(n,this._worker(i).then(function(e){return e.findDocumentHighlights(i.toString(),u(t))}).then(function(e){if(e)return e.map(function(e){return{range:c(e.range),kind:function(e){var t=monaco.languages.DocumentHighlightKind;switch(e){case r.DocumentHighlightKind.Read:return t.Read;case r.DocumentHighlightKind.Write:return t.Write;case r.DocumentHighlightKind.Text:return t.Text}return t.Text}(e.kind)}})}))},e}(),g=function(){function e(e){this._worker=e}return e.prototype.provideLinks=function(e,t){var n=e.uri;return v(t,this._worker(n).then(function(e){return e.findDocumentLinks(n.toString())}).then(function(e){if(e)return e.map(function(e){return{range:c(e.range),url:e.target}})}))},e}();function m(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var h=function(){function e(e){this._worker=e}return e.prototype.provideDocumentFormattingEdits=function(e,t,n){var r=e.uri;return v(n,this._worker(r).then(function(e){return e.format(r.toString(),null,m(t)).then(function(e){if(e&&0!==e.length)return e.map(d)})}))},e}(),p=function(){function e(e){this._worker=e}return e.prototype.provideDocumentRangeFormattingEdits=function(e,t,n,r){var i=e.uri;return v(r,this._worker(i).then(function(e){return e.format(i.toString(),a(t),m(n)).then(function(e){if(e&&0!==e.length)return e.map(d)})}))},e}();function v(e,t){return t.cancel&&e.onCancellationRequested(function(){return t.cancel()}),t}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/workerManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/html/workerManager.js ***!
  \***********************************************************************************************************/
/*! exports provided: WorkerManager */function(e,t,n){"use strict";n.r(t),n.d(t,"WorkerManager",function(){return i});var r=monaco.Promise,i=function(){function e(e){var t=this;this._defaults=e,this._worker=null,this._idleCheckInterval=setInterval(function(){return t._checkIfIdle()},3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange(function(){return t._stopWorker()})}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},e.prototype._checkIfIdle=function(){this._worker&&(Date.now()-this._lastUsedTime>12e4&&this._stopWorker())},e.prototype._getClient=function(){return this._lastUsedTime=Date.now(),this._client||(this._worker=monaco.editor.createWebWorker({moduleId:"vs/language/html/htmlWorker",createData:{languageSettings:this._defaults.options,languageId:this._defaults.languageId},label:this._defaults.languageId}),this._client=this._worker.getProxy()),this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,t=this,n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return function(e){var t,n,i=new r(function(e,r){t=e,n=r},function(){});return e.then(t,n),i}(this._getClient().then(function(t){e=t}).then(function(e){return t._worker.withSyncedResources(n)}).then(function(t){return e}))},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC9fZGVwcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC9odG1sTW9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC9sYW5ndWFnZUZlYXR1cmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb25hY28tZWRpdG9yL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9sYW5ndWFnZS9odG1sL3dvcmtlck1hbmFnZXIuanMiXSwibmFtZXMiOlsiUG9zaXRpb24iLCJSYW5nZSIsIkxvY2F0aW9uIiwiRGlhZ25vc3RpY1NldmVyaXR5IiwiRGlhZ25vc3RpYyIsIkNvbW1hbmQiLCJUZXh0RWRpdCIsIlRleHREb2N1bWVudEVkaXQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZCIsIl9fd2VicGFja19leHBvcnRzX18iLCJUZXh0RG9jdW1lbnRTYXZlUmVhc29uIiwiY3JlYXRlIiwibGluZSIsImNoYXJhY3RlciIsImlzIiwidmFsdWUiLCJjYW5kaWRhdGUiLCJJcyIsImRlZmluZWQiLCJudW1iZXIiLCJvbmUiLCJ0d28iLCJ0aHJlZSIsImZvdXIiLCJzdGFydCIsImVuZCIsIkVycm9yIiwidXJpIiwicmFuZ2UiLCJzdHJpbmciLCJ1bmRlZmluZWQiLCJXYXJuaW5nIiwiSW5mb3JtYXRpb24iLCJIaW50IiwibWVzc2FnZSIsInNldmVyaXR5IiwiY29kZSIsInNvdXJjZSIsInJlc3VsdCIsInRpdGxlIiwiY29tbWFuZCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlcGxhY2UiLCJuZXdUZXh0IiwiaW5zZXJ0IiwicG9zaXRpb24iLCJkZWwiLCJ0ZXh0RG9jdW1lbnQiLCJlZGl0cyIsIlZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIiLCJBcnJheSIsImlzQXJyYXkiLCJUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVGV4dERvY3VtZW50SXRlbSIsIk1hcmt1cEtpbmQiLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJJbnNlcnRUZXh0Rm9ybWF0IiwiQ29tcGxldGlvbkl0ZW0iLCJDb21wbGV0aW9uTGlzdCIsIk1hcmtlZFN0cmluZyIsIlBhcmFtZXRlckluZm9ybWF0aW9uIiwiU2lnbmF0dXJlSW5mb3JtYXRpb24iLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJEb2N1bWVudEhpZ2hsaWdodCIsIlN5bWJvbEtpbmQiLCJTeW1ib2xJbmZvcm1hdGlvbiIsIkNvZGVBY3Rpb25Db250ZXh0IiwiQ29kZUxlbnMiLCJGb3JtYXR0aW5nT3B0aW9ucyIsIlRleHRFZGl0Q2hhbmdlSW1wbCIsInRoaXMiLCJwcm90b3R5cGUiLCJwdXNoIiwiZGVsZXRlIiwiYWRkIiwiZWRpdCIsImFsbCIsImNsZWFyIiwic3BsaWNlIiwiV29ya3NwYWNlQ2hhbmdlIiwid29ya3NwYWNlRWRpdCIsIl90aGlzIiwiX3RleHRFZGl0Q2hhbmdlcyIsIk9iamVjdCIsIl93b3Jrc3BhY2VFZGl0IiwiZG9jdW1lbnRDaGFuZ2VzIiwiZm9yRWFjaCIsInRleHREb2N1bWVudEVkaXQiLCJ0ZXh0RWRpdENoYW5nZSIsImNoYW5nZXMiLCJrZXlzIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0VGV4dEVkaXRDaGFuZ2UiLCJ2ZXJzaW9uIiwibGFuZ3VhZ2VJZCIsInRleHQiLCJQbGFpblRleHQiLCJNYXJrZG93biIsIlRleHQiLCJNZXRob2QiLCJGdW5jdGlvbiIsIkNvbnN0cnVjdG9yIiwiRmllbGQiLCJWYXJpYWJsZSIsIkNsYXNzIiwiSW50ZXJmYWNlIiwiTW9kdWxlIiwiUHJvcGVydHkiLCJVbml0IiwiVmFsdWUiLCJFbnVtIiwiS2V5d29yZCIsIlNuaXBwZXQiLCJDb2xvciIsIkZpbGUiLCJSZWZlcmVuY2UiLCJGb2xkZXIiLCJFbnVtTWVtYmVyIiwiQ29uc3RhbnQiLCJTdHJ1Y3QiLCJFdmVudCIsIk9wZXJhdG9yIiwiVHlwZVBhcmFtZXRlciIsImxhYmVsIiwiaXRlbXMiLCJpc0luY29tcGxldGUiLCJmcm9tUGxhaW5UZXh0IiwicGxhaW5UZXh0IiwiZG9jdW1lbnRhdGlvbiIsInBhcmFtZXRlcnMiLCJSZWFkIiwiV3JpdGUiLCJraW5kIiwiTmFtZXNwYWNlIiwiUGFja2FnZSIsIlN0cmluZyIsIk51bWJlciIsIkJvb2xlYW4iLCJLZXkiLCJOdWxsIiwibmFtZSIsImNvbnRhaW5lck5hbWUiLCJsb2NhdGlvbiIsImRpYWdub3N0aWNzIiwidHlwZWRBcnJheSIsImRhdGEiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwiYm9vbGVhbiIsIkRvY3VtZW50TGluayIsInRhcmdldCIsIlRleHREb2N1bWVudCIsIkVPTCIsImNvbnRlbnQiLCJGdWxsVGV4dERvY3VtZW50IiwibGluZUNvdW50IiwiZnVuYyIsImdldFRleHQiLCJwb3NpdGlvbkF0Iiwib2Zmc2V0QXQiLCJhcHBseUVkaXRzIiwiZG9jdW1lbnQiLCJzb3J0ZWRFZGl0cyIsIm1lcmdlU29ydCIsImNvbXBhcmUiLCJwIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJsZWZ0SWR4IiwicmlnaHRJZHgiLCJpIiwicmV0IiwiYSIsImIiLCJsYXN0TW9kaWZpZWRPZmZzZXQiLCJlIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJzdWJzdHJpbmciLCJNYW51YWwiLCJBZnRlckRlbGF5IiwiRm9jdXNPdXQiLCJfdXJpIiwiX2xhbmd1YWdlSWQiLCJfdmVyc2lvbiIsIl9jb250ZW50IiwiX2xpbmVPZmZzZXRzIiwidXBkYXRlIiwiZXZlbnQiLCJnZXRMaW5lT2Zmc2V0cyIsImxpbmVPZmZzZXRzIiwiaXNMaW5lU3RhcnQiLCJjaCIsImNoYXJBdCIsIm9mZnNldCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJsb3ciLCJoaWdoIiwibWlkIiwiZmxvb3IiLCJsaW5lT2Zmc2V0IiwibmV4dExpbmVPZmZzZXQiLCJ0b1N0cmluZyIsImNhbGwiLCJjaGVjayIsImV2ZXJ5IiwiX2xhbmd1YWdlRmVhdHVyZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInNldHVwTW9kZSIsImRlZmF1bHRzIiwiY2xpZW50IiwiX3dvcmtlck1hbmFnZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIndvcmtlciIsInVyaXMiLCJnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIiLCJhcHBseSIsIm1vbmFjbyIsImxhbmd1YWdlcyIsInJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInJlZ2lzdGVyTGlua1Byb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJyZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwiX2RlcHNfdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzX21haW5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIlVyaSIsIkRpYWdub3N0aWNzQWRhcHRlciIsIl93b3JrZXIiLCJfZGlzcG9zYWJsZXMiLCJfbGlzdGVuZXIiLCJvbk1vZGVsQWRkIiwibW9kZWwiLCJoYW5kbGUiLCJtb2RlSWQiLCJnZXRNb2RlSWQiLCJvbkRpZENoYW5nZUNvbnRlbnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX2RvVmFsaWRhdGUiLCJvbk1vZGVsUmVtb3ZlZCIsImVkaXRvciIsInNldE1vZGVsTWFya2VycyIsInVyaVN0ciIsImxpc3RlbmVyIiwiZGlzcG9zZSIsIm9uRGlkQ3JlYXRlTW9kZWwiLCJvbldpbGxEaXNwb3NlTW9kZWwiLCJvbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2UiLCJvbkRpZENoYW5nZSIsIl8iLCJnZXRNb2RlbHMiLCJyZXNvdXJjZSIsInRoZW4iLCJkb1ZhbGlkYXRpb24iLCJtYXJrZXJzIiwibWFwIiwiZGlhZyIsImxzU2V2ZXJpdHkiLCJNYXJrZXJTZXZlcml0eSIsIkluZm8iLCJ0b1NldmVyaXR5Iiwic3RhcnRMaW5lTnVtYmVyIiwic3RhcnRDb2x1bW4iLCJlbmRMaW5lTnVtYmVyIiwiZW5kQ29sdW1uIiwidG9EaWFnbm9zdGljcyIsImdldE1vZGVsIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZnJvbVBvc2l0aW9uIiwiY29sdW1uIiwibGluZU51bWJlciIsImZyb21SYW5nZSIsImdldFN0YXJ0UG9zaXRpb24iLCJnZXRFbmRQb3NpdGlvbiIsInRvUmFuZ2UiLCJ0b0NvbXBsZXRpb25JdGVtS2luZCIsIm1JdGVtS2luZCIsInRvVGV4dEVkaXQiLCJ0ZXh0RWRpdCIsIkNvbXBsZXRpb25BZGFwdGVyIiwicHJvdmlkZUNvbXBsZXRpb25JdGVtcyIsInRva2VuIiwiZ2V0V29yZFVudGlsUG9zaXRpb24iLCJ3aXJlQ2FuY2VsbGF0aW9uVG9rZW4iLCJkb0NvbXBsZXRlIiwiaW5mbyIsImVudHJ5IiwiaXRlbSIsImluc2VydFRleHQiLCJzb3J0VGV4dCIsImZpbHRlclRleHQiLCJkZXRhaWwiLCJpbnNlcnRUZXh0Rm9ybWF0IiwiRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyIiwicHJvdmlkZURvY3VtZW50SGlnaGxpZ2h0cyIsImZpbmREb2N1bWVudEhpZ2hsaWdodHMiLCJtS2luZCIsInRvSGlnaGxpZ2hLaW5kIiwiRG9jdW1lbnRMaW5rQWRhcHRlciIsInByb3ZpZGVMaW5rcyIsImZpbmREb2N1bWVudExpbmtzIiwidXJsIiwiZnJvbUZvcm1hdHRpbmdPcHRpb25zIiwib3B0aW9ucyIsIkRvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlciIsInByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyIsImZvcm1hdCIsIkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicHJvdmlkZURvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdHMiLCJwcm9taXNlIiwiY2FuY2VsIiwib25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJXb3JrZXJNYW5hZ2VyIiwiUHJvbWlzZSIsIl9kZWZhdWx0cyIsIl9pZGxlQ2hlY2tJbnRlcnZhbCIsInNldEludGVydmFsIiwiX2NoZWNrSWZJZGxlIiwiX2xhc3RVc2VkVGltZSIsIl9jb25maWdDaGFuZ2VMaXN0ZW5lciIsIl9zdG9wV29ya2VyIiwiX2NsaWVudCIsImNsZWFySW50ZXJ2YWwiLCJEYXRlIiwibm93IiwiX2dldENsaWVudCIsImNyZWF0ZVdlYldvcmtlciIsIm1vZHVsZUlkIiwiY3JlYXRlRGF0YSIsImxhbmd1YWdlU2V0dGluZ3MiLCJnZXRQcm94eSIsInJlc291cmNlcyIsImNvbXBsZXRlQ2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwiciIsImMiLCJ0b1NoYWxsb3dDYW5jZWxQcm9taXNlIiwid2l0aFN5bmNlZFJlc291cmNlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs4aUJBU0EsSUFBQUEsRUF3QkFDLEVBMkJBQyxFQXVCQUMsRUF1QkFDLEVBcUNBQyxFQThCQUMsRUFpQ0FDLGkxQ0E5TUFDLEVBQUFDLEVBQUFDLEVBQUEsMkNBQUFDLElBVUEsU0FBQVgsR0FTQUEsRUFBQVksT0FIQSxTQUFBQyxFQUFBQyxHQUNBLE9BQWdCRCxPQUFBQyxjQVVoQmQsRUFBQWUsR0FKQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQ0EsT0FBQUUsRUFBQUMsUUFBQUYsSUFBQUMsRUFBQUUsT0FBQUgsRUFBQUosT0FBQUssRUFBQUUsT0FBQUgsRUFBQUgsWUFmQSxDQWtCQ2QsV0FNRCxTQUFBQyxHQVlBQSxFQUFBVyxPQVhBLFNBQUFT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QixNQUFBekQsS0FBQTJQLFVBQUEvTixhQUVBNUIsS0FBQWtRLFFBQUFsUSxLQUFBa0ssUUFBQXlHLFlBRUEzUSxLQUFBa1EsU0FFQVQsRUFBQXhQLFVBQUFxSix5QkFBQSxXQUdBLElBRkEsSUFLQTRHLEVBTEF2UCxFQUFBWCxLQUNBNFEsS0FDQTNTLEVBQUEsRUFBd0JBLEVBQUFDLFVBQUFDLE9BQXVCRixJQUMvQzJTLEVBQUEzUyxHQUFBQyxVQUFBRCxHQUdBLE9BU0EsU0FBQWtJLEdBQ0EsSUFBQTBLLEVBQ0FDLEVBQ0FDLEVBQUEsSUFBQXJCLEVBQUEsU0FBQXNCLEVBQUFsSyxHQUNBK0osRUFBQUcsRUFDQUYsRUFBQWhLLEdBQ0ssY0FFTCxPQURBWCxFQUFBd0YsS0FBQWtGLEVBQUFDLEdBQ0FDLEVBakJBRSxDQUFBalIsS0FBQXNRLGFBQUEzRSxLQUFBLFNBQUF6QyxHQUNBZ0gsRUFBQWhILElBQ1N5QyxLQUFBLFNBQUFILEdBQ1QsT0FBQTdLLEVBQUF1SixRQUFBZ0gsb0JBQUFOLEtBQ1NqRixLQUFBLFNBQUFILEdBQXFCLE9BQUEwRSxNQUU5QlQsRUE1REEiLCJmaWxlIjoiMzUuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBUaGUgUG9zaXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbUG9zaXRpb25dKCNQb3NpdGlvbikgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgUG9zaXRpb247XG4oZnVuY3Rpb24gKFBvc2l0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBQb3NpdGlvbiBsaXRlcmFsIGZyb20gdGhlIGdpdmVuIGxpbmUgYW5kIGNoYXJhY3Rlci5cbiAgICAgKiBAcGFyYW0gbGluZSBUaGUgcG9zaXRpb24ncyBsaW5lLlxuICAgICAqIEBwYXJhbSBjaGFyYWN0ZXIgVGhlIHBvc2l0aW9uJ3MgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsaW5lLCBjaGFyYWN0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHsgbGluZTogbGluZSwgY2hhcmFjdGVyOiBjaGFyYWN0ZXIgfTtcbiAgICB9XG4gICAgUG9zaXRpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcm5hbCBjb25mb3JtcyB0byB0aGUgW1Bvc2l0aW9uXSgjUG9zaXRpb24pIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5saW5lKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XG4gICAgfVxuICAgIFBvc2l0aW9uLmlzID0gaXM7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgUmFuZ2UgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbUmFuZ2VdKCNSYW5nZSkgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgUmFuZ2U7XG4oZnVuY3Rpb24gKFJhbmdlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKG9uZSwgdHdvLCB0aHJlZSwgZm91cikge1xuICAgICAgICBpZiAoSXMubnVtYmVyKG9uZSkgJiYgSXMubnVtYmVyKHR3bykgJiYgSXMubnVtYmVyKHRocmVlKSAmJiBJcy5udW1iZXIoZm91cikpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBQb3NpdGlvbi5jcmVhdGUob25lLCB0d28pLCBlbmQ6IFBvc2l0aW9uLmNyZWF0ZSh0aHJlZSwgZm91cikgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChQb3NpdGlvbi5pcyhvbmUpICYmIFBvc2l0aW9uLmlzKHR3bykpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBvbmUsIGVuZDogdHdvIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbXCIgKyBvbmUgKyBcIiwgXCIgKyB0d28gKyBcIiwgXCIgKyB0aHJlZSArIFwiLCBcIiArIGZvdXIgKyBcIl1cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbUmFuZ2VdKCNSYW5nZSkgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUuc3RhcnQpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5lbmQpO1xuICAgIH1cbiAgICBSYW5nZS5pcyA9IGlzO1xufSkoUmFuZ2UgfHwgKFJhbmdlID0ge30pKTtcbi8qKlxuICogVGhlIExvY2F0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0xvY2F0aW9uXSgjTG9jYXRpb24pIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIExvY2F0aW9uO1xuKGZ1bmN0aW9uIChMb2NhdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBMb2NhdGlvbiBsaXRlcmFsLlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGxvY2F0aW9uJ3MgdXJpLlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgbG9jYXRpb24ncyByYW5nZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCByYW5nZSkge1xuICAgICAgICByZXR1cm4geyB1cmk6IHVyaSwgcmFuZ2U6IHJhbmdlIH07XG4gICAgfVxuICAgIExvY2F0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0xvY2F0aW9uXSgjTG9jYXRpb24pIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XG4gICAgfVxuICAgIExvY2F0aW9uLmlzID0gaXM7XG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlhZ25vc3RpYydzIHNlcnZlcml0eS5cbiAqL1xuZXhwb3J0IHZhciBEaWFnbm9zdGljU2V2ZXJpdHk7XG4oZnVuY3Rpb24gKERpYWdub3N0aWNTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGEgd2FybmluZy5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyA9IDI7XG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24gPSAzO1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYSBoaW50LlxuICAgICAqL1xuICAgIERpYWdub3N0aWNTZXZlcml0eS5IaW50ID0gNDtcbn0pKERpYWdub3N0aWNTZXZlcml0eSB8fCAoRGlhZ25vc3RpY1NldmVyaXR5ID0ge30pKTtcbi8qKlxuICogVGhlIERpYWdub3N0aWMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbRGlhZ25vc3RpY10oI0RpYWdub3N0aWMpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIERpYWdub3N0aWM7XG4oZnVuY3Rpb24gKERpYWdub3N0aWMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IERpYWdub3N0aWMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIG1lc3NhZ2UsIHNldmVyaXR5LCBjb2RlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2U6IHJhbmdlLCBtZXNzYWdlOiBtZXNzYWdlIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHNldmVyaXR5KSkge1xuICAgICAgICAgICAgcmVzdWx0LnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29kZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb2RlID0gY29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIERpYWdub3N0aWMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbRGlhZ25vc3RpY10oI0RpYWdub3N0aWMpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSlcbiAgICAgICAgICAgICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSlcbiAgICAgICAgICAgICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuY29kZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlKSlcbiAgICAgICAgICAgICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnNvdXJjZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zb3VyY2UpKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpYy5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21tYW5kIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0NvbW1hbmRdKCNDb21tYW5kKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBDb21tYW5kO1xuKGZ1bmN0aW9uIChDb21tYW5kKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb21tYW5kIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBjb21tYW5kKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHRpdGxlOiB0aXRsZSwgY29tbWFuZDogY29tbWFuZCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5hcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvbW1hbmQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbQ29tbWFuZF0oI0NvbW1hbmQpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSk7XG4gICAgfVxuICAgIENvbW1hbmQuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVGV4dEVkaXQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgcmVwbGFjZSxcbiAqIGluc2VydCBhbmQgZGVsZXRlIGVkaXRzIG1vcmUgZWFzaWx5LlxuICovXG5leHBvcnQgdmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uIChUZXh0RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIG5ld1RleHQgVGhlIG5ldyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCBuZXdUZXh0OiBuZXdUZXh0IH07XG4gICAgfVxuICAgIFRleHRFZGl0LnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBpbnNlcnQgdGV4dCBlZGl0LlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcG9zaXRpb24gdG8gaW5zZXJ0IHRoZSB0ZXh0IGF0LlxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSB0ZXh0IHRvIGJlIGluc2VydGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dDogbmV3VGV4dCB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlbGV0ZSB0ZXh0IGVkaXQuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0ZXh0IHRvIGJlIGRlbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgbmV3VGV4dDogJycgfTtcbiAgICB9XG4gICAgVGV4dEVkaXQuZGVsID0gZGVsO1xufSkoVGV4dEVkaXQgfHwgKFRleHRFZGl0ID0ge30pKTtcbi8qKlxuICogVGhlIFRleHREb2N1bWVudEVkaXQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGVcbiAqIGFuIGVkaXQgdGhhdCBtYW5pcHVsYXRlcyBhIHRleHQgZG9jdW1lbnQuXG4gKi9cbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50RWRpdDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFRleHREb2N1bWVudEVkaXRgXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRleHREb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnQsIGVkaXRzOiBlZGl0cyB9O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRFZGl0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudClcbiAgICAgICAgICAgICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmVkaXRzKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50RWRpdC5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RWRpdCB8fCAoVGV4dERvY3VtZW50RWRpdCA9IHt9KSk7XG52YXIgVGV4dEVkaXRDaGFuZ2VJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRleHRFZGl0Q2hhbmdlSW1wbChlZGl0cykge1xuICAgICAgICB0aGlzLmVkaXRzID0gZWRpdHM7XG4gICAgfVxuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBuZXdUZXh0KSB7XG4gICAgICAgIHRoaXMuZWRpdHMucHVzaChUZXh0RWRpdC5pbnNlcnQocG9zaXRpb24sIG5ld1RleHQpKTtcbiAgICB9O1xuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChyYW5nZSwgbmV3VGV4dCkge1xuICAgICAgICB0aGlzLmVkaXRzLnB1c2goVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCkpO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKFRleHRFZGl0LmRlbChyYW5nZSkpO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZWRpdCkge1xuICAgICAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgfTtcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdHM7XG4gICAgfTtcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVkaXRzLnNwbGljZSgwLCB0aGlzLmVkaXRzLmxlbmd0aCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGV4dEVkaXRDaGFuZ2VJbXBsO1xufSgpKTtcbi8qKlxuICogQSB3b3Jrc3BhY2UgY2hhbmdlIGhlbHBzIGNvbnN0cnVjdGluZyBjaGFuZ2VzIHRvIGEgd29ya3NwYWNlLlxuICovXG52YXIgV29ya3NwYWNlQ2hhbmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdvcmtzcGFjZUNoYW5nZSh3b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0gd29ya3NwYWNlRWRpdDtcbiAgICAgICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKHRleHREb2N1bWVudEVkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRFZGl0Q2hhbmdlID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbCh0ZXh0RG9jdW1lbnRFZGl0LmVkaXRzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RleHRFZGl0Q2hhbmdlc1t0ZXh0RG9jdW1lbnRFZGl0LnRleHREb2N1bWVudC51cmldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3b3Jrc3BhY2VFZGl0LmNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh3b3Jrc3BhY2VFZGl0LmNoYW5nZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dEVkaXRDaGFuZ2UgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKHdvcmtzcGFjZUVkaXQuY2hhbmdlc1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdvcmtzcGFjZUNoYW5nZS5wcm90b3R5cGUsIFwiZWRpdFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIFtXb3Jrc3BhY2VFZGl0XSgjV29ya3NwYWNlRWRpdCkgbGl0ZXJhbFxuICAgICAgICAgKiB1c2UgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIHdvcmtzcGFjZSBlZGl0IG9wZXJhdGlvbiBsaWtlIHJlbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzcGFjZUVkaXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFdvcmtzcGFjZUNoYW5nZS5wcm90b3R5cGUuZ2V0VGV4dEVkaXRDaGFuZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzKGtleSkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fd29ya3NwYWNlRWRpdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q2hhbmdlczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIHZlcnNpb25lZCBkb2N1bWVudCBjaGFuZ2VzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRleHREb2N1bWVudCA9IGtleTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhciBlZGl0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0RG9jdW1lbnRFZGl0ID0ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgZWRpdHM6IGVkaXRzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKHRleHREb2N1bWVudEVkaXQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1t0ZXh0RG9jdW1lbnQudXJpXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dvcmtzcGFjZUVkaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0ge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3Igbm9ybWFsIHRleHQgZWRpdCBjaGFuZ2VzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSA9IGVkaXRzO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFdvcmtzcGFjZUNoYW5nZTtcbn0oKSk7XG5leHBvcnQgeyBXb3Jrc3BhY2VDaGFuZ2UgfTtcbi8qKlxuICogVGhlIFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbVGV4dERvY3VtZW50SWRlbnRpZmllcl0oI1RleHREb2N1bWVudElkZW50aWZpZXIpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudElkZW50aWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpKSB7XG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpIH07XG4gICAgfVxuICAgIFRleHREb2N1bWVudElkZW50aWZpZXIuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbVGV4dERvY3VtZW50SWRlbnRpZmllcl0oI1RleHREb2N1bWVudElkZW50aWZpZXIpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcbi8qKlxuICogVGhlIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcl0oI1ZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24gKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4geyB1cmk6IHVyaSwgdmVyc2lvbjogdmVyc2lvbiB9O1xuICAgIH1cbiAgICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1ZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJdKCNWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLnZlcnNpb24pO1xuICAgIH1cbiAgICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzID0gaXM7XG59KShWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcbi8qKlxuICogVGhlIFRleHREb2N1bWVudEl0ZW0gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbVGV4dERvY3VtZW50SXRlbV0oI1RleHREb2N1bWVudEl0ZW0pIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIFRleHREb2N1bWVudEl0ZW07XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEl0ZW0pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudEl0ZW0gbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBpZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24gbnVtYmVyLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBkb2N1bWVudCdzIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCkge1xuICAgICAgICByZXR1cm4geyB1cmk6IHVyaSwgbGFuZ3VhZ2VJZDogbGFuZ3VhZ2VJZCwgdmVyc2lvbjogdmVyc2lvbiwgdGV4dDogdGV4dCB9O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRJdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1RleHREb2N1bWVudEl0ZW1dKCNUZXh0RG9jdW1lbnRJdGVtKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLm51bWJlcihjYW5kaWRhdGUudmVyc2lvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50ZXh0KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SXRlbS5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SXRlbSB8fCAoVGV4dERvY3VtZW50SXRlbSA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgY29udGVudCB0eXBlIHRoYXQgYSBjbGllbnQgc3VwcG9ydHMgaW4gdmFyaW91c1xuICogcmVzdWx0IGxpdGVyYWxzIGxpa2UgYEhvdmVyYCwgYFBhcmFtZXRlckluZm9gIG9yIGBDb21wbGV0aW9uSXRlbWAuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBgTWFya3VwS2luZHNgIG11c3Qgbm90IHN0YXJ0IHdpdGggYSBgJGAuIFRoaXMga2luZHNcbiAqIGFyZSByZXNlcnZlZCBmb3IgaW50ZXJuYWwgdXNhZ2UuXG4gKi9cbmV4cG9ydCB2YXIgTWFya3VwS2luZDtcbihmdW5jdGlvbiAoTWFya3VwS2luZCkge1xuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHQgaXMgc3VwcG9ydGVkIGFzIGEgY29udGVudCBmb3JtYXRcbiAgICAgKi9cbiAgICBNYXJrdXBLaW5kLlBsYWluVGV4dCA9ICdwbGFpbnRleHQnO1xuICAgIC8qKlxuICAgICAqIE1hcmtkb3duIGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XG4gICAgICovXG4gICAgTWFya3VwS2luZC5NYXJrZG93biA9ICdtYXJrZG93bic7XG59KShNYXJrdXBLaW5kIHx8IChNYXJrdXBLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGtpbmQgb2YgYSBjb21wbGV0aW9uIGVudHJ5LlxuICovXG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgPSAxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2QgPSAyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiA9IDM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yID0gNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgPSA1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSA9IDY7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzID0gNztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlID0gODtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlID0gOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgPSAxMDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCA9IDExO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSA9IDEyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5FbnVtID0gMTM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgPSAxNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCA9IDE1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db2xvciA9IDE2O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GaWxlID0gMTc7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSA9IDE4O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIgPSAxOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciA9IDIwO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdGFudCA9IDIxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgPSAyMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgPSAyMztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuT3BlcmF0b3IgPSAyNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciA9IDI1O1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGluc2VydCB0ZXh0IGluIGEgY29tcGxldGlvbiBpdGVtIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICogcGxhaW4gdGV4dCBvciBhIHNuaXBwZXQuXG4gKi9cbmV4cG9ydCB2YXIgSW5zZXJ0VGV4dEZvcm1hdDtcbihmdW5jdGlvbiAoSW5zZXJ0VGV4dEZvcm1hdCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBwcmltYXJ5IHRleHQgdG8gYmUgaW5zZXJ0ZWQgaXMgdHJlYXRlZCBhcyBhIHBsYWluIHN0cmluZy5cbiAgICAgKi9cbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlBsYWluVGV4dCA9IDE7XG4gICAgLyoqXG4gICAgICogVGhlIHByaW1hcnkgdGV4dCB0byBiZSBpbnNlcnRlZCBpcyB0cmVhdGVkIGFzIGEgc25pcHBldC5cbiAgICAgKlxuICAgICAqIEEgc25pcHBldCBjYW4gZGVmaW5lIHRhYiBzdG9wcyBhbmQgcGxhY2Vob2xkZXJzIHdpdGggYCQxYCwgYCQyYFxuICAgICAqIGFuZCBgJHszOmZvb31gLiBgJDBgIGRlZmluZXMgdGhlIGZpbmFsIHRhYiBzdG9wLCBpdCBkZWZhdWx0cyB0b1xuICAgICAqIHRoZSBlbmQgb2YgdGhlIHNuaXBwZXQuIFBsYWNlaG9sZGVycyB3aXRoIGVxdWFsIGlkZW50aWZpZXJzIGFyZSBsaW5rZWQsXG4gICAgICogdGhhdCBpcyB0eXBpbmcgaW4gb25lIHdpbGwgdXBkYXRlIG90aGVycyB0b28uXG4gICAgICpcbiAgICAgKiBTZWUgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC92c2NvZGUvYmxvYi9tYXN0ZXIvc3JjL3ZzL2VkaXRvci9jb250cmliL3NuaXBwZXQvY29tbW9uL3NuaXBwZXQubWRcbiAgICAgKi9cbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQgPSAyO1xufSkoSW5zZXJ0VGV4dEZvcm1hdCB8fCAoSW5zZXJ0VGV4dEZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21wbGV0aW9uSXRlbSBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxuICogY29tcGxldGlvbiBpdGVtcy5cbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbTtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW0pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb21wbGV0aW9uIGl0ZW0gYW5kIHNlZWQgaXQgd2l0aCBhIGxhYmVsLlxuICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgY29tcGxldGlvbiBpdGVtJ3MgbGFiZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHsgbGFiZWw6IGxhYmVsIH07XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25JdGVtIHx8IChDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21wbGV0aW9uTGlzdCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxuICogY29tcGxldGlvbiBsaXN0cy5cbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uTGlzdDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkxpc3QpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbXBsZXRpb24gbGlzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVtcyBUaGUgY29tcGxldGlvbiBpdGVtcy5cbiAgICAgKiBAcGFyYW0gaXNJbmNvbXBsZXRlIFRoZSBsaXN0IGlzIG5vdCBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoaXRlbXMsIGlzSW5jb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4geyBpdGVtczogaXRlbXMgPyBpdGVtcyA6IFtdLCBpc0luY29tcGxldGU6ICEhaXNJbmNvbXBsZXRlIH07XG4gICAgfVxuICAgIENvbXBsZXRpb25MaXN0LmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25MaXN0IHx8IChDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG5leHBvcnQgdmFyIE1hcmtlZFN0cmluZztcbihmdW5jdGlvbiAoTWFya2VkU3RyaW5nKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcmtlZCBzdHJpbmcgZnJvbSBwbGFpbiB0ZXh0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBsYWluVGV4dCBUaGUgcGxhaW4gdGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGxhaW5UZXh0KHBsYWluVGV4dCkge1xuICAgICAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKTsgLy8gZXNjYXBlIG1hcmtkb3duIHN5bnRheCB0b2tlbnM6IGh0dHA6Ly9kYXJpbmdmaXJlYmFsbC5uZXQvcHJvamVjdHMvbWFya2Rvd24vc3ludGF4I2JhY2tzbGFzaFxuICAgIH1cbiAgICBNYXJrZWRTdHJpbmcuZnJvbVBsYWluVGV4dCA9IGZyb21QbGFpblRleHQ7XG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XG4vKipcbiAqIFRoZSBQYXJhbWV0ZXJJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtQYXJhbWV0ZXJJbmZvcm1hdGlvbl0oI1BhcmFtZXRlckluZm9ybWF0aW9uKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBQYXJhbWV0ZXJJbmZvcm1hdGlvbjtcbihmdW5jdGlvbiAoUGFyYW1ldGVySW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHBhcmFtZXRlciBpbmZvcm1hdGlvbiBsaXRlcmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhYmVsIEEgbGFiZWwgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudGF0aW9uIEEgZG9jIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50YXRpb24gPyB7IGxhYmVsOiBsYWJlbCwgZG9jdW1lbnRhdGlvbjogZG9jdW1lbnRhdGlvbiB9IDogeyBsYWJlbDogbGFiZWwgfTtcbiAgICB9XG4gICAgUGFyYW1ldGVySW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIDtcbn0pKFBhcmFtZXRlckluZm9ybWF0aW9uIHx8IChQYXJhbWV0ZXJJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBTaWduYXR1cmVJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtTaWduYXR1cmVJbmZvcm1hdGlvbl0oI1NpZ25hdHVyZUluZm9ybWF0aW9uKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBTaWduYXR1cmVJbmZvcm1hdGlvbjtcbihmdW5jdGlvbiAoU2lnbmF0dXJlSW5mb3JtYXRpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcbiAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgbGFiZWw6IGxhYmVsIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGRvY3VtZW50YXRpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQuZG9jdW1lbnRhdGlvbiA9IGRvY3VtZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQocGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgU2lnbmF0dXJlSW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xufSkoU2lnbmF0dXJlSW5mb3JtYXRpb24gfHwgKFNpZ25hdHVyZUluZm9ybWF0aW9uID0ge30pKTtcbi8qKlxuICogQSBkb2N1bWVudCBoaWdobGlnaHQga2luZC5cbiAqL1xuZXhwb3J0IHZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0S2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgdGV4dHVhbCBvY2N1cnJhbmNlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogRG9jdW1lbnRIaWdobGlnaHQgbmFtZXNwYWNlIHRvIHByb3ZpZGUgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtEb2N1bWVudEhpZ2hsaWdodF0oI0RvY3VtZW50SGlnaGxpZ2h0KSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBEb2N1bWVudEhpZ2hsaWdodCBvYmplY3QuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0aGUgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSB9O1xuICAgICAgICBpZiAoSXMubnVtYmVyKGtpbmQpKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRG9jdW1lbnRIaWdobGlnaHQuY3JlYXRlID0gY3JlYXRlO1xufSkoRG9jdW1lbnRIaWdobGlnaHQgfHwgKERvY3VtZW50SGlnaGxpZ2h0ID0ge30pKTtcbi8qKlxuICogQSBzeW1ib2wga2luZC5cbiAqL1xuZXhwb3J0IHZhciBTeW1ib2xLaW5kO1xuKGZ1bmN0aW9uIChTeW1ib2xLaW5kKSB7XG4gICAgU3ltYm9sS2luZC5GaWxlID0gMTtcbiAgICBTeW1ib2xLaW5kLk1vZHVsZSA9IDI7XG4gICAgU3ltYm9sS2luZC5OYW1lc3BhY2UgPSAzO1xuICAgIFN5bWJvbEtpbmQuUGFja2FnZSA9IDQ7XG4gICAgU3ltYm9sS2luZC5DbGFzcyA9IDU7XG4gICAgU3ltYm9sS2luZC5NZXRob2QgPSA2O1xuICAgIFN5bWJvbEtpbmQuUHJvcGVydHkgPSA3O1xuICAgIFN5bWJvbEtpbmQuRmllbGQgPSA4O1xuICAgIFN5bWJvbEtpbmQuQ29uc3RydWN0b3IgPSA5O1xuICAgIFN5bWJvbEtpbmQuRW51bSA9IDEwO1xuICAgIFN5bWJvbEtpbmQuSW50ZXJmYWNlID0gMTE7XG4gICAgU3ltYm9sS2luZC5GdW5jdGlvbiA9IDEyO1xuICAgIFN5bWJvbEtpbmQuVmFyaWFibGUgPSAxMztcbiAgICBTeW1ib2xLaW5kLkNvbnN0YW50ID0gMTQ7XG4gICAgU3ltYm9sS2luZC5TdHJpbmcgPSAxNTtcbiAgICBTeW1ib2xLaW5kLk51bWJlciA9IDE2O1xuICAgIFN5bWJvbEtpbmQuQm9vbGVhbiA9IDE3O1xuICAgIFN5bWJvbEtpbmQuQXJyYXkgPSAxODtcbiAgICBTeW1ib2xLaW5kLk9iamVjdCA9IDE5O1xuICAgIFN5bWJvbEtpbmQuS2V5ID0gMjA7XG4gICAgU3ltYm9sS2luZC5OdWxsID0gMjE7XG4gICAgU3ltYm9sS2luZC5FbnVtTWVtYmVyID0gMjI7XG4gICAgU3ltYm9sS2luZC5TdHJ1Y3QgPSAyMztcbiAgICBTeW1ib2xLaW5kLkV2ZW50ID0gMjQ7XG4gICAgU3ltYm9sS2luZC5PcGVyYXRvciA9IDI1O1xuICAgIFN5bWJvbEtpbmQuVHlwZVBhcmFtZXRlciA9IDI2O1xufSkoU3ltYm9sS2luZCB8fCAoU3ltYm9sS2luZCA9IHt9KSk7XG5leHBvcnQgdmFyIFN5bWJvbEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChTeW1ib2xJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3ltYm9sIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBraW5kIFRoZSBraW5kIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2Ygc3ltYm9sLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gY29udGFpbmVyTmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sIGNvbnRhaW5nIHRoZSBzeW1ib2wuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGtpbmQsIHJhbmdlLCB1cmksIGNvbnRhaW5lck5hbWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgICAgbG9jYXRpb246IHsgdXJpOiB1cmksIHJhbmdlOiByYW5nZSB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChjb250YWluZXJOYW1lKSB7XG4gICAgICAgICAgICByZXN1bHQuY29udGFpbmVyTmFtZSA9IGNvbnRhaW5lck5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgU3ltYm9sSW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xufSkoU3ltYm9sSW5mb3JtYXRpb24gfHwgKFN5bWJvbEluZm9ybWF0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVBY3Rpb25Db250ZXh0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0NvZGVBY3Rpb25Db250ZXh0XSgjQ29kZUFjdGlvbkNvbnRleHQpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIENvZGVBY3Rpb25Db250ZXh0O1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uQ29udGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUFjdGlvbkNvbnRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoZGlhZ25vc3RpY3MpIHtcbiAgICAgICAgcmV0dXJuIHsgZGlhZ25vc3RpY3M6IGRpYWdub3N0aWNzIH07XG4gICAgfVxuICAgIENvZGVBY3Rpb25Db250ZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0NvZGVBY3Rpb25Db250ZXh0XSgjQ29kZUFjdGlvbkNvbnRleHQpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpO1xuICAgIH1cbiAgICBDb2RlQWN0aW9uQ29udGV4dC5pcyA9IGlzO1xufSkoQ29kZUFjdGlvbkNvbnRleHQgfHwgKENvZGVBY3Rpb25Db250ZXh0ID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVMZW5zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0NvZGVMZW5zXSgjQ29kZUxlbnMpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uIChDb2RlTGVucykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUxlbnMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2U6IHJhbmdlIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGRhdGEpKVxuICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb2RlTGVucy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtDb2RlTGVuc10oI0NvZGVMZW5zKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29tbWFuZCkgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpO1xuICAgIH1cbiAgICBDb2RlTGVucy5pcyA9IGlzO1xufSkoQ29kZUxlbnMgfHwgKENvZGVMZW5zID0ge30pKTtcbi8qKlxuICogVGhlIEZvcm1hdHRpbmdPcHRpb25zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0Zvcm1hdHRpbmdPcHRpb25zXSgjRm9ybWF0dGluZ09wdGlvbnMpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIEZvcm1hdHRpbmdPcHRpb25zO1xuKGZ1bmN0aW9uIChGb3JtYXR0aW5nT3B0aW9ucykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRm9ybWF0dGluZ09wdGlvbnMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodGFiU2l6ZSwgaW5zZXJ0U3BhY2VzKSB7XG4gICAgICAgIHJldHVybiB7IHRhYlNpemU6IHRhYlNpemUsIGluc2VydFNwYWNlczogaW5zZXJ0U3BhY2VzIH07XG4gICAgfVxuICAgIEZvcm1hdHRpbmdPcHRpb25zLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0Zvcm1hdHRpbmdPcHRpb25zXSgjRm9ybWF0dGluZ09wdGlvbnMpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS50YWJTaXplKSAmJiBJcy5ib29sZWFuKGNhbmRpZGF0ZS5pbnNlcnRTcGFjZXMpO1xuICAgIH1cbiAgICBGb3JtYXR0aW5nT3B0aW9ucy5pcyA9IGlzO1xufSkoRm9ybWF0dGluZ09wdGlvbnMgfHwgKEZvcm1hdHRpbmdPcHRpb25zID0ge30pKTtcbi8qKlxuICogQSBkb2N1bWVudCBsaW5rIGlzIGEgcmFuZ2UgaW4gYSB0ZXh0IGRvY3VtZW50IHRoYXQgbGlua3MgdG8gYW4gaW50ZXJuYWwgb3IgZXh0ZXJuYWwgcmVzb3VyY2UsIGxpa2UgYW5vdGhlclxuICogdGV4dCBkb2N1bWVudCBvciBhIHdlYiBzaXRlLlxuICovXG52YXIgRG9jdW1lbnRMaW5rID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50TGluaygpIHtcbiAgICB9XG4gICAgcmV0dXJuIERvY3VtZW50TGluaztcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudExpbmsgfTtcbi8qKlxuICogVGhlIERvY3VtZW50TGluayBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtEb2N1bWVudExpbmtdKCNEb2N1bWVudExpbmspIGxpdGVyYWxzLlxuICovXG4oZnVuY3Rpb24gKERvY3VtZW50TGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRG9jdW1lbnRMaW5rIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCB0YXJnZXQ6IHRhcmdldCB9O1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbRG9jdW1lbnRMaW5rXSgjRG9jdW1lbnRMaW5rKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbmV4cG9ydCB2YXIgRU9MID0gWydcXG4nLCAnXFxyXFxuJywgJ1xcciddO1xuZXhwb3J0IHZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSVRleHREb2N1bWVudCBsaXRlcmFsIGZyb20gdGhlIGdpdmVuIHVyaSBhbmQgY29udGVudC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCAgVGhlIGRvY3VtZW50J3MgbGFuZ3VhZ2UgSWQuXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGRvY3VtZW50J3MgY29udGVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVsbFRleHREb2N1bWVudCh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbSVRleHREb2N1bWVudF0oI0lUZXh0RG9jdW1lbnQpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmxhbmd1YWdlSWQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkpICYmIElzLm51bWJlcihjYW5kaWRhdGUubGluZUNvdW50KVxuICAgICAgICAgICAgJiYgSXMuZnVuYyhjYW5kaWRhdGUuZ2V0VGV4dCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUucG9zaXRpb25BdCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUub2Zmc2V0QXQpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBhcHBseUVkaXRzKGRvY3VtZW50LCBlZGl0cykge1xuICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcbiAgICAgICAgdmFyIHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0KGVkaXRzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gdGV4dC5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSBzb3J0ZWRFZGl0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGUgPSBzb3J0ZWRFZGl0c1tpXTtcbiAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIGlmIChlbmRPZmZzZXQgPD0gbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KSArIGUubmV3VGV4dCArIHRleHQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdmVsYXBwaW5nIGVkaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG4gICAgZnVuY3Rpb24gbWVyZ2VTb3J0KGRhdGEsIGNvbXBhcmUpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIC8vIHNvcnRlZFxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHAgPSAoZGF0YS5sZW5ndGggLyAyKSB8IDA7XG4gICAgICAgIHZhciBsZWZ0ID0gZGF0YS5zbGljZSgwLCBwKTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgICAgICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgICAgICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICAgICAgICB2YXIgbGVmdElkeCA9IDA7XG4gICAgICAgIHZhciByaWdodElkeCA9IDA7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHJldCA9IGNvbXBhcmUobGVmdFtsZWZ0SWR4XSwgcmlnaHRbcmlnaHRJZHhdKTtcbiAgICAgICAgICAgIGlmIChyZXQgPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZ3JlYXRlciAtPiB0YWtlIHJpZ2h0XG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufSkoVGV4dERvY3VtZW50IHx8IChUZXh0RG9jdW1lbnQgPSB7fSkpO1xuLyoqXG4gKiBSZXByZXNlbnRzIHJlYXNvbnMgd2h5IGEgdGV4dCBkb2N1bWVudCBpcyBzYXZlZC5cbiAqL1xuZXhwb3J0IHZhciBUZXh0RG9jdW1lbnRTYXZlUmVhc29uO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRTYXZlUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgdHJpZ2dlcmVkLCBlLmcuIGJ5IHRoZSB1c2VyIHByZXNzaW5nIHNhdmUsIGJ5IHN0YXJ0aW5nIGRlYnVnZ2luZyxcbiAgICAgKiBvciBieSBhbiBBUEkgY2FsbC5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTYXZlUmVhc29uLk1hbnVhbCA9IDE7XG4gICAgLyoqXG4gICAgICogQXV0b21hdGljIGFmdGVyIGEgZGVsYXkuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5BZnRlckRlbGF5ID0gMjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlZGl0b3IgbG9zdCBmb2N1cy5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTYXZlUmVhc29uLkZvY3VzT3V0ID0gMztcbn0pKFRleHREb2N1bWVudFNhdmVSZWFzb24gfHwgKFRleHREb2N1bWVudFNhdmVSZWFzb24gPSB7fSkpO1xudmFyIEZ1bGxUZXh0RG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnVsbFRleHREb2N1bWVudCh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5fdXJpID0gdXJpO1xuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJ1cmlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsYW5ndWFnZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLCBcInZlcnNpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGV2ZW50LCB2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBldmVudC50ZXh0O1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBudWxsO1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUuZ2V0TGluZU9mZnNldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gW107XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuX2NvbnRlbnQ7XG4gICAgICAgICAgICB2YXIgaXNMaW5lU3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTGluZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIGlzTGluZVN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlzTGluZVN0YXJ0ID0gKGNoID09PSAnXFxyJyB8fCBjaCA9PT0gJ1xcbicpO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJBdChpICsgMSkgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNMaW5lU3RhcnQgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGluZU9mZnNldHMucHVzaCh0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGxpbmVPZmZzZXRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lT2Zmc2V0cztcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLnBvc2l0aW9uQXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KE1hdGgubWluKG9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgICAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGxpbmVPZmZzZXRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUoMCwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICAgICAgICBpZiAobGluZU9mZnNldHNbbWlkXSA+IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGxvdyBpcyB0aGUgbGVhc3QgeCBmb3Igd2hpY2ggdGhlIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICAvLyBvciBhcnJheS5sZW5ndGggaWYgbm8gbGluZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gdGhlIGN1cnJlbnQgb2Zmc2V0XG4gICAgICAgIHZhciBsaW5lID0gbG93IC0gMTtcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZShsaW5lLCBvZmZzZXQgLSBsaW5lT2Zmc2V0c1tsaW5lXSk7XG4gICAgfTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5vZmZzZXRBdCA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lID49IGxpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluZU9mZnNldCA9IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmVdO1xuICAgICAgICB2YXIgbmV4dExpbmVPZmZzZXQgPSAocG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGgpID8gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZSArIDFdIDogdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLCBcImxpbmVDb3VudFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGluZU9mZnNldHMoKS5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBGdWxsVGV4dERvY3VtZW50O1xufSgpKTtcbnZhciBJcztcbihmdW5jdGlvbiAoSXMpIHtcbiAgICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIElzLmRlZmluZWQgPSBkZWZpbmVkO1xuICAgIGZ1bmN0aW9uIHVuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgSXMudW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgICB9XG4gICAgSXMuYm9vbGVhbiA9IGJvb2xlYW47XG4gICAgZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG4gICAgfVxuICAgIElzLnN0cmluZyA9IHN0cmluZztcbiAgICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG4gICAgSXMubnVtYmVyID0gbnVtYmVyO1xuICAgIGZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cbiAgICBJcy5mdW5jID0gZnVuYztcbiAgICBmdW5jdGlvbiB0eXBlZEFycmF5KHZhbHVlLCBjaGVjaykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xuICAgIH1cbiAgICBJcy50eXBlZEFycmF5ID0gdHlwZWRBcnJheTtcbn0pKElzIHx8IChJcyA9IHt9KSk7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tICcuL3dvcmtlck1hbmFnZXIuanMnO1xuaW1wb3J0ICogYXMgbGFuZ3VhZ2VGZWF0dXJlcyBmcm9tICcuL2xhbmd1YWdlRmVhdHVyZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwTW9kZShkZWZhdWx0cykge1xuICAgIHZhciBjbGllbnQgPSBuZXcgV29ya2VyTWFuYWdlcihkZWZhdWx0cyk7XG4gICAgdmFyIHdvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVyaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHVyaXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50LmdldExhbmd1YWdlU2VydmljZVdvcmtlci5hcHBseShjbGllbnQsIHVyaXMpO1xuICAgIH07XG4gICAgdmFyIGxhbmd1YWdlSWQgPSBkZWZhdWx0cy5sYW5ndWFnZUlkO1xuICAgIC8vIGFsbCBtb2Rlc1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJDb21wbGV0aW9uSXRlbVByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkNvbXBsZXRpb25BZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50SGlnaGxpZ2h0QWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyTGlua1Byb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50TGlua0FkYXB0ZXIod29ya2VyKSk7XG4gICAgLy8gb25seSBodG1sXG4gICAgaWYgKGxhbmd1YWdlSWQgPT09ICdodG1sJykge1xuICAgICAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcih3b3JrZXIpKTtcbiAgICAgICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKHdvcmtlcikpO1xuICAgICAgICBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5EaWFnbm9zdGljc0FkYXB0ZXIobGFuZ3VhZ2VJZCwgd29ya2VyLCBkZWZhdWx0cyk7XG4gICAgfVxufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgKiBhcyBscyBmcm9tICcuL19kZXBzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci10eXBlcy9tYWluLmpzJztcbnZhciBVcmkgPSBtb25hY28uVXJpO1xudmFyIFJhbmdlID0gbW9uYWNvLlJhbmdlO1xuLy8gLS0tIGRpYWdub3N0aWNzIC0tLSAtLS1cbnZhciBEaWFnbm9zdGljc0FkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlhZ25vc3RpY3NBZGFwdGVyKF9sYW5ndWFnZUlkLCBfd29ya2VyLCBkZWZhdWx0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gX2xhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdmFyIG9uTW9kZWxBZGQgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBtb2RlSWQgPSBtb2RlbC5nZXRNb2RlSWQoKTtcbiAgICAgICAgICAgIGlmIChtb2RlSWQgIT09IF90aGlzLl9sYW5ndWFnZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcbiAgICAgICAgICAgIF90aGlzLl9saXN0ZW5lclttb2RlbC51cmkudG9TdHJpbmcoKV0gPSBtb2RlbC5vbkRpZENoYW5nZUNvbnRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2RvVmFsaWRhdGUobW9kZWwudXJpLCBtb2RlSWQpOyB9LCA1MDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmksIG1vZGVJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvbk1vZGVsUmVtb3ZlZCA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9kZWwsIF90aGlzLl9sYW5ndWFnZUlkLCBbXSk7XG4gICAgICAgICAgICB2YXIgdXJpU3RyID0gbW9kZWwudXJpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfdGhpcy5fbGlzdGVuZXJbdXJpU3RyXTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2xpc3RlbmVyW3VyaVN0cl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2gobW9uYWNvLmVkaXRvci5vbkRpZENyZWF0ZU1vZGVsKG9uTW9kZWxBZGQpKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY28uZWRpdG9yLm9uV2lsbERpc3Bvc2VNb2RlbChmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIG9uTW9kZWxSZW1vdmVkKG1vZGVsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25EaWRDaGFuZ2VNb2RlbExhbmd1YWdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQoZXZlbnQubW9kZWwpO1xuICAgICAgICAgICAgb25Nb2RlbEFkZChldmVudC5tb2RlbCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChkZWZhdWx0cy5vbkRpZENoYW5nZShmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5nZXRNb2RlSWQoKSA9PT0gX3RoaXMuX2xhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBvbk1vZGVsQWRkKG1vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gX3RoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9saXN0ZW5lcltrZXldLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtb25hY28uZWRpdG9yLmdldE1vZGVscygpLmZvckVhY2gob25Nb2RlbEFkZCk7XG4gICAgfVxuICAgIERpYWdub3N0aWNzQWRhcHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCAmJiBkLmRpc3Bvc2UoKTsgfSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgfTtcbiAgICBEaWFnbm9zdGljc0FkYXB0ZXIucHJvdG90eXBlLl9kb1ZhbGlkYXRlID0gZnVuY3Rpb24gKHJlc291cmNlLCBsYW5ndWFnZUlkKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmRvVmFsaWRhdGlvbihyZXNvdXJjZS50b1N0cmluZygpKS50aGVuKGZ1bmN0aW9uIChkaWFnbm9zdGljcykge1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzID0gZGlhZ25vc3RpY3MubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiB0b0RpYWdub3N0aWNzKHJlc291cmNlLCBkKTsgfSk7XG4gICAgICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9uYWNvLmVkaXRvci5nZXRNb2RlbChyZXNvdXJjZSksIGxhbmd1YWdlSWQsIG1hcmtlcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERpYWdub3N0aWNzQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBEaWFnbm9zdGljc0FkYXB0ZXIgfTtcbmZ1bmN0aW9uIHRvU2V2ZXJpdHkobHNTZXZlcml0eSkge1xuICAgIHN3aXRjaCAobHNTZXZlcml0eSkge1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5FcnJvcjogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZzogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbjogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5JbmZvO1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5IaW50OiByZXR1cm4gbW9uYWNvLk1hcmtlclNldmVyaXR5LkhpbnQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbW9uYWNvLk1hcmtlclNldmVyaXR5LkluZm87XG4gICAgfVxufVxuZnVuY3Rpb24gdG9EaWFnbm9zdGljcyhyZXNvdXJjZSwgZGlhZykge1xuICAgIHZhciBjb2RlID0gdHlwZW9mIGRpYWcuY29kZSA9PT0gJ251bWJlcicgPyBTdHJpbmcoZGlhZy5jb2RlKSA6IGRpYWcuY29kZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXZlcml0eTogdG9TZXZlcml0eShkaWFnLnNldmVyaXR5KSxcbiAgICAgICAgc3RhcnRMaW5lTnVtYmVyOiBkaWFnLnJhbmdlLnN0YXJ0LmxpbmUgKyAxLFxuICAgICAgICBzdGFydENvbHVtbjogZGlhZy5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLFxuICAgICAgICBlbmRMaW5lTnVtYmVyOiBkaWFnLnJhbmdlLmVuZC5saW5lICsgMSxcbiAgICAgICAgZW5kQ29sdW1uOiBkaWFnLnJhbmdlLmVuZC5jaGFyYWN0ZXIgKyAxLFxuICAgICAgICBtZXNzYWdlOiBkaWFnLm1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIHNvdXJjZTogZGlhZy5zb3VyY2VcbiAgICB9O1xufVxuLy8gLS0tIGNvbXBsZXRpb24gLS0tLS0tXG5mdW5jdGlvbiBmcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7IGNoYXJhY3RlcjogcG9zaXRpb24uY29sdW1uIC0gMSwgbGluZTogcG9zaXRpb24ubGluZU51bWJlciAtIDEgfTtcbn1cbmZ1bmN0aW9uIGZyb21SYW5nZShyYW5nZSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IGZyb21Qb3NpdGlvbihyYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpLCBlbmQ6IGZyb21Qb3NpdGlvbihyYW5nZS5nZXRFbmRQb3NpdGlvbigpKSB9O1xufVxuZnVuY3Rpb24gdG9SYW5nZShyYW5nZSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydC5saW5lICsgMSwgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMSwgcmFuZ2UuZW5kLmxpbmUgKyAxLCByYW5nZS5lbmQuY2hhcmFjdGVyICsgMSk7XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb25JdGVtS2luZChraW5kKSB7XG4gICAgdmFyIG1JdGVtS2luZCA9IG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5UZXh0OiByZXR1cm4gbUl0ZW1LaW5kLlRleHQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDogcmV0dXJuIG1JdGVtS2luZC5NZXRob2Q7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkZ1bmN0aW9uOiByZXR1cm4gbUl0ZW1LaW5kLkZ1bmN0aW9uO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvcjogcmV0dXJuIG1JdGVtS2luZC5Db25zdHJ1Y3RvcjtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuRmllbGQ6IHJldHVybiBtSXRlbUtpbmQuRmllbGQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlOiByZXR1cm4gbUl0ZW1LaW5kLlZhcmlhYmxlO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5DbGFzczogcmV0dXJuIG1JdGVtS2luZC5DbGFzcztcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlOiByZXR1cm4gbUl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlOiByZXR1cm4gbUl0ZW1LaW5kLk1vZHVsZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk6IHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQ6IHJldHVybiBtSXRlbUtpbmQuVW5pdDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFsdWU6IHJldHVybiBtSXRlbUtpbmQuVmFsdWU7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkVudW06IHJldHVybiBtSXRlbUtpbmQuRW51bTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDogcmV0dXJuIG1JdGVtS2luZC5LZXl3b3JkO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0OiByZXR1cm4gbUl0ZW1LaW5kLlNuaXBwZXQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNvbG9yOiByZXR1cm4gbUl0ZW1LaW5kLkNvbG9yO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWxlOiByZXR1cm4gbUl0ZW1LaW5kLkZpbGU7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTogcmV0dXJuIG1JdGVtS2luZC5SZWZlcmVuY2U7XG4gICAgfVxuICAgIHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG59XG5mdW5jdGlvbiBmcm9tQ29tcGxldGlvbkl0ZW1LaW5kKGtpbmQpIHtcbiAgICB2YXIgbUl0ZW1LaW5kID0gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQ7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLlRleHQ6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVGV4dDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuTWV0aG9kOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuRnVuY3Rpb246IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkNvbnN0cnVjdG9yOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5GaWVsZDogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuVmFyaWFibGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkNsYXNzOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5JbnRlcmZhY2U6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5Nb2R1bGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5Qcm9wZXJ0eTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuVW5pdDogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Vbml0O1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5WYWx1ZTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYWx1ZTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuRW51bTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5FbnVtO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5LZXl3b3JkOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLlNuaXBwZXQ6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuU25pcHBldDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuQ29sb3I6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuQ29sb3I7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkZpbGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuRmlsZTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuUmVmZXJlbmNlOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTtcbn1cbmZ1bmN0aW9uIHRvVGV4dEVkaXQodGV4dEVkaXQpIHtcbiAgICBpZiAoIXRleHRFZGl0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKHRleHRFZGl0LnJhbmdlKSxcbiAgICAgICAgdGV4dDogdGV4dEVkaXQubmV3VGV4dFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb25JdGVtKGVudHJ5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGFiZWw6IGVudHJ5LmxhYmVsLFxuICAgICAgICBpbnNlcnRUZXh0OiBlbnRyeS5pbnNlcnRUZXh0LFxuICAgICAgICBzb3J0VGV4dDogZW50cnkuc29ydFRleHQsXG4gICAgICAgIGZpbHRlclRleHQ6IGVudHJ5LmZpbHRlclRleHQsXG4gICAgICAgIGRvY3VtZW50YXRpb246IGVudHJ5LmRvY3VtZW50YXRpb24sXG4gICAgICAgIGRldGFpbDogZW50cnkuZGV0YWlsLFxuICAgICAgICBraW5kOiB0b0NvbXBsZXRpb25JdGVtS2luZChlbnRyeS5raW5kKSxcbiAgICAgICAgdGV4dEVkaXQ6IHRvVGV4dEVkaXQoZW50cnkudGV4dEVkaXQpLFxuICAgICAgICBkYXRhOiBlbnRyeS5kYXRhXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZyb21NYXJrZG93blN0cmluZyhlbnRyeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gbHMuTWFya3VwS2luZC5QbGFpblRleHQgOiBscy5NYXJrdXBLaW5kLk1hcmtkb3duKSxcbiAgICAgICAgdmFsdWU6ICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gZW50cnkgOiBlbnRyeS52YWx1ZSlcbiAgICB9O1xufVxuZnVuY3Rpb24gZnJvbUNvbXBsZXRpb25JdGVtKGVudHJ5KSB7XG4gICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgIGxhYmVsOiBlbnRyeS5sYWJlbCxcbiAgICAgICAgc29ydFRleHQ6IGVudHJ5LnNvcnRUZXh0LFxuICAgICAgICBmaWx0ZXJUZXh0OiBlbnRyeS5maWx0ZXJUZXh0LFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBmcm9tTWFya2Rvd25TdHJpbmcoZW50cnkuZG9jdW1lbnRhdGlvbiksXG4gICAgICAgIGRldGFpbDogZW50cnkuZGV0YWlsLFxuICAgICAgICBraW5kOiBmcm9tQ29tcGxldGlvbkl0ZW1LaW5kKGVudHJ5LmtpbmQpLFxuICAgICAgICBkYXRhOiBlbnRyeS5kYXRhXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGVudHJ5Lmluc2VydFRleHQgPT09ICdvYmplY3QnICYmIHR5cGVvZiBlbnRyeS5pbnNlcnRUZXh0LnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS5pbnNlcnRUZXh0LnZhbHVlO1xuICAgICAgICBpdGVtLmluc2VydFRleHRGb3JtYXQgPSBscy5JbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS5pbnNlcnRUZXh0O1xuICAgIH1cbiAgICBpZiAoZW50cnkucmFuZ2UpIHtcbiAgICAgICAgaXRlbS50ZXh0RWRpdCA9IGxzLlRleHRFZGl0LnJlcGxhY2UoZnJvbVJhbmdlKGVudHJ5LnJhbmdlKSwgaXRlbS5pbnNlcnRUZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG52YXIgQ29tcGxldGlvbkFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcGxldGlvbkFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLCBcInRyaWdnZXJDaGFyYWN0ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gWycuJywgJzonLCAnPCcsICdcIicsICc9JywgJy8nXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVDb21wbGV0aW9uSXRlbXMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgd29yZEluZm8gPSBtb2RlbC5nZXRXb3JkVW50aWxQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZG9Db21wbGV0ZShyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gaW5mby5pdGVtcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBlbnRyeS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGV4dDogZW50cnkuaW5zZXJ0VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc29ydFRleHQ6IGVudHJ5LnNvcnRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0OiBlbnRyeS5maWx0ZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBlbnRyeS5kb2N1bWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGVudHJ5LmRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAga2luZDogdG9Db21wbGV0aW9uSXRlbUtpbmQoZW50cnkua2luZCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudGV4dEVkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS50ZXh0RWRpdC5uZXdUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaW5zZXJ0VGV4dEZvcm1hdCA9PT0gbHMuSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5zZXJ0VGV4dCA9IHsgdmFsdWU6IGl0ZW0uaW5zZXJ0VGV4dCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0luY29tcGxldGU6IGluZm8uaXNJbmNvbXBsZXRlLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBpdGVtc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBsZXRpb25BZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IENvbXBsZXRpb25BZGFwdGVyIH07XG5mdW5jdGlvbiBpc01hcmt1cENvbnRlbnQodGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGhpbmcua2luZCA9PT0gJ3N0cmluZyc7XG59XG5mdW5jdGlvbiB0b01hcmtkb3duU3RyaW5nKGVudHJ5KSB7XG4gICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbnRyeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNNYXJrdXBDb250ZW50KGVudHJ5KSkge1xuICAgICAgICBpZiAoZW50cnkua2luZCA9PT0gJ3BsYWludGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5LnZhbHVlLnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCAnXFxcXCQmJylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbnRyeS52YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyB2YWx1ZTogJ2BgYCcgKyBlbnRyeS5sYW5ndWFnZSArICdcXG4nICsgZW50cnkudmFsdWUgKyAnXFxuYGBgXFxuJyB9O1xufVxuZnVuY3Rpb24gdG9NYXJrZWRTdHJpbmdBcnJheShjb250ZW50cykge1xuICAgIGlmICghY29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudHMpKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50cy5tYXAodG9NYXJrZG93blN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBbdG9NYXJrZG93blN0cmluZyhjb250ZW50cyldO1xufVxuLy8gLS0tIGRlZmluaXRpb24gLS0tLS0tXG5mdW5jdGlvbiB0b0xvY2F0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXJpOiBVcmkucGFyc2UobG9jYXRpb24udXJpKSxcbiAgICAgICAgcmFuZ2U6IHRvUmFuZ2UobG9jYXRpb24ucmFuZ2UpXG4gICAgfTtcbn1cbi8vIC0tLSBkb2N1bWVudCBzeW1ib2xzIC0tLS0tLVxuZnVuY3Rpb24gdG9TeW1ib2xLaW5kKGtpbmQpIHtcbiAgICB2YXIgbUtpbmQgPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQ7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5GaWxlOiByZXR1cm4gbUtpbmQuQXJyYXk7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Nb2R1bGU6IHJldHVybiBtS2luZC5Nb2R1bGU7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5OYW1lc3BhY2U6IHJldHVybiBtS2luZC5OYW1lc3BhY2U7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5QYWNrYWdlOiByZXR1cm4gbUtpbmQuUGFja2FnZTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkNsYXNzOiByZXR1cm4gbUtpbmQuQ2xhc3M7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5NZXRob2Q6IHJldHVybiBtS2luZC5NZXRob2Q7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Qcm9wZXJ0eTogcmV0dXJuIG1LaW5kLlByb3BlcnR5O1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuRmllbGQ6IHJldHVybiBtS2luZC5GaWVsZDtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkNvbnN0cnVjdG9yOiByZXR1cm4gbUtpbmQuQ29uc3RydWN0b3I7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5FbnVtOiByZXR1cm4gbUtpbmQuRW51bTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkludGVyZmFjZTogcmV0dXJuIG1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkZ1bmN0aW9uOiByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5WYXJpYWJsZTogcmV0dXJuIG1LaW5kLlZhcmlhYmxlO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuQ29uc3RhbnQ6IHJldHVybiBtS2luZC5Db25zdGFudDtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLlN0cmluZzogcmV0dXJuIG1LaW5kLlN0cmluZztcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLk51bWJlcjogcmV0dXJuIG1LaW5kLk51bWJlcjtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkJvb2xlYW46IHJldHVybiBtS2luZC5Cb29sZWFuO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuQXJyYXk6IHJldHVybiBtS2luZC5BcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIG1LaW5kLkZ1bmN0aW9uO1xufVxuZnVuY3Rpb24gdG9IaWdobGlnaEtpbmQoa2luZCkge1xuICAgIHZhciBtS2luZCA9IG1vbmFjby5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICBjYXNlIGxzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkOiByZXR1cm4gbUtpbmQuUmVhZDtcbiAgICAgICAgY2FzZSBscy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU6IHJldHVybiBtS2luZC5Xcml0ZTtcbiAgICAgICAgY2FzZSBscy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dDogcmV0dXJuIG1LaW5kLlRleHQ7XG4gICAgfVxuICAgIHJldHVybiBtS2luZC5UZXh0O1xufVxudmFyIERvY3VtZW50SGlnaGxpZ2h0QWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudEhpZ2hsaWdodHMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7IHJldHVybiB3b3JrZXIuZmluZERvY3VtZW50SGlnaGxpZ2h0cyhyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTsgfSkudGhlbihmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpLFxuICAgICAgICAgICAgICAgIGtpbmQ6IHRvSGlnaGxpZ2hLaW5kKGl0ZW0ua2luZClcbiAgICAgICAgICAgIH0pOyB9KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50SGlnaGxpZ2h0QWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIgfTtcbnZhciBEb2N1bWVudExpbmtBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50TGlua0FkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBEb2N1bWVudExpbmtBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlTGlua3MgPSBmdW5jdGlvbiAobW9kZWwsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHsgcmV0dXJuIHdvcmtlci5maW5kRG9jdW1lbnRMaW5rcyhyZXNvdXJjZS50b1N0cmluZygpKTsgfSkudGhlbihmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpLFxuICAgICAgICAgICAgICAgIHVybDogaXRlbS50YXJnZXRcbiAgICAgICAgICAgIH0pOyB9KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50TGlua0FkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRMaW5rQWRhcHRlciB9O1xuZnVuY3Rpb24gZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWJTaXplOiBvcHRpb25zLnRhYlNpemUsXG4gICAgICAgIGluc2VydFNwYWNlczogb3B0aW9ucy5pbnNlcnRTcGFjZXNcbiAgICB9O1xufVxudmFyIERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyA9IGZ1bmN0aW9uIChtb2RlbCwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5mb3JtYXQocmVzb3VyY2UudG9TdHJpbmcoKSwgbnVsbCwgZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpKS50aGVuKGZ1bmN0aW9uIChlZGl0cykge1xuICAgICAgICAgICAgICAgIGlmICghZWRpdHMgfHwgZWRpdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlciB9O1xudmFyIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzID0gZnVuY3Rpb24gKG1vZGVsLCByYW5nZSwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5mb3JtYXQocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVJhbmdlKHJhbmdlKSwgZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpKS50aGVuKGZ1bmN0aW9uIChlZGl0cykge1xuICAgICAgICAgICAgICAgIGlmICghZWRpdHMgfHwgZWRpdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXI7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgfTtcbi8qKlxuICogSG9vayBhIGNhbmNlbGxhdGlvbiB0b2tlbiB0byBhIFdpbkpTIFByb21pc2VcbiAqL1xuZnVuY3Rpb24gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCBwcm9taXNlKSB7XG4gICAgaWYgKHByb21pc2UuY2FuY2VsKSB7XG4gICAgICAgIHRva2VuLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb21pc2UuY2FuY2VsKCk7IH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJ3VzZSBzdHJpY3QnO1xudmFyIFByb21pc2UgPSBtb25hY28uUHJvbWlzZTtcbnZhciBTVE9QX1dIRU5fSURMRV9GT1IgPSAyICogNjAgKiAxMDAwOyAvLyAybWluXG52YXIgV29ya2VyTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXb3JrZXJNYW5hZ2VyKGRlZmF1bHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NoZWNrSWZJZGxlKCk7IH0sIDMwICogMTAwMCk7XG4gICAgICAgIHRoaXMuX2xhc3RVc2VkVGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0b3BXb3JrZXIoKTsgfSk7XG4gICAgfVxuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLl9zdG9wV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZGxlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2NoZWNrSWZJZGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgICAgIGlmICh0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA+IFNUT1BfV0hFTl9JRExFX0ZPUikge1xuICAgICAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0Q2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvLmVkaXRvci5jcmVhdGVXZWJXb3JrZXIoe1xuICAgICAgICAgICAgICAgIC8vIG1vZHVsZSB0aGF0IGV4cG9ydHMgdGhlIGNyZWF0ZSgpIG1ldGhvZCBhbmQgcmV0dXJucyBhIGBIVE1MV29ya2VyYCBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiAndnMvbGFuZ3VhZ2UvaHRtbC9odG1sV29ya2VyJyxcbiAgICAgICAgICAgICAgICAvLyBwYXNzZWQgaW4gdG8gdGhlIGNyZWF0ZSgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VTZXR0aW5nczogdGhpcy5fZGVmYXVsdHMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VJZDogdGhpcy5fZGVmYXVsdHMubGFuZ3VhZ2VJZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY2xpZW50ID0gdGhpcy5fd29ya2VyLmdldFByb3h5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudDtcbiAgICB9O1xuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLmdldExhbmd1YWdlU2VydmljZVdvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgcmVzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jbGllbnQ7XG4gICAgICAgIHJldHVybiB0b1NoYWxsb3dDYW5jZWxQcm9taXNlKHRoaXMuX2dldENsaWVudCgpLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgX2NsaWVudCA9IGNsaWVudDtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl93b3JrZXIud2l0aFN5bmNlZFJlc291cmNlcyhyZXNvdXJjZXMpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfY2xpZW50OyB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gV29ya2VyTWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBXb3JrZXJNYW5hZ2VyIH07XG5mdW5jdGlvbiB0b1NoYWxsb3dDYW5jZWxQcm9taXNlKHApIHtcbiAgICB2YXIgY29tcGxldGVDYWxsYmFjaztcbiAgICB2YXIgZXJyb3JDYWxsYmFjaztcbiAgICB2YXIgciA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChjLCBlKSB7XG4gICAgICAgIGNvbXBsZXRlQ2FsbGJhY2sgPSBjO1xuICAgICAgICBlcnJvckNhbGxiYWNrID0gZTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7IH0pO1xuICAgIHAudGhlbihjb21wbGV0ZUNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICByZXR1cm4gcjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=