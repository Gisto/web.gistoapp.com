!function(e){this.webpackChunk=function(t,r){for(var i in r)e[i]=r[i];for(;t.length;)n[t.pop()]=1};var t={},n={main:1};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./node_modules/monaco-editor/esm/vs/editor/editor.worker.js")}({"./node_modules/monaco-editor/esm/vs/base/common/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/async.js ***!
  \****************************************************************/
/*! exports provided: isPromiseLike, toPromiseLike, asWinJsPromise, wireCancellationToken, Throttler, SimpleThrottler, Delayer, ThrottledDelayer, Barrier, ShallowCancelThenPromise, timeout, always, sequence, first, Limiter, Queue, ResourceQueue, setDisposableTimeout, TimeoutTimer, IntervalTimer, RunOnceScheduler, nfcall, ninvoke, ThrottledEmitter */function(e,t,n){"use strict";n.r(t),n.d(t,"isPromiseLike",function(){return c}),n.d(t,"toPromiseLike",function(){return l}),n.d(t,"asWinJsPromise",function(){return f}),n.d(t,"wireCancellationToken",function(){return d}),n.d(t,"Throttler",function(){return h}),n.d(t,"SimpleThrottler",function(){return m}),n.d(t,"Delayer",function(){return p}),n.d(t,"ThrottledDelayer",function(){return _}),n.d(t,"Barrier",function(){return g}),n.d(t,"ShallowCancelThenPromise",function(){return v}),n.d(t,"timeout",function(){return y}),n.d(t,"always",function(){return b}),n.d(t,"sequence",function(){return C}),n.d(t,"first",function(){return S}),n.d(t,"Limiter",function(){return E}),n.d(t,"Queue",function(){return L}),n.d(t,"ResourceQueue",function(){return w}),n.d(t,"setDisposableTimeout",function(){return N}),n.d(t,"TimeoutTimer",function(){return P}),n.d(t,"IntervalTimer",function(){return A}),n.d(t,"RunOnceScheduler",function(){return x}),n.d(t,"nfcall",function(){return k}),n.d(t,"ninvoke",function(){return M}),n.d(t,"ThrottledEmitter",function(){return O});var r=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),i=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),o=n(/*! ./cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),s=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),u=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),a=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function c(e){return e&&"function"==typeof e.then}function l(e){return c(e)?e:i.TPromise.as(e)}function f(e){var t=new o.CancellationTokenSource;return new i.TPromise(function(n,r,o){var s=e(t.token);s instanceof i.TPromise?s.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)},o):c(s)?s.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)}):(t.dispose(),n(s))},function(){t.cancel()})}function d(e,t,n){var o=e.onCancellationRequested(function(){return t.cancel()});return n&&(t=t.then(void 0,function(e){if(!r.isPromiseCanceledError(e))return i.TPromise.wrapError(e)})),b(t,function(){return o.dispose()})}var h=function(){function e(){this.activePromise=null,this.queuedPromise=null,this.queuedPromiseFactory=null}return e.prototype.queue=function(e){var t=this;if(this.activePromise){if(this.queuedPromiseFactory=e,!this.queuedPromise){var n=function(){t.queuedPromise=null;var e=t.queue(t.queuedPromiseFactory);return t.queuedPromiseFactory=null,e};this.queuedPromise=new i.TPromise(function(e,r,i){t.activePromise.then(n,n,i).done(e)},function(){t.activePromise.cancel()})}return new i.TPromise(function(e,n,r){t.queuedPromise.then(e,n,r)},function(){})}return this.activePromise=e(),new i.TPromise(function(e,n,r){t.activePromise.done(function(n){t.activePromise=null,e(n)},function(e){t.activePromise=null,n(e)},r)},function(){t.activePromise.cancel()})},e}(),m=function(){function e(){this.current=i.TPromise.wrap(null)}return e.prototype.queue=function(e){return this.current=this.current.then(function(){return e()})},e}(),p=function(){function e(e){this.defaultDelay=e,this.timeout=null,this.completionPromise=null,this.onSuccess=null,this.task=null}return e.prototype.trigger=function(e,t){var n=this;return void 0===t&&(t=this.defaultDelay),this.task=e,this.cancelTimeout(),this.completionPromise||(this.completionPromise=new i.TPromise(function(e){n.onSuccess=e},function(){}).then(function(){n.completionPromise=null,n.onSuccess=null;var e=n.task;return n.task=null,e()})),this.timeout=setTimeout(function(){n.timeout=null,n.onSuccess(null)},t),this.completionPromise},e.prototype.isTriggered=function(){return null!==this.timeout},e.prototype.cancel=function(){this.cancelTimeout(),this.completionPromise&&(this.completionPromise.cancel(),this.completionPromise=null)},e.prototype.cancelTimeout=function(){null!==this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},e}(),_=function(e){function t(t){var n=e.call(this,t)||this;return n.throttler=new h,n}return a(t,e),t.prototype.trigger=function(t,n){var r=this;return e.prototype.trigger.call(this,function(){return r.throttler.queue(t)},n)},t}(p),g=function(){function e(){var e=this;this._isOpen=!1,this._promise=new i.TPromise(function(t,n,r){e._completePromise=t},function(){console.warn("You should really not try to cancel this ready promise!")})}return e.prototype.isOpen=function(){return this._isOpen},e.prototype.open=function(){this._isOpen=!0,this._completePromise(!0)},e.prototype.wait=function(){return this._promise},e}(),v=function(e){function t(t){var n,i,o,s;return n=e.call(this,function(e,t,n){i=e,o=t,s=n},function(){o(r.canceled())})||this,t.then(i,o,s),n}return a(t,e),t}(i.TPromise);function y(e){return new i.Promise(function(t){return setTimeout(t,e)})}function b(e,t){return function(e){return i.TPromise.is(e)&&"function"==typeof e.done}(e)?new i.TPromise(function(n,i,o){e.done(function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}n(e)},function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}i(e)},function(e){o(e)})},function(){e.cancel()}):(e.then(function(e){return t()},function(e){return t()}),e)}function C(e){var t=[];return e=e.reverse(),i.TPromise.as(null).then(function n(r){void 0!==r&&null!==r&&t.push(r);var o=e.length?e.pop()():null;return o?o.then(n):i.TPromise.as(t)})}function S(e,t){void 0===t&&(t=function(e){return!!e}),e=e.reverse().slice();var n=function(){return 0===e.length?i.TPromise.as(null):e.pop()().then(function(e){return t(e)?i.TPromise.as(e):n()})};return n()}var E=function(){function e(e){this.maxDegreeOfParalellism=e,this.outstandingPromises=[],this.runningPromises=0,this._onFinished=new u.Emitter}return Object.defineProperty(e.prototype,"onFinished",{get:function(){return this._onFinished.event},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.runningPromises+this.outstandingPromises.length},enumerable:!0,configurable:!0}),e.prototype.queue=function(e){var t=this;return new i.TPromise(function(n,r,i){t.outstandingPromises.push({factory:e,c:n,e:r,p:i}),t.consume()})},e.prototype.consume=function(){for(var e=this;this.outstandingPromises.length&&this.runningPromises<this.maxDegreeOfParalellism;){var t=this.outstandingPromises.shift();this.runningPromises++;var n=t.factory();n.done(t.c,t.e,t.p),n.done(function(){return e.consumed()},function(){return e.consumed()})}},e.prototype.consumed=function(){this.runningPromises--,this.outstandingPromises.length>0?this.consume():this._onFinished.fire()},e.prototype.dispose=function(){this._onFinished.dispose()},e}(),L=function(e){function t(){return e.call(this,1)||this}return a(t,e),t}(E),w=function(){function e(){this.queues=Object.create(null)}return e.prototype.queueFor=function(e){var t=this,n=e.toString();if(!this.queues[n]){var r=new L;r.onFinished(function(){r.dispose(),delete t.queues[n]}),this.queues[n]=r}return this.queues[n]},e}();function N(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=setTimeout.apply(void 0,[e,t].concat(n));return{dispose:function(){clearTimeout(i)}}}var P=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return a(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearTimeout(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){var n=this;this.cancel(),this._token=setTimeout(function(){n._token=-1,e()},t)},t.prototype.setIfNotSet=function(e,t){var n=this;-1===this._token&&(this._token=setTimeout(function(){n._token=-1,e()},t))},t}(s.Disposable),A=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return a(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearInterval(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){this.cancel(),this._token=setInterval(function(){e()},t)},t}(s.Disposable),x=function(){function e(e,t){this.timeoutToken=-1,this.runner=e,this.timeout=t,this.timeoutHandler=this.onTimeout.bind(this)}return e.prototype.dispose=function(){this.cancel(),this.runner=null},e.prototype.cancel=function(){this.isScheduled()&&(clearTimeout(this.timeoutToken),this.timeoutToken=-1)},e.prototype.schedule=function(e){void 0===e&&(e=this.timeout),this.cancel(),this.timeoutToken=setTimeout(this.timeoutHandler,e)},e.prototype.isScheduled=function(){return-1!==this.timeoutToken},e.prototype.onTimeout=function(){this.timeoutToken=-1,this.runner&&this.runner()},e}();function k(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i.TPromise(function(n,r){return e.apply(void 0,t.concat([function(e,t){return e?r(e):n(t)}]))},function(){return null})}function M(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return new i.TPromise(function(r,i){return t.call.apply(t,[e].concat(n,[function(e,t){return e?i(e):r(t)}]))},function(){return null})}var O=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.throttle=function(e){var t=this;return this.suspended=!0,b(e,function(){return t.resume()})},t.prototype.fire=function(t){return this.suspended?(this.lastEvent=t,void(this.hasLastEvent=!0)):e.prototype.fire.call(this,t)},t.prototype.resume=function(){this.suspended=!1,this.hasLastEvent&&this.fire(this.lastEvent),this.hasLastEvent=!1,this.lastEvent=void 0},t}(u.Emitter)},"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/*! exports provided: CancellationToken, CancellationTokenSource */function(e,t,n){"use strict";n.r(t),n.d(t,"CancellationToken",function(){return r}),n.d(t,"CancellationTokenSource",function(){return u});var r,i=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),o=Object.freeze(function(e,t){var n=setTimeout(e.bind(t),0);return{dispose:function(){clearTimeout(n)}}});!function(e){e.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:i.Event.None}),e.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:o})}(r||(r={}));var s=function(){function e(){this._isCancelled=!1}return e.prototype.cancel=function(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))},Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return this._isCancelled},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onCancellationRequested",{get:function(){return this._isCancelled?o:(this._emitter||(this._emitter=new i.Emitter),this._emitter.event)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)},e}(),u=function(){function e(){}return Object.defineProperty(e.prototype,"token",{get:function(){return this._token||(this._token=new s),this._token},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._token?this._token instanceof s&&this._token.cancel():this._token=r.Cancelled},e.prototype.dispose=function(){this._token?this._token instanceof s&&this._token.dispose():this._token=r.None},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/*! exports provided: stringDiff, Debug, MyArray, LcsDiff */function(e,t,n){"use strict";n.r(t),n.d(t,"stringDiff",function(){return o}),n.d(t,"Debug",function(){return s}),n.d(t,"MyArray",function(){return u}),n.d(t,"LcsDiff",function(){return l});var r=n(/*! ./diffChange.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js");function i(e){return{getLength:function(){return e.length},getElementHash:function(t){return e[t]}}}function o(e,t,n){return new l(i(e),i(t)).ComputeDiff(n)}var s=function(){function e(){}return e.Assert=function(e,t){if(!e)throw new Error(t)},e}(),u=function(){function e(){}return e.Copy=function(e,t,n,r,i){for(var o=0;o<i;o++)n[r+o]=e[t+o]},e}(),a=function(){function e(){this.m_changes=[],this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE,this.m_originalCount=0,this.m_modifiedCount=0}return e.prototype.MarkNextChange=function(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new r.DiffChange(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE},e.prototype.AddOriginalElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++},e.prototype.AddModifiedElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++},e.prototype.getChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes},e.prototype.getReverseChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes},e}(),c=Object.prototype.hasOwnProperty,l=function(){function e(e,t,n){void 0===n&&(n=null),this.OriginalSequence=e,this.ModifiedSequence=t,this.ContinueProcessingPredicate=n,this.m_originalIds=[],this.m_modifiedIds=[],this.m_forwardHistory=[],this.m_reverseHistory=[],this.ComputeUniqueIdentifiers()}return e.prototype.ComputeUniqueIdentifiers=function(){var e=this.OriginalSequence.getLength(),t=this.ModifiedSequence.getLength();this.m_originalIds=new Array(e),this.m_modifiedIds=new Array(t);var n,r={},i=1;for(n=0;n<e;n++){var o=this.OriginalSequence.getElementHash(n);c.call(r,o)?this.m_originalIds[n]=r[o]:(this.m_originalIds[n]=i++,r[o]=this.m_originalIds[n])}for(n=0;n<t;n++){var s=this.ModifiedSequence.getElementHash(n);c.call(r,s)?this.m_modifiedIds[n]=r[s]:(this.m_modifiedIds[n]=i++,r[s]=this.m_modifiedIds[n])}},e.prototype.ElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_modifiedIds[t]},e.prototype.OriginalElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_originalIds[t]},e.prototype.ModifiedElementsAreEqual=function(e,t){return this.m_modifiedIds[e]===this.m_modifiedIds[t]},e.prototype.ComputeDiff=function(e){return this._ComputeDiff(0,this.OriginalSequence.getLength()-1,0,this.ModifiedSequence.getLength()-1,e)},e.prototype._ComputeDiff=function(e,t,n,r,i){var o=this.ComputeDiffRecursive(e,t,n,r,[!1]);return i?this.ShiftChanges(o):o},e.prototype.ComputeDiffRecursive=function(e,t,n,i,o){for(o[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){var u=void 0;return n<=i?(s.Assert(e===t+1,"originalStart should only be one more than originalEnd"),u=[new r.DiffChange(e,0,n,i-n+1)]):e<=t?(s.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),u=[new r.DiffChange(e,t-e+1,n,0)]):(s.Assert(e===t+1,"originalStart should only be one more than originalEnd"),s.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),u=[]),u}var a=[0],c=[0],l=this.ComputeRecursionPoint(e,t,n,i,a,c,o),f=a[0],d=c[0];if(null!==l)return l;if(!o[0]){var h=this.ComputeDiffRecursive(e,f,n,d,o),m=[];return m=o[0]?[new r.DiffChange(f+1,t-(f+1)+1,d+1,i-(d+1)+1)]:this.ComputeDiffRecursive(f+1,t,d+1,i,o),this.ConcatenateChanges(h,m)}return[new r.DiffChange(e,t-e+1,n,i-n+1)]},e.prototype.WALKTRACE=function(e,t,n,i,o,s,u,c,l,f,d,h,m,p,_,g,v,y){var b,C,S=null,E=new a,L=t,w=n,N=m[0]-g[0]-i,P=Number.MIN_VALUE,A=this.m_forwardHistory.length-1;do{(C=N+e)===L||C<w&&l[C-1]<l[C+1]?(p=(d=l[C+1])-N-i,d<P&&E.MarkNextChange(),P=d,E.AddModifiedElement(d+1,p),N=C+1-e):(p=(d=l[C-1]+1)-N-i,d<P&&E.MarkNextChange(),P=d-1,E.AddOriginalElement(d,p+1),N=C-1-e),A>=0&&(e=(l=this.m_forwardHistory[A])[0],L=1,w=l.length-1)}while(--A>=-1);if(b=E.getReverseChanges(),y[0]){var x=m[0]+1,k=g[0]+1;if(null!==b&&b.length>0){var M=b[b.length-1];x=Math.max(x,M.getOriginalEnd()),k=Math.max(k,M.getModifiedEnd())}S=[new r.DiffChange(x,h-x+1,k,_-k+1)]}else{E=new a,L=s,w=u,N=m[0]-g[0]-c,P=Number.MAX_VALUE,A=v?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{(C=N+o)===L||C<w&&f[C-1]>=f[C+1]?(p=(d=f[C+1]-1)-N-c,d>P&&E.MarkNextChange(),P=d+1,E.AddOriginalElement(d+1,p+1),N=C+1-o):(p=(d=f[C-1])-N-c,d>P&&E.MarkNextChange(),P=d,E.AddModifiedElement(d+1,p+1),N=C-1-o),A>=0&&(o=(f=this.m_reverseHistory[A])[0],L=1,w=f.length-1)}while(--A>=-1);S=E.getChanges()}return this.ConcatenateChanges(b,S)},e.prototype.ComputeRecursionPoint=function(e,t,n,i,o,s,a){var c,l,f,d=0,h=0,m=0,p=0;e--,n--,o[0]=0,s[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];var _,g,v=t-e+(i-n),y=v+1,b=new Array(y),C=new Array(y),S=i-n,E=t-e,L=e-n,w=t-i,N=(E-S)%2==0;for(b[S]=e,C[E]=t,a[0]=!1,f=1;f<=v/2+1;f++){var P=0,A=0;for(d=this.ClipDiagonalBound(S-f,f,S,y),h=this.ClipDiagonalBound(S+f,f,S,y),_=d;_<=h;_+=2){for(l=(c=_===d||_<h&&b[_-1]<b[_+1]?b[_+1]:b[_-1]+1)-(_-S)-L,g=c;c<t&&l<i&&this.ElementsAreEqual(c+1,l+1);)c++,l++;if(b[_]=c,c+l>P+A&&(P=c,A=l),!N&&Math.abs(_-E)<=f-1&&c>=C[_])return o[0]=c,s[0]=l,g<=C[_]&&f<=1448?this.WALKTRACE(S,d,h,L,E,m,p,w,b,C,c,t,o,l,i,s,N,a):null}var x=(P-e+(A-n)-f)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(P,this.OriginalSequence,x))return a[0]=!0,o[0]=P,s[0]=A,x>0&&f<=1448?this.WALKTRACE(S,d,h,L,E,m,p,w,b,C,c,t,o,l,i,s,N,a):(e++,n++,[new r.DiffChange(e,t-e+1,n,i-n+1)]);for(m=this.ClipDiagonalBound(E-f,f,E,y),p=this.ClipDiagonalBound(E+f,f,E,y),_=m;_<=p;_+=2){for(l=(c=_===m||_<p&&C[_-1]>=C[_+1]?C[_+1]-1:C[_-1])-(_-E)-w,g=c;c>e&&l>n&&this.ElementsAreEqual(c,l);)c--,l--;if(C[_]=c,N&&Math.abs(_-S)<=f&&c<=b[_])return o[0]=c,s[0]=l,g>=b[_]&&f<=1448?this.WALKTRACE(S,d,h,L,E,m,p,w,b,C,c,t,o,l,i,s,N,a):null}if(f<=1447){var k=new Array(h-d+2);k[0]=S-d+1,u.Copy(b,d,k,1,h-d+1),this.m_forwardHistory.push(k),(k=new Array(p-m+2))[0]=E-m+1,u.Copy(C,m,k,1,p-m+1),this.m_reverseHistory.push(k)}}return this.WALKTRACE(S,d,h,L,E,m,p,w,b,C,c,t,o,l,i,s,N,a)},e.prototype.ShiftChanges=function(e){var t;do{t=!1;for(var n=0;n<e.length;n++)for(var r=e[n],i=n<e.length-1?e[n+1].originalStart:this.OriginalSequence.getLength(),o=n<e.length-1?e[n+1].modifiedStart:this.ModifiedSequence.getLength(),s=r.originalLength>0,u=r.modifiedLength>0;r.originalStart+r.originalLength<i&&r.modifiedStart+r.modifiedLength<o&&(!s||this.OriginalElementsAreEqual(r.originalStart,r.originalStart+r.originalLength))&&(!u||this.ModifiedElementsAreEqual(r.modifiedStart,r.modifiedStart+r.modifiedLength));)r.originalStart++,r.modifiedStart++;var a=new Array,c=[null];for(n=0;n<e.length;n++)n<e.length-1&&this.ChangesOverlap(e[n],e[n+1],c)?(t=!0,a.push(c[0]),n++):a.push(e[n]);e=a}while(t);for(n=e.length-1;n>=0;n--){r=e[n],i=0,o=0;if(n>0){var l=e[n-1];l.originalLength>0&&(i=l.originalStart+l.originalLength),l.modifiedLength>0&&(o=l.modifiedStart+l.modifiedLength)}s=r.originalLength>0,u=r.modifiedLength>0;for(var f=0,d=this._boundaryScore(r.originalStart,r.originalLength,r.modifiedStart,r.modifiedLength),h=1;;h++){var m=r.originalStart-h,p=r.modifiedStart-h;if(m<i||p<o)break;if(s&&!this.OriginalElementsAreEqual(m,m+r.originalLength))break;if(u&&!this.ModifiedElementsAreEqual(p,p+r.modifiedLength))break;var _=this._boundaryScore(m,r.originalLength,p,r.modifiedLength);_>d&&(d=_,f=h)}r.originalStart-=f,r.modifiedStart-=f}return e},e.prototype._OriginalIsBoundary=function(e){return e<=0||e>=this.OriginalSequence.getLength()-1||/^\s*$/.test(this.OriginalSequence.getElementHash(e))},e.prototype._OriginalRegionIsBoundary=function(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1},e.prototype._ModifiedIsBoundary=function(e){return e<=0||e>=this.ModifiedSequence.getLength()-1||/^\s*$/.test(this.ModifiedSequence.getElementHash(e))},e.prototype._ModifiedRegionIsBoundary=function(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1},e.prototype._boundaryScore=function(e,t,n,r){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,r)?1:0)},e.prototype.ConcatenateChanges=function(e,t){var n=[],r=null;return 0===e.length||0===t.length?t.length>0?t:e:this.ChangesOverlap(e[e.length-1],t[0],n)?(r=new Array(e.length+t.length-1),u.Copy(e,0,r,0,e.length-1),r[e.length-1]=n[0],u.Copy(t,1,r,e.length,t.length-1),r):(r=new Array(e.length+t.length),u.Copy(e,0,r,0,e.length),u.Copy(t,0,r,e.length,t.length),r)},e.prototype.ChangesOverlap=function(e,t,n){if(s.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),s.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){var i=e.originalStart,o=e.originalLength,u=e.modifiedStart,a=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(o=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(a=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new r.DiffChange(i,o,u,a),!0}return n[0]=null,!1},e.prototype.ClipDiagonalBound=function(e,t,n,r){if(e>=0&&e<r)return e;var i=t%2==0;return e<0?i===(n%2==0)?0:1:i===((r-n-1)%2==0)?r-1:r-2},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/*! exports provided: DiffChange */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffChange",function(){return r});var r=function(){function e(e,t,n,r){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=r}return e.prototype.getOriginalEnd=function(){return this.originalStart+this.originalLength},e.prototype.getModifiedEnd=function(){return this.modifiedStart+this.modifiedLength},e}()},"./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/*! exports provided: ErrorHandler, errorHandler, setUnexpectedErrorHandler, onUnexpectedError, onUnexpectedExternalError, transformErrorForSerialization, isPromiseCanceledError, canceled, illegalArgument, illegalState, readonly, disposed, isErrorWithActions, create, getErrorMessage */function(e,t,n){"use strict";n.r(t),n.d(t,"ErrorHandler",function(){return i}),n.d(t,"errorHandler",function(){return o}),n.d(t,"setUnexpectedErrorHandler",function(){return s}),n.d(t,"onUnexpectedError",function(){return u}),n.d(t,"onUnexpectedExternalError",function(){return a}),n.d(t,"transformErrorForSerialization",function(){return c}),n.d(t,"isPromiseCanceledError",function(){return f}),n.d(t,"canceled",function(){return d}),n.d(t,"illegalArgument",function(){return h}),n.d(t,"illegalState",function(){return m}),n.d(t,"readonly",function(){return p}),n.d(t,"disposed",function(){return _}),n.d(t,"isErrorWithActions",function(){return g}),n.d(t,"create",function(){return v}),n.d(t,"getErrorMessage",function(){return y});var r={};n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js").TPromise.addEventListener("error",function(e){var t=e.detail,n=t.id;t.parent?t.handler&&r&&delete r[n]:(r[n]=t,1===Object.keys(r).length&&setTimeout(function(){var e=r;r={},Object.keys(e).forEach(function(t){var n=e[t];n.exception?u(n.exception):n.error&&u(n.error),console.log("WARNING: Promise with no error callback:"+n.id),console.log(n),n.exception&&console.log(n.exception.stack)})},0))});var i=function(){function e(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(function(){if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e},0)}}return e.prototype.addListener=function(e){var t=this;return this.listeners.push(e),function(){t._removeListener(e)}},e.prototype.emit=function(e){this.listeners.forEach(function(t){t(e)})},e.prototype._removeListener=function(e){this.listeners.splice(this.listeners.indexOf(e),1)},e.prototype.setUnexpectedErrorHandler=function(e){this.unexpectedErrorHandler=e},e.prototype.getUnexpectedErrorHandler=function(){return this.unexpectedErrorHandler},e.prototype.onUnexpectedError=function(e){this.unexpectedErrorHandler(e),this.emit(e)},e.prototype.onUnexpectedExternalError=function(e){this.unexpectedErrorHandler(e)},e}(),o=new i;function s(e){o.setUnexpectedErrorHandler(e)}function u(e){f(e)||o.onUnexpectedError(e)}function a(e){f(e)||o.onUnexpectedExternalError(e)}function c(e){return e instanceof Error?{$isError:!0,name:e.name,message:e.message,stack:e.stacktrace||e.stack}:e}var l="Canceled";function f(e){return e instanceof Error&&e.name===l&&e.message===l}function d(){var e=new Error(l);return e.name=e.message,e}function h(e){return e?new Error("Illegal argument: "+e):new Error("Illegal argument")}function m(e){return e?new Error("Illegal state: "+e):new Error("Illegal state")}function p(e){return e?new Error("readonly property '"+e+" cannot be changed'"):new Error("readonly property cannot be changed")}function _(e){var t=new Error(e+" has been disposed");return t.name="DISPOSED",t}function g(e){return e instanceof Error&&Array.isArray(e.actions)}function v(e,t){void 0===t&&(t=Object.create(null));var n=new Error(e);return t.actions&&(n.actions=t.actions),n}function y(e){return e?e.message?e.message:e.stack?e.stack.split("\n")[0]:String(e):"Error"}},"./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/*! exports provided: Event, Emitter, EventMultiplexer, fromCallback, fromPromise, toPromise, once, anyEvent, debounceEvent, EventBufferer, mapEvent, forEach, filterEvent, chain, stopwatch, buffer, echo, Relay, fromNodeEventEmitter, latch */function(e,t,n){"use strict";n.r(t),n.d(t,"Event",function(){return r}),n.d(t,"Emitter",function(){return c}),n.d(t,"EventMultiplexer",function(){return l}),n.d(t,"fromCallback",function(){return f}),n.d(t,"fromPromise",function(){return d}),n.d(t,"toPromise",function(){return h}),n.d(t,"once",function(){return m}),n.d(t,"anyEvent",function(){return p}),n.d(t,"debounceEvent",function(){return _}),n.d(t,"EventBufferer",function(){return g}),n.d(t,"mapEvent",function(){return v}),n.d(t,"forEach",function(){return y}),n.d(t,"filterEvent",function(){return b}),n.d(t,"chain",function(){return S}),n.d(t,"stopwatch",function(){return E}),n.d(t,"buffer",function(){return L}),n.d(t,"echo",function(){return w}),n.d(t,"Relay",function(){return N}),n.d(t,"fromNodeEventEmitter",function(){return P}),n.d(t,"latch",function(){return A});var r,i=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),o=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),s=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),u=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),a=n(/*! ./linkedList.js */"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js");!function(e){var t={dispose:function(){}};e.None=function(){return t}}(r||(r={}));var c=function(){function e(e){this._options=e}return Object.defineProperty(e.prototype,"event",{get:function(){var t=this;return this._event||(this._event=function(n,r,i){t._listeners||(t._listeners=new a.LinkedList);var o=t._listeners.isEmpty();o&&t._options&&t._options.onFirstListenerAdd&&t._options.onFirstListenerAdd(t);var s,u=t._listeners.push(r?[n,r]:n);return o&&t._options&&t._options.onFirstListenerDidAdd&&t._options.onFirstListenerDidAdd(t),t._options&&t._options.onListenerDidAdd&&t._options.onListenerDidAdd(t,n,r),s={dispose:function(){s.dispose=e._noop,t._disposed||(u(),t._options&&t._options.onLastListenerRemove&&t._listeners.isEmpty()&&t._options.onLastListenerRemove(t))}},Array.isArray(i)&&i.push(s),s}),this._event},enumerable:!0,configurable:!0}),e.prototype.fire=function(e){if(this._listeners){this._deliveryQueue||(this._deliveryQueue=[]);for(var t=this._listeners.iterator(),n=t.next();!n.done;n=t.next())this._deliveryQueue.push([n.value,e]);for(;this._deliveryQueue.length>0;){var r=this._deliveryQueue.shift(),i=r[0],o=r[1];try{"function"==typeof i?i.call(void 0,o):i[0].call(i[1],o)}catch(n){Object(u.onUnexpectedError)(n)}}}},e.prototype.dispose=function(){this._listeners&&(this._listeners=void 0),this._deliveryQueue&&(this._deliveryQueue.length=0),this._disposed=!0},e._noop=function(){},e}(),l=function(){function e(){var e=this;this.hasListeners=!1,this.events=[],this.emitter=new c({onFirstListenerAdd:function(){return e.onFirstListenerAdd()},onLastListenerRemove:function(){return e.onLastListenerRemove()}})}return Object.defineProperty(e.prototype,"event",{get:function(){return this.emitter.event},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this,n={event:e,listener:null};this.events.push(n),this.hasListeners&&this.hook(n);return Object(i.toDisposable)(Object(s.once)(function(){t.hasListeners&&t.unhook(n);var e=t.events.indexOf(n);t.events.splice(e,1)}))},e.prototype.onFirstListenerAdd=function(){var e=this;this.hasListeners=!0,this.events.forEach(function(t){return e.hook(t)})},e.prototype.onLastListenerRemove=function(){var e=this;this.hasListeners=!1,this.events.forEach(function(t){return e.unhook(t)})},e.prototype.hook=function(e){var t=this;e.listener=e.event(function(e){return t.emitter.fire(e)})},e.prototype.unhook=function(e){e.listener.dispose(),e.listener=null},e.prototype.dispose=function(){this.emitter.dispose()},e}();function f(e){var t,n=new c({onFirstListenerAdd:function(){return t=e(function(e){return n.fire(e)})},onLastListenerRemove:function(){return t.dispose()}});return n.event}function d(e){var t=new c,n=!1;return e.then(null,function(){return null}).then(function(){n?t.fire():setTimeout(function(){return t.fire()},0)}),n=!0,t.event}function h(e){return new o.TPromise(function(t){var n=e(function(e){n.dispose(),t(e)})})}function m(e){return function(t,n,r){void 0===n&&(n=null);var i=e(function(e){return i.dispose(),t.call(n,e)},null,r);return i}}function p(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t,n,r){return void 0===n&&(n=null),Object(i.combinedDisposable)(e.map(function(e){return e(function(e){return t.call(n,e)},null,r)}))}}function _(e,t,n,r){var i;void 0===n&&(n=100),void 0===r&&(r=!1);var o=void 0,s=void 0,u=0,a=new c({onFirstListenerAdd:function(){i=e(function(e){u++,o=t(o,e),r&&!s&&a.fire(o),clearTimeout(s),s=setTimeout(function(){var e=o;o=void 0,s=void 0,(!r||u>1)&&a.fire(e),u=0},n)})},onLastListenerRemove:function(){i.dispose()}});return a.event}var g=function(){function e(){this.buffers=[]}return e.prototype.wrapEvent=function(e){var t=this;return function(n,r,i){return e(function(e){var i=t.buffers[t.buffers.length-1];i?i.push(function(){return n.call(r,e)}):n.call(r,e)},void 0,i)}},e.prototype.bufferEvents=function(e){var t=[];this.buffers.push(t),e(),this.buffers.pop(),t.forEach(function(e){return e()})},e}();function v(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){return n.call(r,t(e))},null,i)}}function y(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){t(e),n.call(r,e)},null,i)}}function b(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){return t(e)&&n.call(r,e)},null,i)}}var C=function(){function e(e){this._event=e}return Object.defineProperty(e.prototype,"event",{get:function(){return this._event},enumerable:!0,configurable:!0}),e.prototype.map=function(t){return new e(v(this._event,t))},e.prototype.forEach=function(t){return new e(y(this._event,t))},e.prototype.filter=function(t){return new e(b(this._event,t))},e.prototype.latch=function(){return new e(A(this._event))},e.prototype.on=function(e,t,n){return this._event(e,t,n)},e}();function S(e){return new C(e)}function E(e){var t=(new Date).getTime();return v(m(e),function(e){return(new Date).getTime()-t})}function L(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice();var r=e(function(e){n?n.push(e):o.fire(e)}),i=function(){n.forEach(function(e){return o.fire(e)}),n=null},o=new c({onFirstListenerAdd:function(){r||(r=e(function(e){return o.fire(e)}))},onFirstListenerDidAdd:function(){n&&(t?setTimeout(i):i())},onLastListenerRemove:function(){r.dispose(),r=null}});return o.event}function w(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice(),e(function(e){n.push(e),i.fire(e)});var r=function(e,t){return n.forEach(function(n){return e.call(t,n)})},i=new c({onListenerDidAdd:function(e,n,i){t?setTimeout(function(){return r(n,i)}):r(n,i)}});return i.event}var N=function(){function e(){this.emitter=new c,this.event=this.emitter.event,this.disposable=i.empty}return Object.defineProperty(e.prototype,"input",{set:function(e){this.disposable.dispose(),this.disposable=e(this.emitter.fire,this.emitter)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.disposable.dispose(),this.emitter.dispose()},e}();function P(e,t,n){void 0===n&&(n=function(e){return e});var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.fire(n.apply(void 0,e))},i=new c({onFirstListenerAdd:function(){return e.on(t,r)},onLastListenerRemove:function(){return e.removeListener(t,r)}});return i.event}function A(e){var t,n=!0;return b(e,function(e){var r=n||e!==t;return n=!1,t=e,r})}},"./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/*! exports provided: once */function(e,t,n){"use strict";function r(e){var t,n=this,r=!1;return function(){return r?t:(r=!0,t=e.apply(n,arguments))}}n.r(t),n.d(t,"once",function(){return r})},"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/*! exports provided: KeyCodeUtils, KeyChord, createKeybinding, createSimpleKeybinding, SimpleKeybinding, ChordKeybinding, ResolvedKeybindingPart, ResolvedKeybinding */function(e,t,n){"use strict";n.r(t),n.d(t,"KeyCodeUtils",function(){return r}),n.d(t,"KeyChord",function(){return a}),n.d(t,"createKeybinding",function(){return c}),n.d(t,"createSimpleKeybinding",function(){return l}),n.d(t,"SimpleKeybinding",function(){return f}),n.d(t,"ChordKeybinding",function(){return d}),n.d(t,"ResolvedKeybindingPart",function(){return h}),n.d(t,"ResolvedKeybinding",function(){return m});var r,i=function(){function e(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}return e.prototype.define=function(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e},e.prototype.keyCodeToStr=function(e){return this._keyCodeToStr[e]},e.prototype.strToKeyCode=function(e){return this._strToKeyCode[e.toLowerCase()]||0},e}(),o=new i,s=new i,u=new i;function a(e,t){return(e|(65535&t)<<16>>>0)>>>0}function c(e,t){if(0===e)return null;var n=(65535&e)>>>0,r=(4294901760&e)>>>16;return 0!==r?new d(l(n,t),l(r,t)):l(n,t)}function l(e,t){var n=!!(2048&e),r=!!(256&e);return new f(2===t?r:n,!!(1024&e),!!(512&e),2===t?n:r,255&e)}!function(){function e(e,t,n,r){void 0===n&&(n=t),void 0===r&&(r=n),o.define(e,t),s.define(e,n),u.define(e,r)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return o.keyCodeToStr(e)},e.fromString=function(e){return o.strToKeyCode(e)},e.toUserSettingsUS=function(e){return s.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return u.keyCodeToStr(e)},e.fromUserSettings=function(e){return s.strToKeyCode(e)||u.strToKeyCode(e)}}(r||(r={}));var f=function(){function e(e,t,n,r,i){this.type=1,this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyCode=i}return e.prototype.equals=function(e){return 1===e.type&&(this.ctrlKey===e.ctrlKey&&this.shiftKey===e.shiftKey&&this.altKey===e.altKey&&this.metaKey===e.metaKey&&this.keyCode===e.keyCode)},e.prototype.getHashCode=function(){return""+(this.ctrlKey?"1":"0")+(this.shiftKey?"1":"0")+(this.altKey?"1":"0")+(this.metaKey?"1":"0")+this.keyCode},e.prototype.isModifierKey=function(){return 0===this.keyCode||5===this.keyCode||57===this.keyCode||6===this.keyCode||4===this.keyCode},e.prototype.isDuplicateModifierCase=function(){return this.ctrlKey&&5===this.keyCode||this.shiftKey&&4===this.keyCode||this.altKey&&6===this.keyCode||this.metaKey&&57===this.keyCode},e}(),d=function(){function e(e,t){this.type=2,this.firstPart=e,this.chordPart=t}return e.prototype.getHashCode=function(){return this.firstPart.getHashCode()+";"+this.chordPart.getHashCode()},e}(),h=function(){return function(e,t,n,r,i,o){this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyLabel=i,this.keyAriaLabel=o}}(),m=function(){return function(){}}()},"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/*! exports provided: empty, isDisposable, dispose, combinedDisposable, toDisposable, Disposable, ReferenceCollection, ImmortalReference */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return i}),n.d(t,"isDisposable",function(){return o}),n.d(t,"dispose",function(){return s}),n.d(t,"combinedDisposable",function(){return u}),n.d(t,"toDisposable",function(){return a}),n.d(t,"Disposable",function(){return c}),n.d(t,"ReferenceCollection",function(){return l}),n.d(t,"ImmortalReference",function(){return f});var r=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),i=Object.freeze({dispose:function(){}});function o(e){return"function"==typeof e.dispose&&0===e.dispose.length}function s(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Array.isArray(e)?(e.forEach(function(e){return e&&e.dispose()}),[]):0===t.length?e?(e.dispose(),e):void 0:(s(e),s(t),[])}function u(e){return{dispose:function(){return s(e)}}}function a(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){for(var t=0,n=e;t<n.length;t++){(0,n[t])()}}}}var c=function(){function e(){this._toDispose=[]}return e.prototype.dispose=function(){this._toDispose=s(this._toDispose)},e.prototype._register=function(e){return this._toDispose.push(e),e},e}(),l=function(){function e(){this.references=Object.create(null)}return e.prototype.acquire=function(e){var t=this,n=this.references[e];n||(n=this.references[e]={counter:0,object:this.createReferencedObject(e)});var i=n.object,o=Object(r.once)(function(){0==--n.counter&&(t.destroyReferencedObject(n.object),delete t.references[e])});return n.counter++,{object:i,dispose:o}},e}(),f=function(){function e(e){this.object=e}return e.prototype.dispose=function(){},e}()},"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/*! exports provided: LinkedList */function(e,t,n){"use strict";n.r(t),n.d(t,"LinkedList",function(){return i});var r=function(){return function(e){this.element=e}}(),i=function(){function e(){}return e.prototype.isEmpty=function(){return!this._first},e.prototype.clear=function(){this._first=void 0,this._last=void 0},e.prototype.unshift=function(e){return this.insert(e,!1)},e.prototype.push=function(e){return this.insert(e,!0)},e.prototype.insert=function(e,t){var n=this,i=new r(e);if(this._first)if(t){var o=this._last;this._last=i,i.prev=o,o.next=i}else{var s=this._first;this._first=i,i.next=s,s.prev=i}else this._first=i,this._last=i;return function(){for(var e=n._first;e instanceof r;e=e.next)if(e===i){if(e.prev&&e.next){var t=e.prev;t.next=e.next,e.next.prev=t}else e.prev||e.next?e.next?e.prev||(n._first=n._first.next,n._first.prev=void 0):(n._last=n._last.prev,n._last.next=void 0):(n._first=void 0,n._last=void 0);break}}},e.prototype.iterator=function(){var e={done:void 0,value:void 0},t=this._first;return{next:function(){return t?(e.done=!1,e.value=t.element,t=t.next):(e.done=!0,e.value=void 0),e}}},e.prototype.toArray=function(){for(var e=[],t=this._first;t instanceof r;t=t.next)e.push(t.element);return e},e}()},"./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/*! exports provided: values, keys, getOrSet, StringIterator, PathIterator, TernarySearchTree, ResourceMap, Touch, LinkedMap, LRUCache */function(e,t,n){"use strict";n.r(t),n.d(t,"values",function(){return o}),n.d(t,"keys",function(){return s}),n.d(t,"getOrSet",function(){return u}),n.d(t,"StringIterator",function(){return c}),n.d(t,"PathIterator",function(){return l}),n.d(t,"TernarySearchTree",function(){return d}),n.d(t,"ResourceMap",function(){return h}),n.d(t,"Touch",function(){return a}),n.d(t,"LinkedMap",function(){return m}),n.d(t,"LRUCache",function(){return p});var r=n(/*! ./uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function o(e){var t=[];return e.forEach(function(e){return t.push(e)}),t}function s(e){var t=[];return e.forEach(function(e,n){return t.push(n)}),t}function u(e,t,n){var r=e.get(t);return void 0===r&&(r=n,e.set(t,r)),r}var a,c=function(){function e(){this._value="",this._pos=0}return e.prototype.reset=function(e){return this._value=e,this._pos=0,this},e.prototype.next=function(){return this._pos+=1,this},e.prototype.join=function(e){return e.join("")},e.prototype.hasNext=function(){return this._pos<this._value.length-1},e.prototype.cmp=function(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)},e.prototype.value=function(){return this._value[this._pos]},e}(),l=function(){function e(){}return e.prototype.reset=function(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()},e.prototype.hasNext=function(){return this._to<this._value.length},e.prototype.join=function(e){return e.join("/")},e.prototype.next=function(){this._from=this._to;for(var t=!0;this._to<this._value.length;this._to++){var n=this._value.charCodeAt(this._to);if(n===e._fwd||n===e._bwd){if(!t)break;this._from++}else t=!1}return this},e.prototype.cmp=function(e){for(var t=0,n=e.length,r=this._from;t<n&&r<this._to;){var i=e.charCodeAt(t)-this._value.charCodeAt(r);if(0!==i)return i;t+=1,r+=1}return n===this._to-this._from?0:t<n?-1:1},e.prototype.value=function(){return this._value.substring(this._from,this._to)},e._fwd="/".charCodeAt(0),e._bwd="\\".charCodeAt(0),e}(),f=function(){function e(){}return e.prototype.isEmpty=function(){return!(this.left||this.mid||this.right||this.element)},e}(),d=function(){function e(e){this._iter=e}return e.forPaths=function(){return new e(new l)},e.forStrings=function(){return new e(new c)},e.prototype.clear=function(){this._root=void 0},e.prototype.set=function(e,t){var n,r=this._iter.reset(e);for(this._root||(this._root=new f,this._root.str=r.value()),n=this._root;;){var i=r.cmp(n.str);if(i>0)n.left||(n.left=new f,n.left.str=r.value()),n=n.left;else if(i<0)n.right||(n.right=new f,n.right.str=r.value()),n=n.right;else{if(!r.hasNext())break;r.next(),n.mid||(n.mid=new f,n.mid.str=r.value()),n=n.mid}}var o=n.element;return n.element=t,o},e.prototype.get=function(e){for(var t=this._iter.reset(e),n=this._root;n;){var r=t.cmp(n.str);if(r>0)n=n.left;else if(r<0)n=n.right;else{if(!t.hasNext())break;t.next(),n=n.mid}}return n?n.element:void 0},e.prototype.delete=function(e){for(var t=this._iter.reset(e),n=[],r=this._root;r;){var i=t.cmp(r.str);if(i>0)n.push([1,r]),r=r.left;else if(i<0)n.push([-1,r]),r=r.right;else{if(!t.hasNext()){for(r.element=void 0;n.length>0&&r.isEmpty();){var o=n.pop(),s=o[0],u=o[1];switch(s){case 1:u.left=void 0;break;case 0:u.mid=void 0;break;case-1:u.right=void 0}r=u}break}t.next(),n.push([0,r]),r=r.mid}}},e.prototype.findSubstr=function(e){for(var t,n=this._iter.reset(e),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext())break;n.next(),t=r.element||t,r=r.mid}}return r&&r.element||t},e.prototype.findSuperstr=function(t){for(var n=this._iter.reset(t),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext()){if(!r.mid)return;var o=new e(this._iter);return o._root=r.mid,o}n.next(),r=r.mid}}},e.prototype.forEach=function(e){this._forEach(this._root,[],e)},e.prototype._forEach=function(e,t,n){e&&(this._forEach(e.left,t,n),t.push(e.str),e.element&&n(e.element,this._iter.join(t)),this._forEach(e.mid,t,n),t.pop(),this._forEach(e.right,t,n))},e}(),h=function(){function e(){this.map=new Map,this.ignoreCase=!1}return e.prototype.set=function(e,t){this.map.set(this.toKey(e),t)},e.prototype.get=function(e){return this.map.get(this.toKey(e))},e.prototype.has=function(e){return this.map.has(this.toKey(e))},Object.defineProperty(e.prototype,"size",{get:function(){return this.map.size},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this.map.clear()},e.prototype.delete=function(e){return this.map.delete(this.toKey(e))},e.prototype.forEach=function(e){this.map.forEach(e)},e.prototype.values=function(){return o(this.map)},e.prototype.toKey=function(e){var t=e.toString();return this.ignoreCase&&(t=t.toLowerCase()),t},e.prototype.keys=function(){return s(this.map).map(r.default.parse)},e}();!function(e){e[e.None=0]="None",e[e.AsOld=1]="AsOld",e[e.AsNew=2]="AsNew"}(a||(a={}));var m=function(){function e(){this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0}return e.prototype.clear=function(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0},e.prototype.isEmpty=function(){return!this._head&&!this._tail},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.get=function(e,t){void 0===t&&(t=a.None);var n=this._map.get(e);if(n)return t!==a.None&&this.touch(n,t),n.value},e.prototype.set=function(e,t,n){void 0===n&&(n=a.None);var r=this._map.get(e);if(r)r.value=t,n!==a.None&&this.touch(r,n);else{switch(r={key:e,value:t,next:void 0,previous:void 0},n){case a.None:this.addItemLast(r);break;case a.AsOld:this.addItemFirst(r);break;case a.AsNew:default:this.addItemLast(r)}this._map.set(e,r),this._size++}},e.prototype.delete=function(e){return!!this.remove(e)},e.prototype.remove=function(e){var t=this._map.get(e);if(t)return this._map.delete(e),this.removeItem(t),this._size--,t.value},e.prototype.shift=function(){if(this._head||this._tail){if(!this._head||!this._tail)throw new Error("Invalid list");var e=this._head;return this._map.delete(e.key),this.removeItem(e),this._size--,e.value}},e.prototype.forEach=function(e,t){for(var n=this._head;n;)t?e.bind(t)(n.value,n.key,this):e(n.value,n.key,this),n=n.next},e.prototype.values=function(){for(var e=[],t=this._head;t;)e.push(t.value),t=t.next;return e},e.prototype.keys=function(){for(var e=[],t=this._head;t;)e.push(t.key),t=t.next;return e},e.prototype.trimOld=function(e){if(!(e>=this.size))if(0!==e){for(var t=this._head,n=this.size;t&&n>e;)this._map.delete(t.key),t=t.next,n--;this._head=t,this._size=n,t.previous=void 0}else this.clear()},e.prototype.addItemFirst=function(e){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");e.next=this._head,this._head.previous=e}else this._tail=e;this._head=e},e.prototype.addItemLast=function(e){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");e.previous=this._tail,this._tail.next=e}else this._head=e;this._tail=e},e.prototype.removeItem=function(e){if(e===this._head&&e===this._tail)this._head=void 0,this._tail=void 0;else if(e===this._head)this._head=e.next;else if(e===this._tail)this._tail=e.previous;else{var t=e.next,n=e.previous;if(!t||!n)throw new Error("Invalid list");t.previous=n,n.next=t}},e.prototype.touch=function(e,t){if(!this._head||!this._tail)throw new Error("Invalid list");if(t===a.AsOld||t===a.AsNew)if(t===a.AsOld){if(e===this._head)return;var n=e.next,r=e.previous;e===this._tail?(r.next=void 0,this._tail=r):(n.previous=r,r.next=n),e.previous=void 0,e.next=this._head,this._head.previous=e,this._head=e}else if(t===a.AsNew){if(e===this._tail)return;n=e.next,r=e.previous;e===this._head?(n.previous=void 0,this._head=n):(n.previous=r,r.next=n),e.next=void 0,e.previous=this._tail,this._tail.next=e,this._tail=e}},e.prototype.toJSON=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),e},e.prototype.fromJSON=function(e){this.clear();for(var t=0,n=e;t<n.length;t++){var r=n[t],i=r[0],o=r[1];this.set(i,o)}},e}(),p=function(e){function t(t,n){void 0===n&&(n=1);var r=e.call(this)||this;return r._limit=t,r._ratio=Math.min(Math.max(0,n),1),r}return i(t,e),Object.defineProperty(t.prototype,"limit",{get:function(){return this._limit},set:function(e){this._limit=e,this.checkTrim()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ratio",{get:function(){return this._ratio},set:function(e){this._ratio=Math.min(Math.max(0,e),1),this.checkTrim()},enumerable:!0,configurable:!0}),t.prototype.get=function(t){return e.prototype.get.call(this,t,a.AsNew)},t.prototype.peek=function(t){return e.prototype.get.call(this,t,a.None)},t.prototype.set=function(t,n){e.prototype.set.call(this,t,n,a.AsNew),this.checkTrim()},t.prototype.checkTrim=function(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))},t}(m)},"./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/*! exports provided: LANGUAGE_DEFAULT, Platform, isWindows, isMacintosh, isLinux, isNative, isWeb, platform, isRootUser, language, locale, translationsConfigFile, globals, setImmediate, OS */function(e,t,n){"use strict";n.r(t),function(e,r){n.d(t,"LANGUAGE_DEFAULT",function(){return h}),n.d(t,"Platform",function(){return i}),n.d(t,"isWindows",function(){return y}),n.d(t,"isMacintosh",function(){return b}),n.d(t,"isLinux",function(){return C}),n.d(t,"isNative",function(){return S}),n.d(t,"isWeb",function(){return E}),n.d(t,"platform",function(){return L}),n.d(t,"isRootUser",function(){return w}),n.d(t,"language",function(){return N}),n.d(t,"locale",function(){return P}),n.d(t,"translationsConfigFile",function(){return A}),n.d(t,"globals",function(){return x}),n.d(t,"setImmediate",function(){return M}),n.d(t,"OS",function(){return O});var i,o=!1,s=!1,u=!1,a=!1,c=!1,l=void 0,f=void 0,d=void 0,h="en";if("object"==typeof e&&"function"==typeof e.nextTick&&"string"==typeof e.platform){o="win32"===e.platform,s="darwin"===e.platform,u="linux"===e.platform;var m=e.env.VSCODE_NLS_CONFIG;if(m)try{var p=JSON.parse(m),_=p.availableLanguages["*"];l=p.locale,f=_||h,d=p._translationsConfigFile}catch(e){}a=!0}else if("object"==typeof navigator){var g=navigator.userAgent;o=g.indexOf("Windows")>=0,s=g.indexOf("Macintosh")>=0,u=g.indexOf("Linux")>=0,c=!0,f=l=navigator.language}!function(e){e[e.Web=0]="Web",e[e.Mac=1]="Mac",e[e.Linux=2]="Linux",e[e.Windows=3]="Windows"}(i||(i={}));var v=i.Web;a&&(s?v=i.Mac:o?v=i.Windows:u&&(v=i.Linux));var y=o,b=s,C=u,S=a,E=c,L=v;function w(){return a&&!o&&0===e.getuid()}var N=f,P=l,A=d,x="object"==typeof self?self:"object"==typeof r?r:{},k=null;function M(t){return null===k&&(k=x.setImmediate?x.setImmediate.bind(x):void 0!==e&&"function"==typeof e.nextTick?e.nextTick.bind(e):x.setTimeout.bind(x)),k(t)}var O=s?2:o?1:3}.call(this,n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"),n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/*! exports provided: empty, isFalsyOrWhitespace, pad, format, escape, escapeRegExpCharacters, trim, ltrim, rtrim, convertSimple2RegExpPattern, stripWildcards, startsWith, endsWith, createRegExp, regExpLeadsToEndlessLoop, regExpContainsBackreference, canNormalize, normalizeNFC, normalizeNFD, firstNonWhitespaceIndex, getLeadingWhitespace, lastNonWhitespaceIndex, compare, compareIgnoreCase, equalsIgnoreCase, startsWithIgnoreCase, commonPrefixLength, commonSuffixLength, overlap, isHighSurrogate, isLowSurrogate, containsRTL, containsEmoji, isBasicASCII, containsFullWidthCharacter, isFullWidthCharacter, lcut, removeAnsiEscapeCodes, UTF8_BOM_CHARACTER, startsWithUTF8BOM, stripUTF8BOM, safeBtoa, repeat, fuzzyContains, containsUppercaseCharacter */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return i}),n.d(t,"isFalsyOrWhitespace",function(){return o}),n.d(t,"pad",function(){return s}),n.d(t,"format",function(){return a}),n.d(t,"escape",function(){return c}),n.d(t,"escapeRegExpCharacters",function(){return l}),n.d(t,"trim",function(){return f}),n.d(t,"ltrim",function(){return d}),n.d(t,"rtrim",function(){return h}),n.d(t,"convertSimple2RegExpPattern",function(){return m}),n.d(t,"stripWildcards",function(){return p}),n.d(t,"startsWith",function(){return _}),n.d(t,"endsWith",function(){return g}),n.d(t,"createRegExp",function(){return v}),n.d(t,"regExpLeadsToEndlessLoop",function(){return y}),n.d(t,"regExpContainsBackreference",function(){return b}),n.d(t,"canNormalize",function(){return C}),n.d(t,"normalizeNFC",function(){return E}),n.d(t,"normalizeNFD",function(){return w}),n.d(t,"firstNonWhitespaceIndex",function(){return A}),n.d(t,"getLeadingWhitespace",function(){return x}),n.d(t,"lastNonWhitespaceIndex",function(){return k}),n.d(t,"compare",function(){return M}),n.d(t,"compareIgnoreCase",function(){return O}),n.d(t,"equalsIgnoreCase",function(){return I}),n.d(t,"startsWithIgnoreCase",function(){return U}),n.d(t,"commonPrefixLength",function(){return R}),n.d(t,"commonSuffixLength",function(){return K}),n.d(t,"overlap",function(){return q}),n.d(t,"isHighSurrogate",function(){return V}),n.d(t,"isLowSurrogate",function(){return B}),n.d(t,"containsRTL",function(){return H}),n.d(t,"containsEmoji",function(){return J}),n.d(t,"isBasicASCII",function(){return $}),n.d(t,"containsFullWidthCharacter",function(){return G}),n.d(t,"isFullWidthCharacter",function(){return X}),n.d(t,"lcut",function(){return Z}),n.d(t,"removeAnsiEscapeCodes",function(){return re}),n.d(t,"UTF8_BOM_CHARACTER",function(){return ie}),n.d(t,"startsWithUTF8BOM",function(){return oe}),n.d(t,"stripUTF8BOM",function(){return se}),n.d(t,"safeBtoa",function(){return ue}),n.d(t,"repeat",function(){return ae}),n.d(t,"fuzzyContains",function(){return ce}),n.d(t,"containsUppercaseCharacter",function(){return le});var r=n(/*! ./map.js */"./node_modules/monaco-editor/esm/vs/base/common/map.js"),i="";function o(e){return!e||"string"!=typeof e||0===e.trim().length}function s(e,t,n){void 0===n&&(n="0");for(var r=""+e,i=[r],o=r.length;o<t;o++)i.push(n);return i.reverse().join("")}var u=/{(\d+)}/g;function a(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return 0===t.length?e:e.replace(u,function(e,n){var r=parseInt(n,10);return isNaN(r)||r<0||r>=t.length?e:t[r]})}function c(e){return e.replace(/[<|>|&]/g,function(e){switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";default:return e}})}function l(e){return e.replace(/[\-\\\{\}\*\+\?\|\^\$\.\[\]\(\)\#]/g,"\\$&")}function f(e,t){return void 0===t&&(t=" "),h(d(e,t),t)}function d(e,t){if(!e||!t)return e;var n=t.length;if(0===n||0===e.length)return e;for(var r=0;e.indexOf(t,r)===r;)r+=n;return e.substring(r)}function h(e,t){if(!e||!t)return e;var n=t.length,r=e.length;if(0===n||0===r)return e;for(var i=r,o=-1;-1!==(o=e.lastIndexOf(t,i-1))&&o+n===i;){if(0===o)return"";i=o}return e.substring(0,i)}function m(e){return e.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}function p(e){return e.replace(/\*/g,"")}function _(e,t){if(e.length<t.length)return!1;if(e===t)return!0;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function g(e,t){var n=e.length-t.length;return n>0?e.indexOf(t,n)===n:0===n&&e===t}function v(e,t,n){if(void 0===n&&(n={}),!e)throw new Error("Cannot create regex from empty string");t||(e=l(e)),n.wholeWord&&(/\B/.test(e.charAt(0))||(e="\\b"+e),/\B/.test(e.charAt(e.length-1))||(e+="\\b"));var r="";return n.global&&(r+="g"),n.matchCase||(r+="i"),n.multiline&&(r+="m"),new RegExp(e,r)}function y(e){return"^"!==e.source&&"^$"!==e.source&&"$"!==e.source&&"^\\s*$"!==e.source&&(e.exec("")&&0===e.lastIndex)}function b(e){return!!e.match(/([^\\]|^)(\\\\)*\\\d+/)}var C="function"==typeof"".normalize,S=new r.LRUCache(1e4);function E(e){return P(e,"NFC",S)}var L=new r.LRUCache(1e4);function w(e){return P(e,"NFD",L)}var N=/[^\u0000-\u0080]/;function P(e,t,n){if(!C||!e)return e;var r,i=n.get(e);return i||(r=N.test(e)?e.normalize(t):e,n.set(e,r),r)}function A(e){for(var t=0,n=e.length;t<n;t++){var r=e.charCodeAt(t);if(32!==r&&9!==r)return t}return-1}function x(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);for(var r=t;r<n;r++){var i=e.charCodeAt(r);if(32!==i&&9!==i)return e.substring(t,r)}return e.substring(t,n)}function k(e,t){void 0===t&&(t=e.length-1);for(var n=t;n>=0;n--){var r=e.charCodeAt(n);if(32!==r&&9!==r)return n}return-1}function M(e,t){return e<t?-1:e>t?1:0}function O(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){var i=e.charCodeAt(r),o=t.charCodeAt(r);if(i!==o){D(i)&&(i+=32),D(o)&&(o+=32);var s=i-o;if(0!==s)return T(i)&&T(o)?s:M(e.toLowerCase(),t.toLowerCase())}}return e.length<t.length?-1:e.length>t.length?1:0}function T(e){return e>=97&&e<=122}function D(e){return e>=65&&e<=90}function j(e){return T(e)||D(e)}function I(e,t){return(e?e.length:0)===(t?t.length:0)&&F(e,t)}function F(e,t,n){if(void 0===n&&(n=e.length),"string"!=typeof e||"string"!=typeof t)return!1;for(var r=0;r<n;r++){var i=e.charCodeAt(r),o=t.charCodeAt(r);if(i!==o)if(j(i)&&j(o)){var s=Math.abs(i-o);if(0!==s&&32!==s)return!1}else if(String.fromCharCode(i).toLowerCase()!==String.fromCharCode(o).toLowerCase())return!1}return!0}function U(e,t){var n=t.length;return!(t.length>e.length)&&F(e,t,n)}function R(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n++)if(e.charCodeAt(n)!==t.charCodeAt(n))return n;return r}function K(e,t){var n,r=Math.min(e.length,t.length),i=e.length-1,o=t.length-1;for(n=0;n<r;n++)if(e.charCodeAt(i-n)!==t.charCodeAt(o-n))return n;return r}function W(e,t,n,r,i,o){for(;t<n&&i<o;){if(e[t]!==r[i])return!1;t+=1,i+=1}return!0}function q(e,t){var n=e.length,r=t.length,i=n-r;if(0===i)return e===t?n:0;for(i<0&&(r+=i,i=0);i<n&&r>0;){if(W(e,i,n,t,0,r))return r;r-=1,i+=1}return 0}function V(e){return 55296<=e&&e<=56319}function B(e){return 56320<=e&&e<=57343}var Y=/(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u08BD\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE33\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDCFF]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD50-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;function H(e){return Y.test(e)}var z=/(?:[\u231A\u231B\u23F0\u23F3\u2600-\u27BF\u2B50\u2B55]|\uD83C[\uDDE6-\uDDFF\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F\uDE80-\uDEF8]|\uD83E[\uDD00-\uDDE6])/;function J(e){return z.test(e)}var Q=/^[\t\n\r\x20-\x7E]*$/;function $(e){return Q.test(e)}function G(e){for(var t=0,n=e.length;t<n;t++)if(X(e.charCodeAt(t)))return!0;return!1}function X(e){return(e=+e)>=11904&&e<=55215||e>=63744&&e<=64255||e>=65281&&e<=65374}function Z(e,t){if(e.length<t)return e;for(var n=/\b/g,r=0;n.test(e)&&!(e.length-n.lastIndex<t);)r=n.lastIndex,n.lastIndex+=1;return e.substring(r).replace(/^\s/,i)}var ee=/\x1B\x5B[12]?K/g,te=/\x1b\[\d+m/g,ne=/\x1b\[0?m/g;function re(e){return e&&(e=(e=(e=e.replace(ee,"")).replace(te,"")).replace(ne,"")),e}var ie=String.fromCharCode(65279);function oe(e){return e&&e.length>0&&65279===e.charCodeAt(0)}function se(e){return oe(e)?e.substr(1):e}function ue(e){return btoa(encodeURIComponent(e))}function ae(e,t){for(var n="",r=0;r<t;r++)n+=e;return n}function ce(e,t){if(!e||!t)return!1;if(e.length<t.length)return!1;for(var n=t.length,r=e.toLowerCase(),i=0,o=-1;i<n;){var s=r.indexOf(t[i],o+1);if(s<0)return!1;o=s,i++}return!0}function le(e,t){return void 0===t&&(t=!1),!!e&&(t&&(e=e.replace(/\\./g,"")),e.toLowerCase()!==e)}},"./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function o(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function s(e){return encodeURIComponent(e).replace(/[!'()*]/g,o)}function u(e){return e.replace(/[#?]/,o)}var a=/^\w[\w\d+.-]*$/,c=/^\//,l=/^\/\//;var f="",d="/",h=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,m=/^\/[a-zA-Z]:/,p=/^(\/)?([A-Z]:)/,_=/^[a-zA-Z]:/,g=function(){function e(e,t,n,r,i){"object"==typeof e?(this.scheme=e.scheme||f,this.authority=e.authority||f,this.path=e.path||f,this.query=e.query||f,this.fragment=e.fragment||f):(this.scheme=e||f,this.authority=t||f,this.path=n||f,this.query=r||f,this.fragment=i||f,function(e){if(e.scheme&&!a.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!c.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(l.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this))}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"fsPath",{get:function(){return y(this)},enumerable:!0,configurable:!0}),e.prototype.with=function(e){if(!e)return this;var t=e.scheme,n=e.authority,r=e.path,i=e.query,o=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=f),void 0===n?n=this.authority:null===n&&(n=f),void 0===r?r=this.path:null===r&&(r=f),void 0===i?i=this.query:null===i&&(i=f),void 0===o?o=this.fragment:null===o&&(o=f),t===this.scheme&&n===this.authority&&r===this.path&&i===this.query&&o===this.fragment?this:new v(t,n,r,i,o)},e.parse=function(e){var t=h.exec(e);return t?new v(t[2]||f,decodeURIComponent(t[4]||f),decodeURIComponent(t[5]||f),decodeURIComponent(t[7]||f),decodeURIComponent(t[9]||f)):new v(f,f,f,f,f)},e.file=function(e){var t=f;if(r.isWindows&&(e=e.replace(/\\/g,d)),e[0]===d&&e[1]===d){var n=e.indexOf(d,2);-1===n?(t=e.substring(2),e=d):(t=e.substring(2,n),e=e.substring(n)||d)}return _.test(e)?e=d+e:e[0]!==d&&(e=d+e),new v("file",t,e,f,f)},e.from=function(e){return new v(e.scheme,e.authority,e.path,e.query,e.fragment)},e.prototype.toString=function(e){return void 0===e&&(e=!1),b(this,e)},e.prototype.toJSON=function(){var e={$mid:1,fsPath:this.fsPath,external:this.toString()};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){if(t){if(t instanceof e)return t;var n=new v(t);return n._fsPath=t.fsPath,n._formatted=t.external,n}return t},e}();t.default=g;var v=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return i(t,e),Object.defineProperty(t.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=y(this)),this._fsPath},enumerable:!0,configurable:!0}),t.prototype.toString=function(e){return void 0===e&&(e=!1),e?b(this,!0):(this._formatted||(this._formatted=b(this,!1)),this._formatted)},t}(g);function y(e){var t;return t=e.authority&&e.path&&"file"===e.scheme?"//"+e.authority+e.path:m.test(e.path)?e.path[1].toLowerCase()+e.path.substr(2):e.path,r.isWindows&&(t=t.replace(/\//g,"\\")),t}function b(e,t){var n=t?u:s,r=[],i=e.scheme,o=e.authority,a=e.path,c=e.query,l=e.fragment;if(i&&r.push(i,":"),(o||"file"===i)&&r.push("//"),o){if(-1!==(g=o.indexOf("@"))){var h=o.substr(0,g);o=o.substr(g+1),-1===(g=h.indexOf(":"))?r.push(n(h)):r.push(n(h.substr(0,g)),":",n(h.substr(g+1))),r.push("@")}-1===(g=(o=o.toLowerCase()).indexOf(":"))?r.push(n(o)):r.push(n(o.substr(0,g)),o.substr(g))}if(a){var m=p.exec(a);m&&(a=m[1]?"/"+m[2].toLowerCase()+a.substr(3):m[2].toLowerCase()+a.substr(2));for(var _=0;;){var g;if(-1===(g=a.indexOf(d,_))){r.push(n(a.substring(_)));break}r.push(n(a.substring(_,g)),d),_=g+1}}return c&&r.push("?",n(c)),l&&r.push("#",n(l)),r.join(f)}},"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js ***!
  \*********************************************************************/
/*! exports provided: Promise, TPromise, PPromise */function(e,t,n){"use strict";n.r(t),function(e,r){var i;n.d(t,"Promise",function(){return o}),n.d(t,"TPromise",function(){return s}),n.d(t,"PPromise",function(){return u}),function(){var t=Object.create(null);t["WinJS/Core/_WinJS"]={};var n=function(e,n,r){var i={},o=!1,s=n.map(function(e){return"exports"===e?(o=!0,i):t[e]}),u=r.apply({},s);t[e]=o?i:u};n("WinJS/Core/_Global",[],function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0!==e?e:{}}),n("WinJS/Core/_BaseCoreUtils",["WinJS/Core/_Global"],function(e){var t=null;return{hasWinRT:!!e.Windows,markSupportedForProcessing:function(e){return e.supportedForProcessing=!0,e},_setImmediate:function(n){null===t&&(t=e.setImmediate?e.setImmediate.bind(e):void 0!==r&&"function"==typeof r.nextTick?r.nextTick.bind(r):e.setTimeout.bind(e)),t(n)}}}),n("WinJS/Core/_WriteProfilerMark",["WinJS/Core/_Global"],function(e){return e.msWriteProfilerMark||function(){}}),n("WinJS/Core/_Base",["WinJS/Core/_WinJS","WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_WriteProfilerMark"],function(e,t,n,r){function i(e,t,n){var r,i,o,s=Object.keys(t),u=Array.isArray(e);for(i=0,o=s.length;i<o;i++){var a=s[i],c=95!==a.charCodeAt(0),l=t[a];!l||"object"!=typeof l||void 0===l.value&&"function"!=typeof l.get&&"function"!=typeof l.set?c?u?e.forEach(function(e){e[a]=l}):e[a]=l:(r=r||{})[a]={value:l,enumerable:c,configurable:!0,writable:!0}:(void 0===l.enumerable&&(l.enumerable=c),n&&l.setName&&"function"==typeof l.setName&&l.setName(n+"."+a),(r=r||{})[a]=l)}r&&(u?e.forEach(function(e){Object.defineProperties(e,r)}):Object.defineProperties(e,r))}return function(){var n=e;function o(n,r){var i=n||{};if(r){var o=r.split(".");i===t&&"WinJS"===o[0]&&(i=e,o.splice(0,1));for(var s=0,u=o.length;s<u;s++){var a=o[s];i[a]||Object.defineProperty(i,a,{value:{},writable:!1,enumerable:!0,configurable:!0}),i=i[a]}}return i}function s(e,t,n){var r=o(e,t);return n&&i(r,n,t||"<ANONYMOUS>"),r}n.Namespace||(n.Namespace=Object.create(Object.prototype));var u={uninitialized:1,working:2,initialized:3};Object.defineProperties(n.Namespace,{defineWithParent:{value:s,writable:!0,enumerable:!0,configurable:!0},define:{value:function(e,n){return s(t,e,n)},writable:!0,enumerable:!0,configurable:!0},_lazy:{value:function(e){var t,n,i=u.uninitialized;return{setName:function(e){t=e},get:function(){switch(i){case u.initialized:return n;case u.uninitialized:i=u.working;try{r("WinJS.Namespace._lazy:"+t+",StartTM"),n=e()}finally{r("WinJS.Namespace._lazy:"+t+",StopTM"),i=u.uninitialized}return e=null,i=u.initialized,n;case u.working:throw"Illegal: reentrancy on initialization";default:throw"Illegal"}},set:function(e){switch(i){case u.working:throw"Illegal: reentrancy on initialization";default:i=u.initialized,n=e}},enumerable:!0,configurable:!0}},writable:!0,enumerable:!0,configurable:!0},_moduleDefine:{value:function(e,n,r){var s=[e],u=null;return n&&(u=o(t,n),s.push(u)),i(s,r,n||"<ANONYMOUS>"),u},writable:!0,enumerable:!0,configurable:!0}})}(),function(){function t(e,t,r){return e=e||function(){},n.markSupportedForProcessing(e),t&&i(e.prototype,t),r&&i(e,r),e}e.Namespace.define("WinJS.Class",{define:t,derive:function(e,r,o,s){if(e){r=r||function(){};var u=e.prototype;return r.prototype=Object.create(u),n.markSupportedForProcessing(r),Object.defineProperty(r.prototype,"constructor",{value:r,writable:!0,configurable:!0,enumerable:!0}),o&&i(r.prototype,o),s&&i(r,s),r}return t(r,o,s)},mix:function(e){var t,n;for(e=e||function(){},t=1,n=arguments.length;t<n;t++)i(e.prototype,arguments[t]);return e}})}(),{Namespace:e.Namespace,Class:e.Class}}),n("WinJS/Core/_ErrorFromName",["WinJS/Core/_Base"],function(e){var t=e.Class.derive(Error,function(e,t){this.name=e,this.message=t||e},{},{supportedForProcessing:!1});return e.Namespace.define("WinJS",{ErrorFromName:t}),t}),n("WinJS/Core/_Events",["exports","WinJS/Core/_Base"],function(e,t){function n(e){var t="_on"+e+"state";return{get:function(){var e=this[t];return e&&e.userHandler},set:function(n){var r=this[t];n?(r||(r={wrapper:function(e){return r.userHandler(e)},userHandler:n},Object.defineProperty(this,t,{value:r,enumerable:!1,writable:!0,configurable:!0}),this.addEventListener(e,r.wrapper,!1)),r.userHandler=n):r&&(this.removeEventListener(e,r.wrapper,!1),this[t]=null)},enumerable:!0}}var r=t.Class.define(function(e,t,n){this.detail=t,this.target=n,this.timeStamp=Date.now(),this.type=e},{bubbles:{value:!1,writable:!1},cancelable:{value:!1,writable:!1},currentTarget:{get:function(){return this.target}},defaultPrevented:{get:function(){return this._preventDefaultCalled}},trusted:{value:!1,writable:!1},eventPhase:{value:0,writable:!1},target:null,timeStamp:null,type:null,preventDefault:function(){this._preventDefaultCalled=!0},stopImmediatePropagation:function(){this._stopImmediatePropagationCalled=!0},stopPropagation:function(){}},{supportedForProcessing:!1}),i={_listeners:null,addEventListener:function(e,t,n){n=n||!1,this._listeners=this._listeners||{};for(var r=this._listeners[e]=this._listeners[e]||[],i=0,o=r.length;i<o;i++){var s=r[i];if(s.useCapture===n&&s.listener===t)return}r.push({listener:t,useCapture:n})},dispatchEvent:function(e,t){var n=this._listeners&&this._listeners[e];if(n){for(var i=new r(e,t,this),o=0,s=(n=n.slice(0,n.length)).length;o<s&&!i._stopImmediatePropagationCalled;o++)n[o].listener(i);return i.defaultPrevented||!1}return!1},removeEventListener:function(e,t,n){n=n||!1;var r=this._listeners&&this._listeners[e];if(r)for(var i=0,o=r.length;i<o;i++){var s=r[i];if(s.listener===t&&s.useCapture===n){r.splice(i,1),0===r.length&&delete this._listeners[e];break}}}};t.Namespace._moduleDefine(e,"WinJS.Utilities",{_createEventProperty:n,createEventProperties:function(){for(var e={},t=0,r=arguments.length;t<r;t++){var i=arguments[t];e["on"+i]=n(i)}return e},eventMixin:i})}),n("WinJS/Core/_Trace",["WinJS/Core/_Global"],function(e){function t(e){return e}return{_traceAsyncOperationStarting:e.Debug&&e.Debug.msTraceAsyncOperationStarting&&e.Debug.msTraceAsyncOperationStarting.bind(e.Debug)||t,_traceAsyncOperationCompleted:e.Debug&&e.Debug.msTraceAsyncOperationCompleted&&e.Debug.msTraceAsyncOperationCompleted.bind(e.Debug)||t,_traceAsyncCallbackStarting:e.Debug&&e.Debug.msTraceAsyncCallbackStarting&&e.Debug.msTraceAsyncCallbackStarting.bind(e.Debug)||t,_traceAsyncCallbackCompleted:e.Debug&&e.Debug.msTraceAsyncCallbackCompleted&&e.Debug.msTraceAsyncCallbackCompleted.bind(e.Debug)||t}}),n("WinJS/Promise/_StateMachine",["WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_Base","WinJS/Core/_ErrorFromName","WinJS/Core/_Events","WinJS/Core/_Trace"],function(e,t,n,r,i,o){e.Debug&&(e.Debug.setNonUserCodeExceptions=!0);var s=new(n.Class.mix(n.Class.define(null,{},{supportedForProcessing:!1}),i.eventMixin));s._listeners={};var u="error",a="Canceled",c=!1,l={promise:1,thenPromise:2,errorPromise:4,exceptionPromise:8,completePromise:16};l.all=l.promise|l.thenPromise|l.errorPromise|l.exceptionPromise|l.completePromise;var f,d,h,m,p,_,g,v,y,b,C=1;function S(){}f={name:"created",enter:function(e){e._setState(d)},cancel:S,done:S,then:S,_completed:S,_error:S,_notify:S,_progress:S,_setCompleteValue:S,_setErrorValue:S},d={name:"working",enter:S,cancel:function(e){e._setState(p)},done:k,then:K,_completed:L,_error:M,_notify:S,_progress:j,_setCompleteValue:R,_setErrorValue:U},h={name:"waiting",enter:function(e){var t=e._value;if(t instanceof q&&t._state!==b&&t._state!==v)I(t,{promise:e});else{var n=function(r){t._errorId?e._chainedError(r,t):(D(e,r,N,t,n),e._error(r))};n.handlesOnError=!0,t.then(e._completed.bind(e),n,e._progress.bind(e))}},cancel:function(e){e._setState(m)},done:k,then:K,_completed:L,_error:M,_notify:S,_progress:j,_setCompleteValue:R,_setErrorValue:U},m={name:"waiting_canceled",enter:function(e){e._setState(_);var t=e._value;t.cancel&&t.cancel()},cancel:S,done:k,then:K,_completed:L,_error:M,_notify:S,_progress:j,_setCompleteValue:R,_setErrorValue:U},p={name:"canceled",enter:function(e){e._setState(_),e._cancelAction()},cancel:S,done:k,then:K,_completed:L,_error:M,_notify:S,_progress:j,_setCompleteValue:R,_setErrorValue:U},_={name:"canceling",enter:function(e){var t=new Error(a);t.name=t.message,e._value=t,e._setState(y)},cancel:S,done:S,then:S,_completed:S,_error:S,_notify:S,_progress:S,_setCompleteValue:S,_setErrorValue:S},g={name:"complete_notify",enter:function(e){if(e.done=Y.prototype.done,e.then=Y.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(v)},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:O,_progress:S,_setCompleteValue:S,_setErrorValue:S},v={name:"success",enter:function(e){e.done=Y.prototype.done,e.then=Y.prototype.then,e._cleanupAction()},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:O,_progress:S,_setCompleteValue:S,_setErrorValue:S},y={name:"error_notify",enter:function(e){if(e.done=V.prototype.done,e.then=V.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(b)},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:T,_progress:S,_setCompleteValue:S,_setErrorValue:S},b={name:"error",enter:function(e){e.done=V.prototype.done,e.then=V.prototype.then,e._cleanupAction()},cancel:S,done:null,then:null,_completed:S,_error:S,_notify:T,_progress:S,_setCompleteValue:S,_setErrorValue:S};var E=n.Class.define(null,{_listeners:null,_nextState:null,_state:null,_value:null,cancel:function(){this._state.cancel(this),this._run()},done:function(e,t,n){this._state.done(this,e,t,n)},then:function(e,t,n){return this._state.then(this,e,t,n)},_chainedError:function(e,t){var n=this._state._error(this,e,P,t);return this._run(),n},_completed:function(e){var t=this._state._completed(this,e);return this._run(),t},_error:function(e){var t=this._state._error(this,e,A);return this._run(),t},_progress:function(e){this._state._progress(this,e)},_setState:function(e){this._nextState=e},_setCompleteValue:function(e){this._state._setCompleteValue(this,e),this._run()},_setChainedErrorValue:function(e,t){var n=this._state._setErrorValue(this,e,P,t);return this._run(),n},_setExceptionValue:function(e){var t=this._state._setErrorValue(this,e,x);return this._run(),t},_run:function(){for(;this._nextState;)this._state=this._nextState,this._nextState=null,this._state.enter(this)}},{supportedForProcessing:!1});function L(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?h:g,e._value=t,e._setState(n)}function w(e,t,n,r,i,o){return{exception:e,error:t,promise:n,handler:o,id:r,parent:i}}function N(e,t,n,r){var i=n._isException,o=n._errorId;return w(i?t:null,i?null:t,e,o,n,r)}function P(e,t,n){var r=n._isException,i=n._errorId;return F(e,i,r),w(r?t:null,r?null:t,e,i,n)}function A(e,t){var n=++C;return F(e,n),w(null,t,e,n)}function x(e,t){var n=++C;return F(e,n,!0),w(t,null,e,n)}function k(e,t,n,r){I(e,{c:t,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.done")})}function M(e,t,n,r){e._value=t,D(e,t,n,r),e._setState(y)}function O(t,n){var r,i,s=t._value,u=t._listeners;if(u)for(t._listeners=null,r=0,i=Array.isArray(u)?u.length:1;r<i;r++){var a=1===i?u:u[r],c=a.c,l=a.promise;if(o._traceAsyncOperationCompleted(a.asyncOpID,e.Debug&&e.Debug.MS_ASYNC_OP_STATUS_SUCCESS),l){o._traceAsyncCallbackStarting(a.asyncOpID);try{l._setCompleteValue(c?c(s):s)}catch(e){l._setExceptionValue(e)}finally{o._traceAsyncCallbackCompleted()}l._state!==h&&l._listeners&&n.push(l)}else Y.prototype.done.call(t,c)}}function T(t,n){var r,i,s=t._value,u=t._listeners;if(u)for(t._listeners=null,r=0,i=Array.isArray(u)?u.length:1;r<i;r++){var c=1===i?u:u[r],l=c.e,f=c.promise,d=e.Debug&&(s&&s.name===a?e.Debug.MS_ASYNC_OP_STATUS_CANCELED:e.Debug.MS_ASYNC_OP_STATUS_ERROR);if(o._traceAsyncOperationCompleted(c.asyncOpID,d),f){var m=!1;try{l?(o._traceAsyncCallbackStarting(c.asyncOpID),m=!0,l.handlesOnError||D(f,s,N,t,l),f._setCompleteValue(l(s))):f._setChainedErrorValue(s,t)}catch(e){f._setExceptionValue(e)}finally{m&&o._traceAsyncCallbackCompleted()}f._state!==h&&f._listeners&&n.push(f)}else V.prototype.done.call(t,null,l)}}function D(e,t,n,r,i){if(s._listeners[u]){if(t instanceof Error&&t.message===a)return;s.dispatchEvent(u,n(e,t,r,i))}}function j(e,t){var n,r,i=e._listeners;if(i)for(n=0,r=Array.isArray(i)?i.length:1;n<r;n++){var o=1===r?i:i[n],s=o.p;if(s)try{s(t)}catch(e){}o.c||o.e||!o.promise||o.promise._progress(t)}}function I(e,t){var n=e._listeners;n?(n=Array.isArray(n)?n:[n]).push(t):n=t,e._listeners=n}function F(e,t,n){e._isException=n||!1,e._errorId=t}function U(e,t,n,r){e._value=t,D(e,t,n,r),e._setState(b)}function R(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?h:v,e._value=t,e._setState(n)}function K(e,t,n,r){var i=new q(e);return I(e,{promise:i,c:t,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.then")}),i}var W,q=n.Class.derive(E,function(e){c&&(!0===c||c&l.thenPromise)&&(this._stack=H._getStack()),this._creator=e,this._setState(f),this._run()},{_creator:null,_cancelAction:function(){this._creator&&this._creator.cancel()},_cleanupAction:function(){this._creator=null}},{supportedForProcessing:!1}),V=n.Class.define(function(e){c&&(!0===c||c&l.errorPromise)&&(this._stack=H._getStack()),this._value=e,D(this,e,A)},{cancel:function(){},done:function(e,t){var n=this._value;if(t)try{t.handlesOnError||D(null,n,N,this,t);var r=t(n);return void(r&&"object"==typeof r&&"function"==typeof r.done&&r.done())}catch(e){n=e}n instanceof Error&&n.message===a||H._doneHandler(n)},then:function(e,t){if(!t)return this;var n,r=this._value;try{t.handlesOnError||D(null,r,N,this,t),n=new Y(t(r))}catch(e){n=e===r?this:new B(e)}return n}},{supportedForProcessing:!1}),B=n.Class.derive(V,function(e){c&&(!0===c||c&l.exceptionPromise)&&(this._stack=H._getStack()),this._value=e,D(this,e,x)},{},{supportedForProcessing:!1}),Y=n.Class.define(function(e){if(c&&(!0===c||c&l.completePromise)&&(this._stack=H._getStack()),e&&"object"==typeof e&&"function"==typeof e.then){var t=new q(null);return t._setCompleteValue(e),t}this._value=e},{cancel:function(){},done:function(e){if(e)try{var t=e(this._value);t&&"object"==typeof t&&"function"==typeof t.done&&t.done()}catch(e){H._doneHandler(e)}},then:function(e){try{var t=e?e(this._value):this._value;return t===this._value?this:new Y(t)}catch(e){return new B(e)}}},{supportedForProcessing:!1});var H=n.Class.derive(E,function(e,t){c&&(!0===c||c&l.promise)&&(this._stack=H._getStack()),this._oncancel=t,this._setState(f),this._run();try{e(this._completed.bind(this),this._error.bind(this),this._progress.bind(this))}catch(e){this._setExceptionValue(e)}},{_oncancel:null,_cancelAction:function(){try{if(!this._oncancel)throw new Error("Promise did not implement oncancel");this._oncancel()}catch(e){e.message,e.stack;s.dispatchEvent("error",e)}},_cleanupAction:function(){this._oncancel=null}},{addEventListener:function(e,t,n){s.addEventListener(e,t,n)},any:function(e){return new H(function(t,n){var r=Object.keys(e);0===r.length&&t();var i=0;r.forEach(function(o){H.as(e[o]).then(function(){t({key:o,value:e[o]})},function(s){s instanceof Error&&s.name===a?++i===r.length&&t(H.cancel):n({key:o,value:e[o]})})})},function(){Object.keys(e).forEach(function(t){var n=H.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},as:function(e){return e&&"object"==typeof e&&"function"==typeof e.then?e:new Y(e)},cancel:{get:function(){return W=W||new V(new r(a))}},dispatchEvent:function(e,t){return s.dispatchEvent(e,t)},is:function(e){return e&&"object"==typeof e&&"function"==typeof e.then},join:function(e){return new H(function(t,n,r){var i=Object.keys(e),o=Array.isArray(e)?[]:{},s=Array.isArray(e)?[]:{},u=0,c=i.length,l=function(e){if(0==--c){var u=Object.keys(o).length;if(0===u)t(s);else{var l=0;i.forEach(function(e){var t=o[e];t instanceof Error&&t.name===a&&l++}),l===u?t(H.cancel):n(o)}}else r({Key:e,Done:!0})};i.forEach(function(t){var n=e[t];void 0===n?u++:H.then(n,function(e){s[t]=e,l(t)},function(e){o[t]=e,l(t)})}),0!==(c-=u)||t(s)},function(){Object.keys(e).forEach(function(t){var n=H.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},removeEventListener:function(e,t,n){s.removeEventListener(e,t,n)},supportedForProcessing:!1,then:function(e,t,n,r){return H.as(e).then(t,n,r)},thenEach:function(e,t,n,r){var i=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(o){i[o]=H.as(e[o]).then(t,n,r)}),H.join(i)},timeout:function(n,r){var i=function(n){var r;return new H(function(i){n?r=e.setTimeout(i,n):t._setImmediate(i)},function(){r&&e.clearTimeout(r)})}(n);return r?function(e,t){var n=function(){e.cancel()};return e.then(function(){t.cancel()}),t.then(n,n),t}(i,r):i},wrap:function(e){return new Y(e)},wrapError:function(e){return new V(e)},_veryExpensiveTagWithStack:{get:function(){return c},set:function(e){c=e}},_veryExpensiveTagWithStack_tag:l,_getStack:function(){if(e.Debug&&e.Debug.debuggerEnabled)try{throw new Error}catch(e){return e.stack}},_cancelBlocker:function(e,t){if(!H.is(e))return H.wrap(e);var n,r,i=new H(function(e,t){n=e,r=t},function(){n=null,r=null,t&&t()});return e.then(function(e){n&&n(e)},function(e){r&&r(e)}),i}});return Object.defineProperties(H,i.createEventProperties(u)),H._doneHandler=function(e){t._setImmediate(function(){throw e})},{PromiseStateMachine:E,Promise:H,state_created:f}}),n("WinJS/Promise",["WinJS/Core/_Base","WinJS/Promise/_StateMachine"],function(e,t){return e.Namespace.define("WinJS",{Promise:t.Promise}),t.Promise}),(i=t["WinJS/Core/_WinJS"]).TPromise=i.Promise,i.PPromise=i.Promise}();var o=i.Promise,s=i.TPromise,u=i.PPromise}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/*! exports provided: logOnceWebWorkerWarning, SimpleWorkerClient, SimpleWorkerServer, create */function(e,t,n){"use strict";n.r(t),n.d(t,"logOnceWebWorkerWarning",function(){return f}),n.d(t,"SimpleWorkerClient",function(){return h}),n.d(t,"SimpleWorkerServer",function(){return m}),n.d(t,"create",function(){return p});var r=n(/*! ../errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),i=n(/*! ../lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),o=n(/*! ../winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),s=n(/*! ../async.js */"./node_modules/monaco-editor/esm/vs/base/common/async.js"),u=n(/*! ../platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),a=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c="$initialize",l=!1;function f(e){u.isWeb&&(l||(l=!0,console.warn("Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/Microsoft/monaco-editor#faq")),console.warn(e.message))}var d=function(){function e(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}return e.prototype.setWorkerId=function(e){this._workerId=e},e.prototype.sendMessage=function(e,t){var n=String(++this._lastSentReq),r={c:null,e:null},i=new o.TPromise(function(e,t,n){r.c=e,r.e=t},function(){});return this._pendingReplies[n]=r,this._send({vsWorker:this._workerId,req:n,method:e,args:t}),i},e.prototype.handleMessage=function(e){var t;try{t=JSON.parse(e)}catch(e){}t&&t.vsWorker&&(-1!==this._workerId&&t.vsWorker!==this._workerId||this._handleMessage(t))},e.prototype._handleMessage=function(e){var t=this;if(e.seq){var n=e;if(!this._pendingReplies[n.seq])return void console.warn("Got reply to unknown seq");var i=this._pendingReplies[n.seq];if(delete this._pendingReplies[n.seq],n.err){var o=n.err;return n.err.$isError&&((o=new Error).name=n.err.name,o.message=n.err.message,o.stack=n.err.stack),void i.e(o)}i.c(n.res)}else{var s=e,u=s.req;this._handler.handleMessage(s.method,s.args).then(function(e){t._send({vsWorker:t._workerId,seq:u,res:e,err:void 0})},function(e){e.detail instanceof Error&&(e.detail=Object(r.transformErrorForSerialization)(e.detail)),t._send({vsWorker:t._workerId,seq:u,res:void 0,err:Object(r.transformErrorForSerialization)(e)})})}},e.prototype._send=function(e){var t=JSON.stringify(e);this._handler.sendMessage(t)},e}(),h=function(e){function t(t,n){var r=e.call(this)||this,i=null,s=null;r._worker=r._register(t.create("vs/base/common/worker/simpleWorker",function(e){r._protocol.handleMessage(e)},function(e){s(e)})),r._protocol=new d({sendMessage:function(e){r._worker.postMessage(e)},handleMessage:function(e,t){return o.TPromise.as(null)}}),r._protocol.setWorkerId(r._worker.getId());var u=null;void 0!==self.require&&"function"==typeof self.require.getConfig?u=self.require.getConfig():void 0!==self.requirejs&&(u=self.requirejs.s.contexts._.config),r._lazyProxy=new o.TPromise(function(e,t,n){i=e,s=t},function(){}),r._onModuleLoaded=r._protocol.sendMessage(c,[r._worker.getId(),n,u]),r._onModuleLoaded.then(function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=l(e[n],a);i(t)},function(e){s(e),r._onError("Worker failed to load "+n,e)});var a=function(e,t){return r._request(e,t)},l=function(e,t){return function(){var n=Array.prototype.slice.call(arguments,0);return t(e,n)}};return r}return a(t,e),t.prototype.getProxyObject=function(){return new s.ShallowCancelThenPromise(this._lazyProxy)},t.prototype._request=function(e,t){var n=this;return new o.TPromise(function(r,i,o){n._onModuleLoaded.then(function(){n._protocol.sendMessage(e,t).then(r,i)},i)},function(){})},t.prototype._onError=function(e,t){console.error(e),console.info(t)},t}(i.Disposable),m=function(){function e(e,t){var n=this;this._requestHandler=t,this._protocol=new d({sendMessage:function(t){e(t)},handleMessage:function(e,t){return n._handleMessage(e,t)}})}return e.prototype.onmessage=function(e){this._protocol.handleMessage(e)},e.prototype._handleMessage=function(e,t){if(e===c)return this.initialize(t[0],t[1],t[2]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return o.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return o.TPromise.as(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return o.TPromise.wrapError(e)}},e.prototype.initialize=function(e,t,n){var r,i,s=this;if(this._protocol.setWorkerId(e),this._requestHandler){var u=[];for(var a in this._requestHandler)"function"==typeof this._requestHandler[a]&&u.push(a);return o.TPromise.as(u)}n&&(void 0!==n.baseUrl&&delete n.baseUrl,void 0!==n.paths&&void 0!==n.paths.vs&&delete n.paths.vs,n.catchError=!0,self.require.config(n));var c=new o.TPromise(function(e,t,n){r=e,i=t});return self.require([t],function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0];s._requestHandler=n.create();var i=[];for(var o in s._requestHandler)"function"==typeof s._requestHandler[o]&&i.push(o);r(i)},i),c},e}();function p(e){return new m(e,null)}},"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/*! exports provided: CharacterClassifier, CharacterSet */function(e,t,n){"use strict";n.r(t),n.d(t,"CharacterClassifier",function(){return i}),n.d(t,"CharacterSet",function(){return o});var r=n(/*! ./uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),i=function(){function e(t){var n=Object(r.toUint8)(t);this._defaultValue=n,this._asciiMap=e._createAsciiMap(n),this._map=new Map}return e._createAsciiMap=function(e){for(var t=new Uint8Array(256),n=0;n<256;n++)t[n]=e;return t},e.prototype.set=function(e,t){var n=Object(r.toUint8)(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)},e.prototype.get=function(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue},e}(),o=function(){function e(){this._actual=new i(0)}return e.prototype.add=function(e){this._actual.set(e,1)},e.prototype.has=function(e){return 1===this._actual.get(e)},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/*! exports provided: Position */function(e,t,n){"use strict";n.r(t),n.d(t,"Position",function(){return r});var r=function(){function e(e,t){this.lineNumber=e,this.column=t}return e.prototype.equals=function(t){return e.equals(this,t)},e.equals=function(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column},e.prototype.isBefore=function(t){return e.isBefore(this,t)},e.isBefore=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column},e.prototype.isBeforeOrEqual=function(t){return e.isBeforeOrEqual(this,t)},e.isBeforeOrEqual=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column},e.compare=function(e,t){var n=0|e.lineNumber,r=0|t.lineNumber;return n===r?(0|e.column)-(0|t.column):n-r},e.prototype.clone=function(){return new e(this.lineNumber,this.column)},e.prototype.toString=function(){return"("+this.lineNumber+","+this.column+")"},e.lift=function(t){return new e(t.lineNumber,t.column)},e.isIPosition=function(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/*! exports provided: Range */function(e,t,n){"use strict";n.r(t),n.d(t,"Range",function(){return i});var r=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),i=function(){function e(e,t,n,r){e>n||e===n&&t>r?(this.startLineNumber=n,this.startColumn=r,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=r)}return e.prototype.isEmpty=function(){return e.isEmpty(this)},e.isEmpty=function(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn},e.prototype.containsPosition=function(t){return e.containsPosition(this,t)},e.containsPosition=function(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))},e.prototype.containsRange=function(t){return e.containsRange(this,t)},e.containsRange=function(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))},e.prototype.plusRange=function(t){return e.plusRange(this,t)},e.plusRange=function(t,n){var r,i,o,s;return n.startLineNumber<t.startLineNumber?(r=n.startLineNumber,i=n.startColumn):n.startLineNumber===t.startLineNumber?(r=n.startLineNumber,i=Math.min(n.startColumn,t.startColumn)):(r=t.startLineNumber,i=t.startColumn),n.endLineNumber>t.endLineNumber?(o=n.endLineNumber,s=n.endColumn):n.endLineNumber===t.endLineNumber?(o=n.endLineNumber,s=Math.max(n.endColumn,t.endColumn)):(o=t.endLineNumber,s=t.endColumn),new e(r,i,o,s)},e.prototype.intersectRanges=function(t){return e.intersectRanges(this,t)},e.intersectRanges=function(t,n){var r=t.startLineNumber,i=t.startColumn,o=t.endLineNumber,s=t.endColumn,u=n.startLineNumber,a=n.startColumn,c=n.endLineNumber,l=n.endColumn;return r<u?(r=u,i=a):r===u&&(i=Math.max(i,a)),o>c?(o=c,s=l):o===c&&(s=Math.min(s,l)),r>o?null:r===o&&i>s?null:new e(r,i,o,s)},e.prototype.equalsRange=function(t){return e.equalsRange(this,t)},e.equalsRange=function(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn},e.prototype.getEndPosition=function(){return new r.Position(this.endLineNumber,this.endColumn)},e.prototype.getStartPosition=function(){return new r.Position(this.startLineNumber,this.startColumn)},e.prototype.toString=function(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"},e.prototype.setEndPosition=function(t,n){return new e(this.startLineNumber,this.startColumn,t,n)},e.prototype.setStartPosition=function(t,n){return new e(t,n,this.endLineNumber,this.endColumn)},e.prototype.collapseToStart=function(){return e.collapseToStart(this)},e.collapseToStart=function(t){return new e(t.startLineNumber,t.startColumn,t.startLineNumber,t.startColumn)},e.fromPositions=function(t,n){return void 0===n&&(n=t),new e(t.lineNumber,t.column,n.lineNumber,n.column)},e.lift=function(t){return t?new e(t.startLineNumber,t.startColumn,t.endLineNumber,t.endColumn):null},e.isIRange=function(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn},e.areIntersectingOrTouching=function(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)},e.compareRangesUsingStarts=function(e,t){var n=0|e.startLineNumber,r=0|t.startLineNumber;if(n===r){var i=0|e.startColumn,o=0|t.startColumn;if(i===o){var s=0|e.endLineNumber,u=0|t.endLineNumber;return s===u?(0|e.endColumn)-(0|t.endColumn):s-u}return i-o}return n-r},e.compareRangesUsingEnds=function(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber},e.spansMultipleLines=function(e){return e.endLineNumber>e.startLineNumber},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/*! exports provided: SelectionDirection, Selection */function(e,t,n){"use strict";n.r(t),n.d(t,"SelectionDirection",function(){return r}),n.d(t,"Selection",function(){return u});var r,i=n(/*! ./range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),o=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),s=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(r||(r={}));var u=function(e){function t(t,n,r,i){var o=e.call(this,t,n,r,i)||this;return o.selectionStartLineNumber=t,o.selectionStartColumn=n,o.positionLineNumber=r,o.positionColumn=i,o}return s(t,e),t.prototype.clone=function(){return new t(this.selectionStartLineNumber,this.selectionStartColumn,this.positionLineNumber,this.positionColumn)},t.prototype.toString=function(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"},t.prototype.equalsSelection=function(e){return t.selectionsEqual(this,e)},t.selectionsEqual=function(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn},t.prototype.getDirection=function(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?r.LTR:r.RTL},t.prototype.setEndPosition=function(e,n){return this.getDirection()===r.LTR?new t(this.startLineNumber,this.startColumn,e,n):new t(e,n,this.startLineNumber,this.startColumn)},t.prototype.getPosition=function(){return new o.Position(this.positionLineNumber,this.positionColumn)},t.prototype.setStartPosition=function(e,n){return this.getDirection()===r.LTR?new t(e,n,this.endLineNumber,this.endColumn):new t(this.endLineNumber,this.endColumn,e,n)},t.fromPositions=function(e,n){return void 0===n&&(n=e),new t(e.lineNumber,e.column,n.lineNumber,n.column)},t.liftSelection=function(e){return new t(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)},t.selectionsArrEqual=function(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0},t.isISelection=function(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn},t.createWithDirection=function(e,n,i,o,s){return s===r.LTR?new t(e,n,i,o):new t(i,o,e,n)},t}(i.Range)},"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/token.js ***!
  \***********************************************************************/
/*! exports provided: Token, TokenizationResult, TokenizationResult2 */function(e,t,n){"use strict";n.r(t),n.d(t,"Token",function(){return r}),n.d(t,"TokenizationResult",function(){return i}),n.d(t,"TokenizationResult2",function(){return o});var r=function(){function e(e,t,n){this.offset=0|e,this.type=t,this.language=n}return e.prototype.toString=function(){return"("+this.offset+", "+this.type+")"},e}(),i=function(){return function(e,t){this.tokens=e,this.endState=t}}(),o=function(){return function(e,t){this.tokens=e,this.endState=t}}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js ***!
  \**********************************************************************/
/*! exports provided: Uint8Matrix, toUint8, toUint32, toUint32Array */function(e,t,n){"use strict";n.r(t),n.d(t,"Uint8Matrix",function(){return r}),n.d(t,"toUint8",function(){return i}),n.d(t,"toUint32",function(){return o}),n.d(t,"toUint32Array",function(){return s});var r=function(){function e(e,t,n){for(var r=new Uint8Array(e*t),i=0,o=e*t;i<o;i++)r[i]=n;this._data=r,this.rows=e,this.cols=t}return e.prototype.get=function(e,t){return this._data[e*this.cols+t]},e.prototype.set=function(e,t,n){this._data[e*this.cols+t]=n},e}();function i(e){return e<0?0:e>255?255:0|e}function o(e){return e<0?0:e>4294967295?4294967295:0|e}function s(e){for(var t=e.length,n=new Uint32Array(t),r=0;r<t;r++)n[r]=o(e[r]);return n}},"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js ***!
  \******************************************************************************/
/*! exports provided: DiffComputer */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffComputer",function(){return h});var r=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),i=n(/*! ../../../base/common/strings.js */"./node_modules/monaco-editor/esm/vs/base/common/strings.js"),o=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=5e3,u=3;function a(e,t,n,i){return new r.LcsDiff(e,t,n).ComputeDiff(i)}var c=function(){function e(e,t,n){this.buffer=e,this.startMarkers=t,this.endMarkers=n}return e.prototype.getLength=function(){return this.startMarkers.length},e.prototype.getElementHash=function(e){return this.buffer.substring(this.startMarkers[e].offset,this.endMarkers[e].offset)},e.prototype.getStartLineNumber=function(e){return e===this.startMarkers.length?this.startMarkers[e-1].lineNumber+1:this.startMarkers[e].lineNumber},e.prototype.getStartColumn=function(e){return this.startMarkers[e].column},e.prototype.getEndLineNumber=function(e){return this.endMarkers[e].lineNumber},e.prototype.getEndColumn=function(e){return this.endMarkers[e].column},e}(),l=function(e){function t(n){for(var r="",i=[],o=[],s=0,u=0,a=n.length;u<a;u++){r+=n[u];var c=t._getFirstNonBlankColumn(n[u],1),l=t._getLastNonBlankColumn(n[u],1);i.push({offset:s+c-1,lineNumber:u+1,column:c}),o.push({offset:s+l-1,lineNumber:u+1,column:l}),s+=n[u].length}return e.call(this,r,i,o)||this}return o(t,e),t._getFirstNonBlankColumn=function(e,t){var n=i.firstNonWhitespaceIndex(e);return-1===n?t:n+1},t._getLastNonBlankColumn=function(e,t){var n=i.lastNonWhitespaceIndex(e);return-1===n?t:n+2},t.prototype.getCharSequence=function(e,t){for(var n=[],r=[],i=e;i<=t;i++)for(var o=this.startMarkers[i],s=this.endMarkers[i],u=o.offset;u<s.offset;u++)n.push({offset:u,lineNumber:o.lineNumber,column:o.column+(u-o.offset)}),r.push({offset:u+1,lineNumber:o.lineNumber,column:o.column+(u-o.offset)+1});return new c(this.buffer,n,r)},t}(c),f=function(){function e(e,t,n,r,i,o,s,u){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=r,this.modifiedStartLineNumber=i,this.modifiedStartColumn=o,this.modifiedEndLineNumber=s,this.modifiedEndColumn=u}return e.createFromDiffChange=function(t,n,r){var i,o,s,u,a,c,l,f;return 0===t.originalLength?(i=0,o=0,s=0,u=0):(i=n.getStartLineNumber(t.originalStart),o=n.getStartColumn(t.originalStart),s=n.getEndLineNumber(t.originalStart+t.originalLength-1),u=n.getEndColumn(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(a=0,c=0,l=0,f=0):(a=r.getStartLineNumber(t.modifiedStart),c=r.getStartColumn(t.modifiedStart),l=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1),f=r.getEndColumn(t.modifiedStart+t.modifiedLength-1)),new e(i,o,s,u,a,c,l,f)},e}();var d=function(){function e(e,t,n,r,i){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=r,this.charChanges=i}return e.createFromDiffResult=function(t,n,r,i,o){var s,c,l,d,h;if(0===t.originalLength?(s=n.getStartLineNumber(t.originalStart)-1,c=0):(s=n.getStartLineNumber(t.originalStart),c=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(l=r.getStartLineNumber(t.modifiedStart)-1,d=0):(l=r.getStartLineNumber(t.modifiedStart),d=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),0!==t.originalLength&&0!==t.modifiedLength&&i()){var m=n.getCharSequence(t.originalStart,t.originalStart+t.originalLength-1),p=r.getCharSequence(t.modifiedStart,t.modifiedStart+t.modifiedLength-1),_=a(m,p,i,!0);o&&(_=function(e){if(e.length<=1)return e;for(var t=[e[0]],n=t[0],r=1,i=e.length;r<i;r++){var o=e[r],s=o.originalStart-(n.originalStart+n.originalLength),a=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(s,a)<u?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(t.push(o),n=o)}return t}(_)),h=[];for(var g=0,v=_.length;g<v;g++)h.push(f.createFromDiffChange(_[g],m,p))}return new e(s,c,l,d,h)},e}(),h=function(){function e(e,t,n){this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.maximumRunTimeMs=s,this.originalLines=e,this.modifiedLines=t,this.original=new l(e),this.modified=new l(t)}return e.prototype.computeDiff=function(){if(1===this.original.getLength()&&0===this.original.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.getLength(),charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];if(1===this.modified.getLength()&&0===this.modified.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:this.original.getLength(),modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];this.computationStartTime=(new Date).getTime();var e=a(this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldMakePrettyDiff);if(this.shouldIgnoreTrimWhitespace){for(var t=[],n=0,r=e.length;n<r;n++)t.push(d.createFromDiffResult(e[n],this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges));return t}for(var i=[],o=0,s=0,u=(n=-1,e.length);n<u;n++){for(var c=n+1<u?e[n+1]:null,f=c?c.originalStart:this.originalLines.length,h=c?c.modifiedStart:this.modifiedLines.length;o<f&&s<h;){var m=this.originalLines[o],p=this.modifiedLines[s];if(m!==p){for(var _=l._getFirstNonBlankColumn(m,1),g=l._getFirstNonBlankColumn(p,1);_>1&&g>1;){if(m.charCodeAt(_-2)!==p.charCodeAt(g-2))break;_--,g--}(_>1||g>1)&&this._pushTrimWhitespaceCharChange(i,o+1,1,_,s+1,1,g);for(var v=l._getLastNonBlankColumn(m,1),y=l._getLastNonBlankColumn(p,1),b=m.length+1,C=p.length+1;v<b&&y<C;){if(m.charCodeAt(v-1)!==m.charCodeAt(y-1))break;v++,y++}(v<b||y<C)&&this._pushTrimWhitespaceCharChange(i,o+1,v,b,s+1,y,C)}o++,s++}c&&(i.push(d.createFromDiffResult(c,this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges)),o+=c.originalLength,s+=c.modifiedLength)}return i},e.prototype._pushTrimWhitespaceCharChange=function(e,t,n,r,i,o,s){this._mergeTrimWhitespaceCharChange(e,t,n,r,i,o,s)||e.push(new d(t,t,i,i,[new f(t,n,t,r,i,o,i,s)]))},e.prototype._mergeTrimWhitespaceCharChange=function(e,t,n,r,i,o,s){var u=e.length;if(0===u)return!1;var a=e[u-1];return 0!==a.originalEndLineNumber&&0!==a.modifiedEndLineNumber&&(a.originalEndLineNumber+1===t&&a.modifiedEndLineNumber+1===i&&(a.originalEndLineNumber=t,a.modifiedEndLineNumber=i,a.charChanges.push(new f(t,n,t,r,i,o,i,s)),!0))},e.prototype._continueProcessingPredicate=function(){return 0===this.maximumRunTimeMs||(new Date).getTime()-this.computationStartTime<this.maximumRunTimeMs},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/*! exports provided: MirrorTextModel */function(e,t,n){"use strict";n.r(t),n.d(t,"MirrorTextModel",function(){return o});var r=n(/*! ../viewModel/prefixSumComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"),i=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),o=function(){function e(e,t,n,r){this._uri=e,this._lines=t,this._eol=n,this._versionId=r}return e.prototype.dispose=function(){this._lines.length=0},Object.defineProperty(e.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),e.prototype.getText=function(){return this._lines.join(this._eol)},e.prototype.onEvents=function(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);for(var t=e.changes,n=0,r=t.length;n<r;n++){var o=t[n];this._acceptDeleteRange(o.range),this._acceptInsertText(new i.Position(o.range.startLineNumber,o.range.startColumn),o.text)}this._versionId=e.versionId},e.prototype._ensureLineStarts=function(){if(!this._lineStarts){for(var e=this._eol.length,t=this._lines.length,n=new Uint32Array(t),i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new r.PrefixSumComputer(n)}},e.prototype._setLineText=function(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)},e.prototype._acceptDeleteRange=function(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}},e.prototype._acceptInsertText=function(e,t){if(0!==t.length){var n=t.split(/\r\n|\r|\n/);if(1!==n.length){n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);for(var r=new Uint32Array(n.length-1),i=1;i<n.length;i++)this._lines.splice(e.lineNumber+i-1,0,n[i]),r[i-1]=n[i].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,r)}else this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1))}},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js ***!
  \*****************************************************************************/
/*! exports provided: USUAL_WORD_SEPARATORS, DEFAULT_WORD_REGEXP, ensureValidWordDefinition, getWordAtText */function(e,t,n){"use strict";n.r(t),n.d(t,"USUAL_WORD_SEPARATORS",function(){return r}),n.d(t,"DEFAULT_WORD_REGEXP",function(){return i}),n.d(t,"ensureValidWordDefinition",function(){return o}),n.d(t,"getWordAtText",function(){return s});var r="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";var i=function(e){void 0===e&&(e="");for(var t="(-?\\d*\\.\\d\\w*)|([^",n=0;n<r.length;n++)e.indexOf(r[n])>=0||(t+="\\"+r[n]);return t+="\\s]+)",new RegExp(t,"g")}();function o(e){var t=i;if(e&&e instanceof RegExp)if(e.global)t=e;else{var n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}function s(e,t,n,r){t.lastIndex=0;var i=t.exec(n);if(!i)return null;var o=i[0].indexOf(" ")>=0?function(e,t,n,r){var i,o=e-1-r;for(t.lastIndex=0;i=t.exec(n);){if(i.index>o)return null;if(t.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+t.lastIndex}}return null}(e,t,n,r):function(e,t,n,r){var i,o=e-1-r,s=n.lastIndexOf(" ",o-1)+1,u=n.indexOf(" ",o);for(-1===u&&(u=n.length),t.lastIndex=s;i=t.exec(n);)if(i.index<=o&&t.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+t.lastIndex};return null}(e,t,n,r);return t.lastIndex=0,o}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js ***!
  \*******************************************************************************/
/*! exports provided: computeLinks */function(e,t,n){"use strict";n.r(t),n.d(t,"computeLinks",function(){return c});var r=n(/*! ../core/characterClassifier.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"),i=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),o=function(){function e(e){for(var t=0,n=0,r=0,o=e.length;r<o;r++){var s=e[r],u=s[0],a=s[1],c=s[2];a>t&&(t=a),u>n&&(n=u),c>n&&(n=c)}t++,n++;var l=new i.Uint8Matrix(n,t,0);for(r=0,o=e.length;r<o;r++){var f=e[r];u=f[0],a=f[1],c=f[2];l.set(u,a,c)}this._states=l,this._maxCharCode=t}return e.prototype.nextState=function(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)},e}(),s=null;var u=null;var a=function(){function e(){}return e._createLink=function(e,t,n,r,i){var o=i-1;do{var s=t.charCodeAt(o);if(2!==e.get(s))break;o--}while(o>r);if(r>0){var u=t.charCodeAt(r-1),a=t.charCodeAt(o);(40===u&&41===a||91===u&&93===a||123===u&&125===a)&&o--}return{range:{startLineNumber:n,startColumn:r+1,endLineNumber:n,endColumn:o+2},url:t.substring(r,o+1)}},e.computeLinks=function(t){for(var n=(null===s&&(s=new o([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),s),i=function(){if(null===u){u=new r.CharacterClassifier(0);for(var e=0;e<" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".length;e++)u.set(" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".charCodeAt(e),1);for(e=0;e<".,;".length;e++)u.set(".,;".charCodeAt(e),2)}return u}(),a=[],c=1,l=t.getLineCount();c<=l;c++){for(var f=t.getLineContent(c),d=f.length,h=0,m=0,p=0,_=1,g=!1,v=!1,y=!1;h<d;){var b=!1,C=f.charCodeAt(h);if(13===_){var S=void 0;switch(C){case 40:g=!0,S=0;break;case 41:S=g?0:1;break;case 91:v=!0,S=0;break;case 93:S=v?0:1;break;case 123:y=!0,S=0;break;case 125:S=y?0:1;break;case 39:S=34===p||96===p?0:1;break;case 34:S=39===p||96===p?0:1;break;case 96:S=39===p||34===p?0:1;break;default:S=i.get(C)}1===S&&(a.push(e._createLink(i,f,c,m,h)),b=!0)}else if(12===_){1===(S=i.get(C))?b=!0:_=13}else 0===(_=n.nextState(_,C))&&(b=!0);b&&(_=1,g=!1,v=!1,y=!1,m=h+1,p=C),h++}13===_&&a.push(e._createLink(i,f,c,m,d))}return a},e}();function c(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?a.computeLinks(e):[]}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js ***!
  \*************************************************************************************************/
/*! exports provided: BasicInplaceReplace */function(e,t,n){"use strict";n.r(t),n.d(t,"BasicInplaceReplace",function(){return r});var r=function(){function e(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}return e.prototype.navigateValueSet=function(e,t,n,r,i){var o;if(e&&t&&(o=this.doNavigateValueSet(t,i)))return{range:e,value:o};if(n&&r&&(o=this.doNavigateValueSet(r,i)))return{range:n,value:o};return null},e.prototype.doNavigateValueSet=function(e,t){var n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)},e.prototype.numberReplace=function(e,t){var n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),r=Number(e),i=parseFloat(e);return isNaN(r)||isNaN(i)||r!==i?null:0!==r||t?(r=Math.floor(r*n),r+=t?n:-n,String(r/n)):null},e.prototype.textReplace=function(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)},e.prototype.valueSetsReplace=function(e,t,n){for(var r=null,i=0,o=e.length;null===r&&i<o;i++)r=this.valueSetReplace(e[i],t,n);return r},e.prototype.valueSetReplace=function(e,t,n){var r=e.indexOf(t);return r>=0?((r+=n?1:-1)<0?r=e.length-1:r%=e.length,e[r]):null},e.INSTANCE=new e,e}()},"./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services sync ***!
  \***********************************************************************/
/*! no static exports found */function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive"},"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/*! exports provided: BaseEditorSimpleWorker, EditorSimpleWorkerImpl, create */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseEditorSimpleWorker",function(){return g}),n.d(t,"EditorSimpleWorkerImpl",function(){return v}),n.d(t,"create",function(){return y});var r=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),i=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),o=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),s=n(/*! ../diff/diffComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"),u=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),a=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),c=n(/*! ../model/mirrorTextModel.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js"),l=n(/*! ../modes/linkComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"),f=n(/*! ../modes/supports/inplaceReplaceSupport.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js"),d=n(/*! ../model/wordHelper.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js"),h=n(/*! ../standalone/standaloneBase.js */"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js"),m=n(/*! ../../../base/common/platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),p=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return p(t,e),Object.defineProperty(t.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"eol",{get:function(){return this._eol},enumerable:!0,configurable:!0}),t.prototype.getValue=function(){return this.getText()},t.prototype.getLinesContent=function(){return this._lines.slice(0)},t.prototype.getLineCount=function(){return this._lines.length},t.prototype.getLineContent=function(e){return this._lines[e-1]},t.prototype.getWordAtPosition=function(e,t){var n=Object(d.getWordAtText)(e.column,Object(d.ensureValidWordDefinition)(t),this._lines[e.lineNumber-1],0);return n?new o.Range(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null},t.prototype.getWordUntilPosition=function(e,t){var n=this.getWordAtPosition(e,t);return n?{word:this._lines[e.lineNumber-1].substring(n.startColumn-1,e.column-1),startColumn:n.startColumn,endColumn:e.column}:{word:"",startColumn:e.column,endColumn:e.column}},t.prototype.createWordIterator=function(e){var t,n=this,r={done:!1,value:""},i=0,o=0,s=[],u=function(){if(o<s.length)r.done=!1,r.value=t.substring(s[o].start,s[o].end),o+=1;else{if(!(i>=n._lines.length))return t=n._lines[i],s=n._wordenize(t,e),o=0,i+=1,u();r.done=!0,r.value=void 0}return r};return{next:u}},t.prototype._wordenize=function(e,t){var n,r=[];for(t.lastIndex=0;(n=t.exec(e))&&0!==n[0].length;)r.push({start:n.index,end:n.index+n[0].length});return r},t.prototype.getValueInRange=function(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);var t=this._eol,n=e.startLineNumber-1,r=e.endLineNumber-1,i=[];i.push(this._lines[n].substring(e.startColumn-1));for(var o=n+1;o<r;o++)i.push(this._lines[o]);return i.push(this._lines[r].substring(0,e.endColumn-1)),i.join(t)},t.prototype.offsetAt=function(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)},t.prototype.positionAt=function(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();var t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}},t.prototype._validateRange=function(e){var t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e},t.prototype._validatePosition=function(e){if(!a.Position.isIPosition(e))throw new Error("bad position");var t=e.lineNumber,n=e.column,r=!1;if(t<1)t=1,n=1,r=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,r=!0;else{var i=this._lines[t-1].length+1;n<1?(n=1,r=!0):n>i&&(n=i,r=!0)}return r?{lineNumber:t,column:n}:e},t}(c.MirrorTextModel),g=function(){function e(e){this._foreignModuleFactory=e,this._foreignModule=null}return e.prototype.computeDiff=function(e,t,n){var r=this._getModel(e),o=this._getModel(t);if(!r||!o)return null;var u=r.getLinesContent(),a=o.getLinesContent(),c=new s.DiffComputer(u,a,{shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return i.TPromise.as(c.computeDiff())},e.prototype.computeDirtyDiff=function(e,t,n){var r=this._getModel(e),o=this._getModel(t);if(!r||!o)return null;var u=r.getLinesContent(),a=o.getLinesContent(),c=new s.DiffComputer(u,a,{shouldPostProcessCharChanges:!1,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return i.TPromise.as(c.computeDiff())},e.prototype.computeMoreMinimalEdits=function(t,n){var r=this._getModel(t);if(!r)return i.TPromise.as(n);for(var s,a=[],c=0,l=n;c<l.length;c++){var f=l[c],d=f.range,h=f.text,m=f.eol;if("number"==typeof m&&(s=m),d){var p=r.getValueInRange(d);if(p!==(h=h.replace(/\r\n|\n|\r/g,r.eol)))if(Math.max(h.length,p.length)>e._diffLimit)a.push({range:d,text:h});else for(var _=Object(u.stringDiff)(p,h,!1),g=r.offsetAt(o.Range.lift(d).getStartPosition()),v=0,y=_;v<y.length;v++){var b=y[v],C=r.positionAt(g+b.originalStart),S=r.positionAt(g+b.originalStart+b.originalLength),E={text:h.substr(b.modifiedStart,b.modifiedLength),range:{startLineNumber:C.lineNumber,startColumn:C.column,endLineNumber:S.lineNumber,endColumn:S.column}};r.getValueInRange(E.range)!==E.text&&a.push(E)}}}return"number"==typeof s&&a.push({eol:s,text:void 0,range:void 0}),i.TPromise.as(a)},e.prototype.computeLinks=function(e){var t=this._getModel(e);return t?i.TPromise.as(Object(l.computeLinks)(t)):null},e.prototype.textualSuggest=function(t,n,r,o){var s=this._getModel(t);if(s){var u=[],a=new RegExp(r,o),c=s.getWordUntilPosition(n,a).word,l=Object.create(null);l[c]=!0;for(var f=s.createWordIterator(a),d=f.next();!d.done&&u.length<=e._suggestionsLimit;d=f.next()){var h=d.value;l[h]||(l[h]=!0,isNaN(Number(h))&&u.push({type:"text",label:h,insertText:h,noAutoAccept:!0,overwriteBefore:c.length}))}return i.TPromise.as({suggestions:u})}},e.prototype.navigateValueSet=function(e,t,n,r,o){var s=this._getModel(e);if(!s)return null;var u=new RegExp(r,o);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});var a=s.getValueInRange(t),c=s.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},u),l=null;null!==c&&(l=s.getValueInRange(c));var d=f.BasicInplaceReplace.INSTANCE.navigateValueSet(t,a,c,l,n);return i.TPromise.as(d)},e.prototype.loadForeignModule=function(e,t){var r=this,o={getMirrorModels:function(){return r._getModels()}};if(this._foreignModuleFactory){this._foreignModule=this._foreignModuleFactory(o,t);var s=[];for(var u in this._foreignModule)"function"==typeof this._foreignModule[u]&&s.push(u);return i.TPromise.as(s)}return new i.TPromise(function(i,s){Promise.resolve().then(function(){var s=[n("./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive")(e)];(function(e){r._foreignModule=e.create(o,t);var n=[];for(var s in r._foreignModule)"function"==typeof r._foreignModule[s]&&n.push(s);i(n)}).apply(null,s)}).catch(s.bind(this))})},e.prototype.fmr=function(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return i.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return i.TPromise.as(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return i.TPromise.wrapError(e)}},e._diffLimit=1e4,e._suggestionsLimit=1e4,e}(),v=function(e){function t(t){var n=e.call(this,t)||this;return n._models=Object.create(null),n}return p(t,e),t.prototype.dispose=function(){this._models=Object.create(null)},t.prototype._getModel=function(e){return this._models[e]},t.prototype._getModels=function(){var e=this,t=[];return Object.keys(this._models).forEach(function(n){return t.push(e._models[n])}),t},t.prototype.acceptNewModel=function(e){this._models[e.url]=new _(r.default.parse(e.url),e.lines,e.EOL,e.versionId)},t.prototype.acceptModelChanged=function(e,t){this._models[e]&&this._models[e].onEvents(t)},t.prototype.acceptRemovedModel=function(e){this._models[e]&&delete this._models[e]},t}(g);function y(){return new v(null)}"function"==typeof importScripts&&(m.globals.monaco=Object(h.createMonacoBaseAPI)())},"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js ***!
  \**************************************************************************************/
/*! exports provided: Severity, MarkerSeverity, KeyMod, KeyCode, createMonacoBaseAPI */function(e,t,n){"use strict";n.r(t),n.d(t,"Severity",function(){return r}),n.d(t,"MarkerSeverity",function(){return i}),n.d(t,"KeyMod",function(){return p}),n.d(t,"KeyCode",function(){return m}),n.d(t,"createMonacoBaseAPI",function(){return _});var r,i,o=n(/*! ../../../base/common/event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),s=n(/*! ../../../base/common/keyCodes.js */"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js"),u=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),a=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),c=n(/*! ../core/selection.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"),l=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),f=n(/*! ../../../base/common/cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),d=n(/*! ../core/token.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js"),h=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js");!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(r||(r={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(i||(i={}));var m,p=function(){function e(){}return e.chord=function(e,t){return Object(s.KeyChord)(e,t)},e.CtrlCmd=2048,e.Shift=1024,e.Alt=512,e.WinCtrl=256,e}();function _(){return{editor:void 0,languages:void 0,CancellationTokenSource:f.CancellationTokenSource,Emitter:o.Emitter,KeyCode:m,KeyMod:p,Position:u.Position,Range:a.Range,Selection:c.Selection,SelectionDirection:c.SelectionDirection,Severity:r,MarkerSeverity:i,Promise:l.TPromise,Uri:h.default,Token:d.Token}}!function(e){e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(m||(m={}))},"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js ***!
  \****************************************************************************************/
/*! exports provided: PrefixSumIndexOfResult, PrefixSumComputer, PrefixSumComputerWithCache */function(e,t,n){"use strict";n.r(t),n.d(t,"PrefixSumIndexOfResult",function(){return i}),n.d(t,"PrefixSumComputer",function(){return o}),n.d(t,"PrefixSumComputerWithCache",function(){return s});var r=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),i=function(){return function(e,t){this.index=e,this.remainder=t}}(),o=function(){function e(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}return e.prototype.getCount=function(){return this.values.length},e.prototype.insertValues=function(e,t){e=Object(r.toUint32)(e);var n=this.values,i=this.prefixSum,o=t.length;return 0!==o&&(this.values=new Uint32Array(n.length+o),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+o),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.changeValue=function(e,t){return e=Object(r.toUint32)(e),t=Object(r.toUint32)(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)},e.prototype.removeValues=function(e,t){e=Object(r.toUint32)(e),t=Object(r.toUint32)(t);var n=this.values,i=this.prefixSum;if(e>=n.length)return!1;var o=n.length-e;return t>=o&&(t=o),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.getTotalValue=function(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)},e.prototype.getAccumulatedValue=function(e){return e<0?0:(e=Object(r.toUint32)(e),this._getAccumulatedValue(e))},e.prototype._getAccumulatedValue=function(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];var t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(var n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]},e.prototype.getIndexOf=function(e){e=Math.floor(e),this.getTotalValue();for(var t,n,r,o=0,s=this.values.length-1;o<=s;)if(t=o+(s-o)/2|0,e<(r=(n=this.prefixSum[t])-this.values[t]))s=t-1;else{if(!(e>=n))break;o=t+1}return new i(t,e-r)},e}(),s=function(){function e(e){this._cacheAccumulatedValueStart=0,this._cache=null,this._actual=new o(e),this._bustCache()}return e.prototype._bustCache=function(){this._cacheAccumulatedValueStart=0,this._cache=null},e.prototype.insertValues=function(e,t){this._actual.insertValues(e,t)&&this._bustCache()},e.prototype.changeValue=function(e,t){this._actual.changeValue(e,t)&&this._bustCache()},e.prototype.removeValues=function(e,t){this._actual.removeValues(e,t)&&this._bustCache()},e.prototype.getTotalValue=function(){return this._actual.getTotalValue()},e.prototype.getAccumulatedValue=function(e){return this._actual.getAccumulatedValue(e)},e.prototype.getIndexOf=function(e){if(e=Math.floor(e),null!==this._cache){var t=e-this._cacheAccumulatedValueStart;if(t>=0&&t<this._cache.length)return this._cache[t]}return this._actual.getIndexOf(e)},e.prototype.warmUpCache=function(e,t){for(var n=[],r=e;r<=t;r++)n[r-e]=this.getIndexOf(r);this._cache=n,this._cacheAccumulatedValueStart=e},e}()},"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/*! exports provided: initialize */function(e,t,n){"use strict";n.r(t),n.d(t,"initialize",function(){return s});var r=n(/*! ./common/services/editorSimpleWorker.js */"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"),i=n(/*! ../base/common/worker/simpleWorker.js */"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"),o=!1;function s(e){if(!o){o=!0;var t=new r.EditorSimpleWorkerImpl(e),n=new i.SimpleWorkerServer(function(e){self.postMessage(e)},t);self.onmessage=function(e){n.onmessage(e.data)}}}self.onmessage=function(e){o||s(null)}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var a,c=[],l=!1,f=-1;function d(){l&&a&&(l=!1,a.length?c=a.concat(c):f=-1,c.length&&h())}function h(){if(!l){var e=u(d);l=!0;for(var t=c.length;t;){for(a=c,c=[];++f<t;)a&&a[f].run();f=-1,t=c.length}a=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function p(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||l||u(h)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=p,i.addListener=p,i.once=p,i.off=p,i.removeListener=p,i.removeAllListeners=p,i.emit=p,i.prependListener=p,i.prependOnceListener=p,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,