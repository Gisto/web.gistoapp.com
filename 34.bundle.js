(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-types/main.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-types/main.js ***!
  \***********************************************************************************************************************************/
/*! exports provided: Position, Range, Location, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, CodeActionContext, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */function(e,n,t){"use strict";var r,i,o,u,a,c,s,d;t.r(n),t.d(n,"Position",function(){return r}),t.d(n,"Range",function(){return i}),t.d(n,"Location",function(){return o}),t.d(n,"DiagnosticSeverity",function(){return u}),t.d(n,"Diagnostic",function(){return a}),t.d(n,"Command",function(){return c}),t.d(n,"TextEdit",function(){return s}),t.d(n,"TextDocumentEdit",function(){return d}),t.d(n,"WorkspaceChange",function(){return T}),t.d(n,"TextDocumentIdentifier",function(){return f}),t.d(n,"VersionedTextDocumentIdentifier",function(){return l}),t.d(n,"TextDocumentItem",function(){return g}),t.d(n,"MarkupKind",function(){return m}),t.d(n,"CompletionItemKind",function(){return h}),t.d(n,"InsertTextFormat",function(){return p}),t.d(n,"CompletionItem",function(){return v}),t.d(n,"CompletionList",function(){return _}),t.d(n,"MarkedString",function(){return y}),t.d(n,"ParameterInformation",function(){return b}),t.d(n,"SignatureInformation",function(){return C}),t.d(n,"DocumentHighlightKind",function(){return w}),t.d(n,"DocumentHighlight",function(){return k}),t.d(n,"SymbolKind",function(){return x}),t.d(n,"SymbolInformation",function(){return S}),t.d(n,"CodeActionContext",function(){return I}),t.d(n,"CodeLens",function(){return D}),t.d(n,"FormattingOptions",function(){return E}),t.d(n,"DocumentLink",function(){return M}),t.d(n,"EOL",function(){return O}),t.d(n,"TextDocument",function(){return A}),t.d(n,"TextDocumentSaveReason",function(){return P}),function(e){e.create=function(e,n){return{line:e,character:n}},e.is=function(e){var n=e;return F.defined(n)&&F.number(n.line)&&F.number(n.character)}}(r||(r={})),function(e){e.create=function(e,n,t,i){if(F.number(e)&&F.number(n)&&F.number(t)&&F.number(i))return{start:r.create(e,n),end:r.create(t,i)};if(r.is(e)&&r.is(n))return{start:e,end:n};throw new Error("Range#create called with invalid arguments["+e+", "+n+", "+t+", "+i+"]")},e.is=function(e){var n=e;return F.defined(n)&&r.is(n.start)&&r.is(n.end)}}(i||(i={})),function(e){e.create=function(e,n){return{uri:e,range:n}},e.is=function(e){var n=e;return F.defined(n)&&i.is(n.range)&&(F.string(n.uri)||F.undefined(n.uri))}}(o||(o={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(u||(u={})),function(e){e.create=function(e,n,t,r,i){var o={range:e,message:n};return F.defined(t)&&(o.severity=t),F.defined(r)&&(o.code=r),F.defined(i)&&(o.source=i),o},e.is=function(e){var n=e;return F.defined(n)&&i.is(n.range)&&F.string(n.message)&&(F.number(n.severity)||F.undefined(n.severity))&&(F.number(n.code)||F.string(n.code)||F.undefined(n.code))&&(F.string(n.source)||F.undefined(n.source))}}(a||(a={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i={title:e,command:n};return F.defined(t)&&t.length>0&&(i.arguments=t),i},e.is=function(e){var n=e;return F.defined(n)&&F.string(n.title)&&F.string(n.title)}}(c||(c={})),function(e){e.replace=function(e,n){return{range:e,newText:n}},e.insert=function(e,n){return{range:{start:e,end:e},newText:n}},e.del=function(e){return{range:e,newText:""}}}(s||(s={})),function(e){e.create=function(e,n){return{textDocument:e,edits:n}},e.is=function(e){var n=e;return F.defined(n)&&l.is(n.textDocument)&&Array.isArray(n.edits)}}(d||(d={}));var f,l,g,m,h,p,v,_,y,b,C,w,k,x,S,I,D,E,K=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,n){this.edits.push(s.insert(e,n))},e.prototype.replace=function(e,n){this.edits.push(s.replace(e,n))},e.prototype.delete=function(e){this.edits.push(s.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),T=function(){function e(e){var n=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var t=new K(e.edits);n._textEditChanges[e.textDocument.uri]=t}):e.changes&&Object.keys(e.changes).forEach(function(t){var r=new K(e.changes[t]);n._textEditChanges[t]=r}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(l.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var n=e;if(!(r=this._textEditChanges[n.uri])){var t={textDocument:n,edits:i=[]};this._workspaceEdit.documentChanges.push(t),r=new K(i),this._textEditChanges[n.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new K(i),this._textEditChanges[e]=r}return r},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var n=e;return F.defined(n)&&F.string(n.uri)}}(f||(f={})),function(e){e.create=function(e,n){return{uri:e,version:n}},e.is=function(e){var n=e;return F.defined(n)&&F.string(n.uri)&&F.number(n.version)}}(l||(l={})),function(e){e.create=function(e,n,t,r){return{uri:e,languageId:n,version:t,text:r}},e.is=function(e){var n=e;return F.defined(n)&&F.string(n.uri)&&F.string(n.languageId)&&F.number(n.version)&&F.string(n.text)}}(g||(g={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(m||(m={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(h||(h={})),function(e){e.PlainText=1,e.Snippet=2}(p||(p={})),function(e){e.create=function(e){return{label:e}}}(v||(v={})),function(e){e.create=function(e,n){return{items:e||[],isIncomplete:!!n}}}(_||(_={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(y||(y={})),function(e){e.create=function(e,n){return n?{label:e,documentation:n}:{label:e}}}(b||(b={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i={label:e};return F.defined(n)&&(i.documentation=n),F.defined(t)?i.parameters=t:i.parameters=[],i}}(C||(C={})),function(e){e.Text=1,e.Read=2,e.Write=3}(w||(w={})),function(e){e.create=function(e,n){var t={range:e};return F.number(n)&&(t.kind=n),t}}(k||(k={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(x||(x={})),function(e){e.create=function(e,n,t,r,i){var o={name:e,kind:n,location:{uri:r,range:t}};return i&&(o.containerName=i),o}}(S||(S={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var n=e;return F.defined(n)&&F.typedArray(n.diagnostics,a.is)}}(I||(I={})),function(e){e.create=function(e,n){var t={range:e};return F.defined(n)&&(t.data=n),t},e.is=function(e){var n=e;return F.defined(n)&&i.is(n.range)&&(F.undefined(n.command)||c.is(n.command))}}(D||(D={})),function(e){e.create=function(e,n){return{tabSize:e,insertSpaces:n}},e.is=function(e){var n=e;return F.defined(n)&&F.number(n.tabSize)&&F.boolean(n.insertSpaces)}}(E||(E={}));var M=function(){return function(){}}();!function(e){e.create=function(e,n){return{range:e,target:n}},e.is=function(e){var n=e;return F.defined(n)&&i.is(n.range)&&(F.undefined(n.target)||F.string(n.target))}}(M||(M={}));var A,P,O=["\n","\r\n","\r"];!function(e){e.create=function(e,n,t,r){return new j(e,n,t,r)},e.is=function(e){var n=e;return!!(F.defined(n)&&F.string(n.uri)&&(F.undefined(n.languageId)||F.string(n.languageId))&&F.number(n.lineCount)&&F.func(n.getText)&&F.func(n.positionAt)&&F.func(n.offsetAt))},e.applyEdits=function(e,n){for(var t=e.getText(),r=function e(n,t){if(n.length<=1)return n;var r=n.length/2|0,i=n.slice(0,r),o=n.slice(r);e(i,t),e(o,t);for(var u=0,a=0,c=0;u<i.length&&a<o.length;){var s=t(i[u],o[a]);n[c++]=s<=0?i[u++]:o[a++]}for(;u<i.length;)n[c++]=i[u++];for(;a<o.length;)n[c++]=o[a++];return n}(n,function(e,n){return 0==e.range.start.line-n.range.start.line?e.range.start.character-n.range.start.character:0}),i=t.length,o=r.length-1;o>=0;o--){var u=r[o],a=e.offsetAt(u.range.start),c=e.offsetAt(u.range.end);if(!(c<=i))throw new Error("Ovelapping edit");t=t.substring(0,a)+u.newText+t.substring(c,t.length),i=a}return t}}(A||(A={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(P||(P={}));var F,j=function(){function e(e,n,t,r){this._uri=e,this._languageId=n,this._version=t,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var n=this.offsetAt(e.start),t=this.offsetAt(e.end);return this._content.substring(n,t)}return this._content},e.prototype.update=function(e,n){this._content=e.text,this._version=n,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],n=this._content,t=!0,r=0;r<n.length;r++){t&&(e.push(r),t=!1);var i=n.charAt(r);t="\r"===i||"\n"===i,"\r"===i&&r+1<n.length&&"\n"===n.charAt(r+1)&&r++}t&&n.length>0&&e.push(n.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var n=this.getLineOffsets(),t=0,i=n.length;if(0===i)return r.create(0,e);for(;t<i;){var o=Math.floor((t+i)/2);n[o]>e?i=o:t=o+1}var u=t-1;return r.create(u,e-n[u])},e.prototype.offsetAt=function(e){var n=this.getLineOffsets();if(e.line>=n.length)return this._content.length;if(e.line<0)return 0;var t=n[e.line],r=e.line+1<n.length?n[e.line+1]:this._content.length;return Math.max(Math.min(t+e.character,r),t)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var n=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===n.call(e)},e.number=function(e){return"[object Number]"===n.call(e)},e.func=function(e){return"[object Function]"===n.call(e)},e.typedArray=function(e,n){return Array.isArray(e)&&e.every(n)}}(F||(F={}))},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/cssMode.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/cssMode.js ***!
  \****************************************************************************************************/
/*! exports provided: setupMode */function(e,n,t){"use strict";t.r(n),t.d(n,"setupMode",function(){return o});var r=t(/*! ./workerManager.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/workerManager.js"),i=t(/*! ./languageFeatures.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js");function o(e){var n=new r.WorkerManager(e),t=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return n.getLanguageServiceWorker.apply(n,[e].concat(t))},o=e.languageId;monaco.languages.registerCompletionItemProvider(o,new i.CompletionAdapter(t)),monaco.languages.registerHoverProvider(o,new i.HoverAdapter(t)),monaco.languages.registerDocumentHighlightProvider(o,new i.DocumentHighlightAdapter(t)),monaco.languages.registerDefinitionProvider(o,new i.DefinitionAdapter(t)),monaco.languages.registerReferenceProvider(o,new i.ReferenceAdapter(t)),monaco.languages.registerDocumentSymbolProvider(o,new i.DocumentSymbolAdapter(t)),monaco.languages.registerRenameProvider(o,new i.RenameAdapter(t)),monaco.languages.registerColorProvider(o,new i.DocumentColorAdapter(t)),new i.DiagnosticsAdapter(o,t,e)}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/languageFeatures.js ***!
  \*************************************************************************************************************/
/*! exports provided: DiagnosticsAdapter, CompletionAdapter, HoverAdapter, DocumentHighlightAdapter, DefinitionAdapter, ReferenceAdapter, RenameAdapter, DocumentSymbolAdapter, DocumentColorAdapter */function(e,n,t){"use strict";t.r(n),t.d(n,"DiagnosticsAdapter",function(){return o}),t.d(n,"CompletionAdapter",function(){return s}),t.d(n,"HoverAdapter",function(){return f}),t.d(n,"DocumentHighlightAdapter",function(){return l}),t.d(n,"DefinitionAdapter",function(){return m}),t.d(n,"ReferenceAdapter",function(){return h}),t.d(n,"RenameAdapter",function(){return p}),t.d(n,"DocumentSymbolAdapter",function(){return v}),t.d(n,"DocumentColorAdapter",function(){return _});var r=t(/*! ./_deps/vscode-languageserver-types/main.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-languageserver-types/main.js"),i=monaco.Uri,o=function(){function e(e,n,t){var r=this;this._languageId=e,this._worker=n,this._disposables=[],this._listener=Object.create(null);var i=function(e){var n,t=e.getModeId();t===r._languageId&&(r._listener[e.uri.toString()]=e.onDidChangeContent(function(){clearTimeout(n),n=setTimeout(function(){return r._doValidate(e.uri,t)},500)}),r._doValidate(e.uri,t))},o=function(e){monaco.editor.setModelMarkers(e,r._languageId,[]);var n=e.uri.toString(),t=r._listener[n];t&&(t.dispose(),delete r._listener[n])};this._disposables.push(monaco.editor.onDidCreateModel(i)),this._disposables.push(monaco.editor.onWillDisposeModel(o)),this._disposables.push(monaco.editor.onDidChangeModelLanguage(function(e){o(e.model),i(e.model)})),t.onDidChange(function(e){monaco.editor.getModels().forEach(function(e){e.getModeId()===r._languageId&&(o(e),i(e))})}),this._disposables.push({dispose:function(){for(var e in r._listener)r._listener[e].dispose()}}),monaco.editor.getModels().forEach(i)}return e.prototype.dispose=function(){this._disposables.forEach(function(e){return e&&e.dispose()}),this._disposables=[]},e.prototype._doValidate=function(e,n){this._worker(e).then(function(n){return n.doValidation(e.toString())}).then(function(t){var i=t.map(function(e){return function(e,n){var t="number"==typeof n.code?String(n.code):n.code;return{severity:function(e){switch(e){case r.DiagnosticSeverity.Error:return monaco.MarkerSeverity.Error;case r.DiagnosticSeverity.Warning:return monaco.MarkerSeverity.Warning;case r.DiagnosticSeverity.Information:return monaco.MarkerSeverity.Info;case r.DiagnosticSeverity.Hint:return monaco.MarkerSeverity.Hint;default:return monaco.MarkerSeverity.Info}}(n.severity),startLineNumber:n.range.start.line+1,startColumn:n.range.start.character+1,endLineNumber:n.range.end.line+1,endColumn:n.range.end.character+1,message:n.message,code:t,source:n.source}}(0,e)}),o=monaco.editor.getModel(e);o.getModeId()===n&&monaco.editor.setModelMarkers(o,n,i)}).done(void 0,function(e){console.error(e)})},e}();function u(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function a(e){if(e)return new monaco.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function c(e){if(e)return{range:a(e.range),text:e.newText}}var s=function(){function e(e){this._worker=e}return Object.defineProperty(e.prototype,"triggerCharacters",{get:function(){return[" ",":"]},enumerable:!0,configurable:!0}),e.prototype.provideCompletionItems=function(e,n,t){e.getWordUntilPosition(n);var i=e.uri;return y(t,this._worker(i).then(function(e){return e.doComplete(i.toString(),u(n))}).then(function(e){if(e){var n=e.items.map(function(e){var n={label:e.label,insertText:e.insertText,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,kind:function(e){var n=monaco.languages.CompletionItemKind;switch(e){case r.CompletionItemKind.Text:return n.Text;case r.CompletionItemKind.Method:return n.Method;case r.CompletionItemKind.Function:return n.Function;case r.CompletionItemKind.Constructor:return n.Constructor;case r.CompletionItemKind.Field:return n.Field;case r.CompletionItemKind.Variable:return n.Variable;case r.CompletionItemKind.Class:return n.Class;case r.CompletionItemKind.Interface:return n.Interface;case r.CompletionItemKind.Module:return n.Module;case r.CompletionItemKind.Property:return n.Property;case r.CompletionItemKind.Unit:return n.Unit;case r.CompletionItemKind.Value:return n.Value;case r.CompletionItemKind.Enum:return n.Enum;case r.CompletionItemKind.Keyword:return n.Keyword;case r.CompletionItemKind.Snippet:return n.Snippet;case r.CompletionItemKind.Color:return n.Color;case r.CompletionItemKind.File:return n.File;case r.CompletionItemKind.Reference:return n.Reference}return n.Property}(e.kind)};return e.textEdit&&(n.range=a(e.textEdit.range),n.insertText=e.textEdit.newText),e.additionalTextEdits&&(n.additionalTextEdits=e.additionalTextEdits.map(c)),e.insertTextFormat===r.InsertTextFormat.Snippet&&(n.insertText={value:n.insertText}),n});return{isIncomplete:e.isIncomplete,items:n}}}))},e}();function d(e){return"string"==typeof e?{value:e}:function(e){return e&&"object"==typeof e&&"string"==typeof e.kind}(e)?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"}}var f=function(){function e(e){this._worker=e}return e.prototype.provideHover=function(e,n,t){var r=e.uri;return y(t,this._worker(r).then(function(e){return e.doHover(r.toString(),u(n))}).then(function(e){if(e)return{range:a(e.range),contents:function(e){if(e)return Array.isArray(e)?e.map(d):[d(e)]}(e.contents)}}))},e}();var l=function(){function e(e){this._worker=e}return e.prototype.provideDocumentHighlights=function(e,n,t){var i=e.uri;return y(t,this._worker(i).then(function(e){return e.findDocumentHighlights(i.toString(),u(n))}).then(function(e){if(e)return e.map(function(e){return{range:a(e.range),kind:function(e){switch(e){case r.DocumentHighlightKind.Read:return monaco.languages.DocumentHighlightKind.Read;case r.DocumentHighlightKind.Write:return monaco.languages.DocumentHighlightKind.Write;case r.DocumentHighlightKind.Text:return monaco.languages.DocumentHighlightKind.Text}return monaco.languages.DocumentHighlightKind.Text}(e.kind)}})}))},e}();function g(e){return{uri:i.parse(e.uri),range:a(e.range)}}var m=function(){function e(e){this._worker=e}return e.prototype.provideDefinition=function(e,n,t){var r=e.uri;return y(t,this._worker(r).then(function(e){return e.findDefinition(r.toString(),u(n))}).then(function(e){if(e)return[g(e)]}))},e}(),h=function(){function e(e){this._worker=e}return e.prototype.provideReferences=function(e,n,t,r){var i=e.uri;return y(r,this._worker(i).then(function(e){return e.findReferences(i.toString(),u(n))}).then(function(e){if(e)return e.map(g)}))},e}();var p=function(){function e(e){this._worker=e}return e.prototype.provideRenameEdits=function(e,n,t,r){var o=e.uri;return y(r,this._worker(o).then(function(e){return e.doRename(o.toString(),u(n),t)}).then(function(e){return function(e){if(e&&e.changes){var n=[];for(var t in e.changes){for(var r=[],o=0,u=e.changes[t];o<u.length;o++){var c=u[o];r.push({range:a(c.range),text:c.newText})}n.push({resource:i.parse(t),edits:r})}return{edits:n}}}(e)}))},e}();var v=function(){function e(e){this._worker=e}return e.prototype.provideDocumentSymbols=function(e,n){var t=e.uri;return y(n,this._worker(t).then(function(e){return e.findDocumentSymbols(t.toString())}).then(function(e){if(e)return e.map(function(e){return{name:e.name,containerName:e.containerName,kind:function(e){var n=monaco.languages.SymbolKind;switch(e){case r.SymbolKind.File:return n.Array;case r.SymbolKind.Module:return n.Module;case r.SymbolKind.Namespace:return n.Namespace;case r.SymbolKind.Package:return n.Package;case r.SymbolKind.Class:return n.Class;case r.SymbolKind.Method:return n.Method;case r.SymbolKind.Property:return n.Property;case r.SymbolKind.Field:return n.Field;case r.SymbolKind.Constructor:return n.Constructor;case r.SymbolKind.Enum:return n.Enum;case r.SymbolKind.Interface:return n.Interface;case r.SymbolKind.Function:return n.Function;case r.SymbolKind.Variable:return n.Variable;case r.SymbolKind.Constant:return n.Constant;case r.SymbolKind.String:return n.String;case r.SymbolKind.Number:return n.Number;case r.SymbolKind.Boolean:return n.Boolean;case r.SymbolKind.Array:return n.Array}return n.Function}(e.kind),location:g(e.location)}})}))},e}(),_=function(){function e(e){this._worker=e}return e.prototype.provideDocumentColors=function(e,n){var t=e.uri;return y(n,this._worker(t).then(function(e){return e.findDocumentColors(t.toString())}).then(function(e){if(e)return e.map(function(e){return{color:e.color,range:a(e.range)}})}))},e.prototype.provideColorPresentations=function(e,n,t){var r=e.uri;return y(t,this._worker(r).then(function(e){return e.getColorPresentations(r.toString(),n.color,function(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}(n.range))}).then(function(e){if(e)return e.map(function(e){var n={label:e.label};return e.textEdit&&(n.textEdit=c(e.textEdit)),e.additionalTextEdits&&(n.additionalTextEdits=e.additionalTextEdits.map(c)),n})}))},e}();function y(e,n){return e.onCancellationRequested(function(){return n.cancel()}),n}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/workerManager.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/css/workerManager.js ***!
  \**********************************************************************************************************/
/*! exports provided: WorkerManager */function(e,n,t){"use strict";t.r(n),t.d(n,"WorkerManager",function(){return i});var r=monaco.Promise,i=function(){function e(e){var n=this;this._defaults=e,this._worker=null,this._idleCheckInterval=setInterval(function(){return n._checkIfIdle()},3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange(function(){return n._stopWorker()})}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},e.prototype._checkIfIdle=function(){this._worker&&(Date.now()-this._lastUsedTime>12e4&&this._stopWorker())},e.prototype._getClient=function(){return this._lastUsedTime=Date.now(),this._client||(this._worker=monaco.editor.createWebWorker({moduleId:"vs/language/css/cssWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId}}),this._client=this._worker.getProxy()),this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,n=this,t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];return function(e){var n,t,i=new r(function(e,r){n=e,t=r},function(){});return e.then(n,t),i}(this._getClient().then(function(n){e=n}).then(function(e){return n._worker.withSyncedResources(t)}).then(function(n){return e}))},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvY3NzL19kZXBzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci10eXBlcy9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb25hY28tZWRpdG9yL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9sYW5ndWFnZS9jc3MvY3NzTW9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9uYWNvLWVkaXRvci9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvY3NzL2xhbmd1YWdlRmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vbmFjby1lZGl0b3Ivbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2Nzcy93b3JrZXJNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIlBvc2l0aW9uIiwiUmFuZ2UiLCJMb2NhdGlvbiIsIkRpYWdub3N0aWNTZXZlcml0eSIsIkRpYWdub3N0aWMiLCJDb21tYW5kIiwiVGV4dEVkaXQiLCJUZXh0RG9jdW1lbnRFZGl0IiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiVGV4dERvY3VtZW50U2F2ZVJlYXNvbiIsImNyZWF0ZSIsImxpbmUiLCJjaGFyYWN0ZXIiLCJpcyIsInZhbHVlIiwiY2FuZGlkYXRlIiwiSXMiLCJkZWZpbmVkIiwibnVtYmVyIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic3RhcnQiLCJlbmQiLCJFcnJvciIsInVyaSIsInJhbmdlIiwic3RyaW5nIiwidW5kZWZpbmVkIiwiV2FybmluZyIsIkluZm9ybWF0aW9uIiwiSGludCIsIm1lc3NhZ2UiLCJzZXZlcml0eSIsImNvZGUiLCJzb3VyY2UiLCJyZXN1bHQiLCJ0aXRsZSIsImNvbW1hbmQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZXBsYWNlIiwibmV3VGV4dCIsImluc2VydCIsInBvc2l0aW9uIiwiZGVsIiwidGV4dERvY3VtZW50IiwiZWRpdHMiLCJWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiQXJyYXkiLCJpc0FycmF5IiwiVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlRleHREb2N1bWVudEl0ZW0iLCJNYXJrdXBLaW5kIiwiQ29tcGxldGlvbkl0ZW1LaW5kIiwiSW5zZXJ0VGV4dEZvcm1hdCIsIkNvbXBsZXRpb25JdGVtIiwiQ29tcGxldGlvbkxpc3QiLCJNYXJrZWRTdHJpbmciLCJQYXJhbWV0ZXJJbmZvcm1hdGlvbiIsIlNpZ25hdHVyZUluZm9ybWF0aW9uIiwiRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwiRG9jdW1lbnRIaWdobGlnaHQiLCJTeW1ib2xLaW5kIiwiU3ltYm9sSW5mb3JtYXRpb24iLCJDb2RlQWN0aW9uQ29udGV4dCIsIkNvZGVMZW5zIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJUZXh0RWRpdENoYW5nZUltcGwiLCJ0aGlzIiwicHJvdG90eXBlIiwicHVzaCIsImRlbGV0ZSIsImFkZCIsImVkaXQiLCJhbGwiLCJjbGVhciIsInNwbGljZSIsIldvcmtzcGFjZUNoYW5nZSIsIndvcmtzcGFjZUVkaXQiLCJfdGhpcyIsIl90ZXh0RWRpdENoYW5nZXMiLCJPYmplY3QiLCJfd29ya3NwYWNlRWRpdCIsImRvY3VtZW50Q2hhbmdlcyIsImZvckVhY2giLCJ0ZXh0RG9jdW1lbnRFZGl0IiwidGV4dEVkaXRDaGFuZ2UiLCJjaGFuZ2VzIiwia2V5cyIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldFRleHRFZGl0Q2hhbmdlIiwidmVyc2lvbiIsImxhbmd1YWdlSWQiLCJ0ZXh0IiwiUGxhaW5UZXh0IiwiTWFya2Rvd24iLCJUZXh0IiwiTWV0aG9kIiwiRnVuY3Rpb24iLCJDb25zdHJ1Y3RvciIsIkZpZWxkIiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlByb3BlcnR5IiwiVW5pdCIsIlZhbHVlIiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiQ29sb3IiLCJGaWxlIiwiUmVmZXJlbmNlIiwiRm9sZGVyIiwiRW51bU1lbWJlciIsIkNvbnN0YW50IiwiU3RydWN0IiwiRXZlbnQiLCJPcGVyYXRvciIsIlR5cGVQYXJhbWV0ZXIiLCJsYWJlbCIsIml0ZW1zIiwiaXNJbmNvbXBsZXRlIiwiZnJvbVBsYWluVGV4dCIsInBsYWluVGV4dCIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJzIiwiUmVhZCIsIldyaXRlIiwia2luZCIsIk5hbWVzcGFjZSIsIlBhY2thZ2UiLCJTdHJpbmciLCJOdW1iZXIiLCJCb29sZWFuIiwiS2V5IiwiTnVsbCIsIm5hbWUiLCJjb250YWluZXJOYW1lIiwibG9jYXRpb24iLCJkaWFnbm9zdGljcyIsInR5cGVkQXJyYXkiLCJkYXRhIiwidGFiU2l6ZSIsImluc2VydFNwYWNlcyIsImJvb2xlYW4iLCJEb2N1bWVudExpbmsiLCJ0YXJnZXQiLCJUZXh0RG9jdW1lbnQiLCJFT0wiLCJjb250ZW50IiwiRnVsbFRleHREb2N1bWVudCIsImxpbmVDb3VudCIsImZ1bmMiLCJnZXRUZXh0IiwicG9zaXRpb25BdCIsIm9mZnNldEF0IiwiYXBwbHlFZGl0cyIsImRvY3VtZW50Iiwic29ydGVkRWRpdHMiLCJtZXJnZVNvcnQiLCJjb21wYXJlIiwicCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwibGVmdElkeCIsInJpZ2h0SWR4IiwiaSIsInJldCIsImEiLCJiIiwibGFzdE1vZGlmaWVkT2Zmc2V0IiwiZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0Iiwic3Vic3RyaW5nIiwiTWFudWFsIiwiQWZ0ZXJEZWxheSIsIkZvY3VzT3V0IiwiX3VyaSIsIl9sYW5ndWFnZUlkIiwiX3ZlcnNpb24iLCJfY29udGVudCIsIl9saW5lT2Zmc2V0cyIsInVwZGF0ZSIsImV2ZW50IiwiZ2V0TGluZU9mZnNldHMiLCJsaW5lT2Zmc2V0cyIsImlzTGluZVN0YXJ0IiwiY2giLCJjaGFyQXQiLCJvZmZzZXQiLCJNYXRoIiwibWF4IiwibWluIiwibG93IiwiaGlnaCIsIm1pZCIsImZsb29yIiwibGluZU9mZnNldCIsIm5leHRMaW5lT2Zmc2V0IiwidG9TdHJpbmciLCJjYWxsIiwiY2hlY2siLCJldmVyeSIsIl9sYW5ndWFnZUZlYXR1cmVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJzZXR1cE1vZGUiLCJkZWZhdWx0cyIsImNsaWVudCIsIl93b3JrZXJNYW5hZ2VyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJ3b3JrZXIiLCJmaXJzdCIsIm1vcmUiLCJnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIiLCJhcHBseSIsImNvbmNhdCIsIm1vbmFjbyIsImxhbmd1YWdlcyIsInJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlciIsInJlZ2lzdGVySG92ZXJQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyIiwicmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlciIsInJlZ2lzdGVyRG9jdW1lbnRTeW1ib2xQcm92aWRlciIsInJlZ2lzdGVyUmVuYW1lUHJvdmlkZXIiLCJyZWdpc3RlckNvbG9yUHJvdmlkZXIiLCJfZGVwc192c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfbWFpbl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiVXJpIiwiRGlhZ25vc3RpY3NBZGFwdGVyIiwiX3dvcmtlciIsIl9kaXNwb3NhYmxlcyIsIl9saXN0ZW5lciIsIm9uTW9kZWxBZGQiLCJtb2RlbCIsImhhbmRsZSIsIm1vZGVJZCIsImdldE1vZGVJZCIsIm9uRGlkQ2hhbmdlQ29udGVudCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJfZG9WYWxpZGF0ZSIsIm9uTW9kZWxSZW1vdmVkIiwiZWRpdG9yIiwic2V0TW9kZWxNYXJrZXJzIiwidXJpU3RyIiwibGlzdGVuZXIiLCJkaXNwb3NlIiwib25EaWRDcmVhdGVNb2RlbCIsIm9uV2lsbERpc3Bvc2VNb2RlbCIsIm9uRGlkQ2hhbmdlTW9kZWxMYW5ndWFnZSIsIm9uRGlkQ2hhbmdlIiwiXyIsImdldE1vZGVscyIsInJlc291cmNlIiwidGhlbiIsImRvVmFsaWRhdGlvbiIsIm1hcmtlcnMiLCJtYXAiLCJkaWFnIiwibHNTZXZlcml0eSIsIk1hcmtlclNldmVyaXR5IiwiSW5mbyIsInRvU2V2ZXJpdHkiLCJzdGFydExpbmVOdW1iZXIiLCJzdGFydENvbHVtbiIsImVuZExpbmVOdW1iZXIiLCJlbmRDb2x1bW4iLCJ0b0RpYWdub3N0aWNzIiwiZ2V0TW9kZWwiLCJkb25lIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZnJvbVBvc2l0aW9uIiwiY29sdW1uIiwibGluZU51bWJlciIsInRvUmFuZ2UiLCJ0b1RleHRFZGl0IiwidGV4dEVkaXQiLCJDb21wbGV0aW9uQWRhcHRlciIsInByb3ZpZGVDb21wbGV0aW9uSXRlbXMiLCJ0b2tlbiIsImdldFdvcmRVbnRpbFBvc2l0aW9uIiwid2lyZUNhbmNlbGxhdGlvblRva2VuIiwiZG9Db21wbGV0ZSIsImluZm8iLCJlbnRyeSIsIml0ZW0iLCJpbnNlcnRUZXh0Iiwic29ydFRleHQiLCJmaWx0ZXJUZXh0IiwiZGV0YWlsIiwibUl0ZW1LaW5kIiwidG9Db21wbGV0aW9uSXRlbUtpbmQiLCJhZGRpdGlvbmFsVGV4dEVkaXRzIiwiaW5zZXJ0VGV4dEZvcm1hdCIsInRvTWFya2Rvd25TdHJpbmciLCJ0aGluZyIsImlzTWFya3VwQ29udGVudCIsImxhbmd1YWdlIiwiSG92ZXJBZGFwdGVyIiwicHJvdmlkZUhvdmVyIiwiZG9Ib3ZlciIsImNvbnRlbnRzIiwidG9NYXJrZWRTdHJpbmdBcnJheSIsIkRvY3VtZW50SGlnaGxpZ2h0QWRhcHRlciIsInByb3ZpZGVEb2N1bWVudEhpZ2hsaWdodHMiLCJmaW5kRG9jdW1lbnRIaWdobGlnaHRzIiwiZW50cmllcyIsInRvRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwidG9Mb2NhdGlvbiIsInBhcnNlIiwiRGVmaW5pdGlvbkFkYXB0ZXIiLCJwcm92aWRlRGVmaW5pdGlvbiIsImZpbmREZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsIlJlZmVyZW5jZUFkYXB0ZXIiLCJwcm92aWRlUmVmZXJlbmNlcyIsImNvbnRleHQiLCJmaW5kUmVmZXJlbmNlcyIsIlJlbmFtZUFkYXB0ZXIiLCJwcm92aWRlUmVuYW1lRWRpdHMiLCJuZXdOYW1lIiwiZG9SZW5hbWUiLCJyZXNvdXJjZUVkaXRzIiwiX2EiLCJ0b1dvcmtzcGFjZUVkaXQiLCJEb2N1bWVudFN5bWJvbEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRTeW1ib2xzIiwiZmluZERvY3VtZW50U3ltYm9scyIsIm1LaW5kIiwidG9TeW1ib2xLaW5kIiwiRG9jdW1lbnRDb2xvckFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRDb2xvcnMiLCJmaW5kRG9jdW1lbnRDb2xvcnMiLCJpbmZvcyIsImNvbG9yIiwicHJvdmlkZUNvbG9yUHJlc2VudGF0aW9ucyIsImdldENvbG9yUHJlc2VudGF0aW9ucyIsImZyb21SYW5nZSIsInByZXNlbnRhdGlvbnMiLCJwcmVzZW50YXRpb24iLCJwcm9taXNlIiwib25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjYW5jZWwiLCJXb3JrZXJNYW5hZ2VyIiwiUHJvbWlzZSIsIl9kZWZhdWx0cyIsIl9pZGxlQ2hlY2tJbnRlcnZhbCIsInNldEludGVydmFsIiwiX2NoZWNrSWZJZGxlIiwiX2xhc3RVc2VkVGltZSIsIl9jb25maWdDaGFuZ2VMaXN0ZW5lciIsIl9zdG9wV29ya2VyIiwiX2NsaWVudCIsImNsZWFySW50ZXJ2YWwiLCJEYXRlIiwibm93IiwiX2dldENsaWVudCIsImNyZWF0ZVdlYldvcmtlciIsIm1vZHVsZUlkIiwiY3JlYXRlRGF0YSIsImxhbmd1YWdlU2V0dGluZ3MiLCJkaWFnbm9zdGljc09wdGlvbnMiLCJnZXRQcm94eSIsInJlc291cmNlcyIsImNvbXBsZXRlQ2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwiciIsImMiLCJ0b1NoYWxsb3dDYW5jZWxQcm9taXNlIiwid2l0aFN5bmNlZFJlc291cmNlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs4aUJBU0EsSUFBQUEsRUF3QkFDLEVBMkJBQyxFQXVCQUMsRUF1QkFDLEVBcUNBQyxFQThCQUMsRUFpQ0FDLGkxQ0E5TUFDLEVBQUFDLEVBQUFDLEVBQUEsMkNBQUFDLElBVUEsU0FBQVgsR0FTQUEsRUFBQVksT0FIQSxTQUFBQyxFQUFBQyxHQUNBLE9BQWdCRCxPQUFBQyxjQVVoQmQsRUFBQWUsR0FKQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQ0EsT0FBQUUsRUFBQUMsUUFBQUYsSUFBQUMsRUFBQUUsT0FBQUgsRUFBQUosT0FBQUssRUFBQUUsT0FBQUgsRUFBQUgsWUFmQSxDQWtCQ2QsV0FNRCxTQUFBQyxHQVlBQSxFQUFBVyxPQVhBLFNBQUFTLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQU4sRUFBQUUsT0FBQUMsSUFBQUgsRUFBQUUsT0FBQUUsSUFBQUosRUFBQUUsT0FBQUcsSUFBQUwsRUFBQUUsT0FBQUksR0FDQSxPQUFvQkMsTUFBQXpCLEVBQUFZLE9BQUFTLEVBQUFDLEdBQUFJLElBQUExQixFQUFBWSxPQUFBVyxFQUFBQyxJQUVwQixHQUFBeEIsRUFBQWUsR0FBQU0sSUFBQXJCLEVBQUFlLEdBQUFPLEdBQ0EsT0FBb0JHLE1BQUFKLEVBQUFLLElBQUFKLEdBR3BCLFVBQUFLLE1BQUEsOENBQUFOLEVBQUEsS0FBQUMsRUFBQSxLQUFBQyxFQUFBLEtBQUFDLEVBQUEsTUFXQXZCLEVBQUFjLEdBSkEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUNBLE9BQUFFLEVBQUFDLFFBQUFGLElBQUFqQixFQUFBZSxHQUFBRSxFQUFBUSxRQUFBekIsRUFBQWUsR0FBQUUsRUFBQVMs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aUJBQUE1UyxLQUFBNlIsVUFBQWdCLG1CQUNBalIsV0FBQTVCLEtBQUE2UixVQUFBalEsY0FHQTVCLEtBQUFvUyxRQUFBcFMsS0FBQXVLLFFBQUF1SSxZQUVBOVMsS0FBQW9TLFNBRUFULEVBQUExUixVQUFBc0oseUJBQUEsV0FHQSxJQUZBLElBS0E2SSxFQUxBelIsRUFBQVgsS0FDQStTLEtBQ0E5VSxFQUFBLEVBQXdCQSxFQUFBQyxVQUFBQyxPQUF1QkYsSUFDL0M4VSxFQUFBOVUsR0FBQUMsVUFBQUQsR0FHQSxPQVNBLFNBQUFrSSxHQUNBLElBQUE2TSxFQUNBQyxFQUNBQyxFQUFBLElBQUF0QixFQUFBLFNBQUF1QixFQUFBck0sR0FDQWtNLEVBQUFHLEVBQ0FGLEVBQUFuTSxHQUNLLGNBRUwsT0FEQVgsRUFBQTZGLEtBQUFnSCxFQUFBQyxHQUNBQyxFQWpCQUUsQ0FBQXBULEtBQUF3UyxhQUFBeEcsS0FBQSxTQUFBOUMsR0FDQWtKLEVBQUFsSixJQUNTOEMsS0FBQSxTQUFBSCxHQUNULE9BQUFsTCxFQUFBNEosUUFBQThJLG9CQUFBTixLQUNTL0csS0FBQSxTQUFBSCxHQUFxQixPQUFBdUcsTUFFOUJULEVBNURBIiwiZmlsZSI6IjM0LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogVGhlIFBvc2l0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW1Bvc2l0aW9uXSgjUG9zaXRpb24pIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uIChQb3NpdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUG9zaXRpb24gbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiBsaW5lIGFuZCBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIGxpbmUgVGhlIHBvc2l0aW9uJ3MgbGluZS5cbiAgICAgKiBAcGFyYW0gY2hhcmFjdGVyIFRoZSBwb3NpdGlvbidzIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgICAgIHJldHVybiB7IGxpbmU6IGxpbmUsIGNoYXJhY3RlcjogY2hhcmFjdGVyIH07XG4gICAgfVxuICAgIFBvc2l0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJuYWwgY29uZm9ybXMgdG8gdGhlIFtQb3NpdGlvbl0oI1Bvc2l0aW9uKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLm51bWJlcihjYW5kaWRhdGUubGluZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5jaGFyYWN0ZXIpO1xuICAgIH1cbiAgICBQb3NpdGlvbi5pcyA9IGlzO1xufSkoUG9zaXRpb24gfHwgKFBvc2l0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIFJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW1JhbmdlXSgjUmFuZ2UpIGxpdGVyYWxzLlxuICovXG5leHBvcnQgdmFyIFJhbmdlO1xuKGZ1bmN0aW9uIChSYW5nZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShvbmUsIHR3bywgdGhyZWUsIGZvdXIpIHtcbiAgICAgICAgaWYgKElzLm51bWJlcihvbmUpICYmIElzLm51bWJlcih0d28pICYmIElzLm51bWJlcih0aHJlZSkgJiYgSXMubnVtYmVyKGZvdXIpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogUG9zaXRpb24uY3JlYXRlKG9uZSwgdHdvKSwgZW5kOiBQb3NpdGlvbi5jcmVhdGUodGhyZWUsIGZvdXIpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUG9zaXRpb24uaXMob25lKSAmJiBQb3NpdGlvbi5pcyh0d28pKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogb25lLCBlbmQ6IHR3byB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFuZ2UjY3JlYXRlIGNhbGxlZCB3aXRoIGludmFsaWQgYXJndW1lbnRzW1wiICsgb25lICsgXCIsIFwiICsgdHdvICsgXCIsIFwiICsgdGhyZWUgKyBcIiwgXCIgKyBmb3VyICsgXCJdXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFJhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1JhbmdlXSgjUmFuZ2UpIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLnN0YXJ0KSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUuZW5kKTtcbiAgICB9XG4gICAgUmFuZ2UuaXMgPSBpcztcbn0pKFJhbmdlIHx8IChSYW5nZSA9IHt9KSk7XG4vKipcbiAqIFRoZSBMb2NhdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtMb2NhdGlvbl0oI0xvY2F0aW9uKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBMb2NhdGlvbjtcbihmdW5jdGlvbiAoTG9jYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgTG9jYXRpb24gbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBsb2NhdGlvbidzIHVyaS5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIGxvY2F0aW9uJ3MgcmFuZ2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmksIHJhbmdlOiByYW5nZSB9O1xuICAgIH1cbiAgICBMb2NhdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtMb2NhdGlvbl0oI0xvY2F0aW9uKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnVyaSkpO1xuICAgIH1cbiAgICBMb2NhdGlvbi5pcyA9IGlzO1xufSkoTG9jYXRpb24gfHwgKExvY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGRpYWdub3N0aWMncyBzZXJ2ZXJpdHkuXG4gKi9cbmV4cG9ydCB2YXIgRGlhZ25vc3RpY1NldmVyaXR5O1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljU2V2ZXJpdHkpIHtcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGFuIGVycm9yLlxuICAgICAqL1xuICAgIERpYWdub3N0aWNTZXZlcml0eS5FcnJvciA9IDE7XG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhIHdhcm5pbmcuXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmcgPSAyO1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYW4gaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uID0gMztcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGEgaGludC5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSGludCA9IDQ7XG59KShEaWFnbm9zdGljU2V2ZXJpdHkgfHwgKERpYWdub3N0aWNTZXZlcml0eSA9IHt9KSk7XG4vKipcbiAqIFRoZSBEaWFnbm9zdGljIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW0RpYWdub3N0aWNdKCNEaWFnbm9zdGljKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBEaWFnbm9zdGljO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBEaWFnbm9zdGljIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBtZXNzYWdlLCBzZXZlcml0eSwgY29kZSwgc291cmNlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSwgbWVzc2FnZTogbWVzc2FnZSB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChzZXZlcml0eSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGNvZGUpKSB7XG4gICAgICAgICAgICByZXN1bHQuY29kZSA9IGNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoc291cmNlKSkge1xuICAgICAgICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEaWFnbm9zdGljLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0RpYWdub3N0aWNdKCNEaWFnbm9zdGljKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpXG4gICAgICAgICAgICAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpXG4gICAgICAgICAgICAmJiAoSXMubnVtYmVyKGNhbmRpZGF0ZS5zZXZlcml0eSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zZXZlcml0eSkpXG4gICAgICAgICAgICAmJiAoSXMubnVtYmVyKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZSkpXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5zb3VyY2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc291cmNlKSk7XG4gICAgfVxuICAgIERpYWdub3N0aWMuaXMgPSBpcztcbn0pKERpYWdub3N0aWMgfHwgKERpYWdub3N0aWMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29tbWFuZCBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtDb21tYW5kXSgjQ29tbWFuZCkgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgQ29tbWFuZDtcbihmdW5jdGlvbiAoQ29tbWFuZCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29tbWFuZCBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwgY29tbWFuZCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0geyB0aXRsZTogdGl0bGUsIGNvbW1hbmQ6IGNvbW1hbmQgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoYXJncykgJiYgYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQuYXJndW1lbnRzID0gYXJncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb21tYW5kLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0NvbW1hbmRdKCNDb21tYW5kKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpO1xuICAgIH1cbiAgICBDb21tYW5kLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbi8qKlxuICogVGhlIFRleHRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHJlcGxhY2UsXG4gKiBpbnNlcnQgYW5kIGRlbGV0ZSBlZGl0cyBtb3JlIGVhc2lseS5cbiAqL1xuZXhwb3J0IHZhciBUZXh0RWRpdDtcbihmdW5jdGlvbiAoVGV4dEVkaXQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVwbGFjZSB0ZXh0IGVkaXQuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0ZXh0IHRvIGJlIHJlcGxhY2VkLlxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSBuZXcgdGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKHJhbmdlLCBuZXdUZXh0KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgbmV3VGV4dDogbmV3VGV4dCB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaW5zZXJ0IHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhdC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgdGV4dCB0byBiZSBpbnNlcnRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQ6IG5ld1RleHQgfTtcbiAgICB9XG4gICAgVGV4dEVkaXQuaW5zZXJ0ID0gaW5zZXJ0O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWxldGUgdGV4dCBlZGl0LlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSBkZWxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbChyYW5nZSkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogcmFuZ2UsIG5ld1RleHQ6ICcnIH07XG4gICAgfVxuICAgIFRleHRFZGl0LmRlbCA9IGRlbDtcbn0pKFRleHRFZGl0IHx8IChUZXh0RWRpdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlXG4gKiBhbiBlZGl0IHRoYXQgbWFuaXB1bGF0ZXMgYSB0ZXh0IGRvY3VtZW50LlxuICovXG5leHBvcnQgdmFyIFRleHREb2N1bWVudEVkaXQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEVkaXQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGBUZXh0RG9jdW1lbnRFZGl0YFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgICAgIHJldHVybiB7IHRleHREb2N1bWVudDogdGV4dERvY3VtZW50LCBlZGl0czogZWRpdHMgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50RWRpdC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS50ZXh0RG9jdW1lbnQpXG4gICAgICAgICAgICAmJiBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5lZGl0cyk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEVkaXQuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEVkaXQgfHwgKFRleHREb2N1bWVudEVkaXQgPSB7fSkpO1xudmFyIFRleHRFZGl0Q2hhbmdlSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMpIHtcbiAgICAgICAgdGhpcy5lZGl0cyA9IGVkaXRzO1xuICAgIH1cbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgICAgICB0aGlzLmVkaXRzLnB1c2goVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0KSk7XG4gICAgfTtcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAocmFuZ2UsIG5ld1RleHQpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQpKTtcbiAgICB9O1xuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIHRoaXMuZWRpdHMucHVzaChUZXh0RWRpdC5kZWwocmFuZ2UpKTtcbiAgICB9O1xuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVkaXQpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRzO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5zcGxpY2UoMCwgdGhpcy5lZGl0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRleHRFZGl0Q2hhbmdlSW1wbDtcbn0oKSk7XG4vKipcbiAqIEEgd29ya3NwYWNlIGNoYW5nZSBoZWxwcyBjb25zdHJ1Y3RpbmcgY2hhbmdlcyB0byBhIHdvcmtzcGFjZS5cbiAqL1xudmFyIFdvcmtzcGFjZUNoYW5nZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXb3Jrc3BhY2VDaGFuZ2Uod29ya3NwYWNlRWRpdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAod29ya3NwYWNlRWRpdCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdCA9IHdvcmtzcGFjZUVkaXQ7XG4gICAgICAgICAgICBpZiAod29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB3b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXh0RG9jdW1lbnRFZGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwodGV4dERvY3VtZW50RWRpdC5lZGl0cyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50RWRpdC50ZXh0RG9jdW1lbnQudXJpXSA9IHRleHRFZGl0Q2hhbmdlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAod29ya3NwYWNlRWRpdC5jaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMod29ya3NwYWNlRWRpdC5jaGFuZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRFZGl0Q2hhbmdlID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbCh3b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHRleHRFZGl0Q2hhbmdlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLCBcImVkaXRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBbV29ya3NwYWNlRWRpdF0oI1dvcmtzcGFjZUVkaXQpIGxpdGVyYWxcbiAgICAgICAgICogdXNlIHRvIGJlIHJldHVybmVkIGZyb20gYSB3b3Jrc3BhY2UgZWRpdCBvcGVyYXRpb24gbGlrZSByZW5hbWUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93b3Jrc3BhY2VFZGl0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLmdldFRleHRFZGl0Q2hhbmdlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyhrZXkpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dvcmtzcGFjZUVkaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0ge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudENoYW5nZXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciB2ZXJzaW9uZWQgZG9jdW1lbnQgY2hhbmdlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ZXh0RG9jdW1lbnQgPSBrZXk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dERvY3VtZW50RWRpdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRzOiBlZGl0c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaCh0ZXh0RG9jdW1lbnRFZGl0KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl93b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIG5vcm1hbCB0ZXh0IGVkaXQgY2hhbmdlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVkaXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzW2tleV0gPSBlZGl0cztcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBXb3Jrc3BhY2VDaGFuZ2U7XG59KCkpO1xuZXhwb3J0IHsgV29ya3NwYWNlQ2hhbmdlIH07XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRJZGVudGlmaWVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW1RleHREb2N1bWVudElkZW50aWZpZXJdKCNUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUZXh0RG9jdW1lbnRJZGVudGlmaWVyIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgICAgICByZXR1cm4geyB1cmk6IHVyaSB9O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1RleHREb2N1bWVudElkZW50aWZpZXJdKCNUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW1ZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJdKCNWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uIChWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmksIHZlcnNpb246IHZlcnNpb24gfTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyXSgjVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcikgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS52ZXJzaW9uKTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRJdGVtIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogW1RleHREb2N1bWVudEl0ZW1dKCNUZXh0RG9jdW1lbnRJdGVtKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBUZXh0RG9jdW1lbnRJdGVtO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRJdGVtKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUZXh0RG9jdW1lbnRJdGVtIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlSWQgVGhlIGRvY3VtZW50J3MgbGFuZ3VhZ2UgaWRlbnRpZmllci5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgZG9jdW1lbnQncyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmksIGxhbmd1YWdlSWQ6IGxhbmd1YWdlSWQsIHZlcnNpb246IHZlcnNpb24sIHRleHQ6IHRleHQgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SXRlbS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtUZXh0RG9jdW1lbnRJdGVtXSgjVGV4dERvY3VtZW50SXRlbSkgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEl0ZW0uaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGNvbnRlbnQgdHlwZSB0aGF0IGEgY2xpZW50IHN1cHBvcnRzIGluIHZhcmlvdXNcbiAqIHJlc3VsdCBsaXRlcmFscyBsaWtlIGBIb3ZlcmAsIGBQYXJhbWV0ZXJJbmZvYCBvciBgQ29tcGxldGlvbkl0ZW1gLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgYE1hcmt1cEtpbmRzYCBtdXN0IG5vdCBzdGFydCB3aXRoIGEgYCRgLiBUaGlzIGtpbmRzXG4gKiBhcmUgcmVzZXJ2ZWQgZm9yIGludGVybmFsIHVzYWdlLlxuICovXG5leHBvcnQgdmFyIE1hcmt1cEtpbmQ7XG4oZnVuY3Rpb24gKE1hcmt1cEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBQbGFpbiB0ZXh0IGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XG4gICAgICovXG4gICAgTWFya3VwS2luZC5QbGFpblRleHQgPSAncGxhaW50ZXh0JztcbiAgICAvKipcbiAgICAgKiBNYXJrZG93biBpcyBzdXBwb3J0ZWQgYXMgYSBjb250ZW50IGZvcm1hdFxuICAgICAqL1xuICAgIE1hcmt1cEtpbmQuTWFya2Rvd24gPSAnbWFya2Rvd24nO1xufSkoTWFya3VwS2luZCB8fCAoTWFya3VwS2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSBraW5kIG9mIGEgY29tcGxldGlvbiBlbnRyeS5cbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbUtpbmQ7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtS2luZCkge1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5UZXh0ID0gMTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kID0gMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb24gPSAzO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvciA9IDQ7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkID0gNTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUgPSA2O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5DbGFzcyA9IDc7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZSA9IDg7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZSA9IDk7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ID0gMTA7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQgPSAxMTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUgPSAxMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bSA9IDEzO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkID0gMTQ7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlNuaXBwZXQgPSAxNTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgPSAxNjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmlsZSA9IDE3O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5SZWZlcmVuY2UgPSAxODtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRm9sZGVyID0gMTk7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkVudW1NZW1iZXIgPSAyMDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RhbnQgPSAyMTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU3RydWN0ID0gMjI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkV2ZW50ID0gMjM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLk9wZXJhdG9yID0gMjQ7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNTtcbn0pKENvbXBsZXRpb25JdGVtS2luZCB8fCAoQ29tcGxldGlvbkl0ZW1LaW5kID0ge30pKTtcbi8qKlxuICogRGVmaW5lcyB3aGV0aGVyIHRoZSBpbnNlcnQgdGV4dCBpbiBhIGNvbXBsZXRpb24gaXRlbSBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXNcbiAqIHBsYWluIHRleHQgb3IgYSBzbmlwcGV0LlxuICovXG5leHBvcnQgdmFyIEluc2VydFRleHRGb3JtYXQ7XG4oZnVuY3Rpb24gKEluc2VydFRleHRGb3JtYXQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSB0ZXh0IHRvIGJlIGluc2VydGVkIGlzIHRyZWF0ZWQgYXMgYSBwbGFpbiBzdHJpbmcuXG4gICAgICovXG4gICAgSW5zZXJ0VGV4dEZvcm1hdC5QbGFpblRleHQgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBwcmltYXJ5IHRleHQgdG8gYmUgaW5zZXJ0ZWQgaXMgdHJlYXRlZCBhcyBhIHNuaXBwZXQuXG4gICAgICpcbiAgICAgKiBBIHNuaXBwZXQgY2FuIGRlZmluZSB0YWIgc3RvcHMgYW5kIHBsYWNlaG9sZGVycyB3aXRoIGAkMWAsIGAkMmBcbiAgICAgKiBhbmQgYCR7Mzpmb299YC4gYCQwYCBkZWZpbmVzIHRoZSBmaW5hbCB0YWIgc3RvcCwgaXQgZGVmYXVsdHMgdG9cbiAgICAgKiB0aGUgZW5kIG9mIHRoZSBzbmlwcGV0LiBQbGFjZWhvbGRlcnMgd2l0aCBlcXVhbCBpZGVudGlmaWVycyBhcmUgbGlua2VkLFxuICAgICAqIHRoYXQgaXMgdHlwaW5nIGluIG9uZSB3aWxsIHVwZGF0ZSBvdGhlcnMgdG9vLlxuICAgICAqXG4gICAgICogU2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvdnNjb2RlL2Jsb2IvbWFzdGVyL3NyYy92cy9lZGl0b3IvY29udHJpYi9zbmlwcGV0L2NvbW1vbi9zbmlwcGV0Lm1kXG4gICAgICovXG4gICAgSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0ID0gMjtcbn0pKEluc2VydFRleHRGb3JtYXQgfHwgKEluc2VydFRleHRGb3JtYXQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29tcGxldGlvbkl0ZW0gbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGhcbiAqIGNvbXBsZXRpb24gaXRlbXMuXG4gKi9cbmV4cG9ydCB2YXIgQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29tcGxldGlvbiBpdGVtIGFuZCBzZWVkIGl0IHdpdGggYSBsYWJlbC5cbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGNvbXBsZXRpb24gaXRlbSdzIGxhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiB7IGxhYmVsOiBsYWJlbCB9O1xuICAgIH1cbiAgICBDb21wbGV0aW9uSXRlbS5jcmVhdGUgPSBjcmVhdGU7XG59KShDb21wbGV0aW9uSXRlbSB8fCAoQ29tcGxldGlvbkl0ZW0gPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29tcGxldGlvbkxpc3QgbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGhcbiAqIGNvbXBsZXRpb24gbGlzdHMuXG4gKi9cbmV4cG9ydCB2YXIgQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25MaXN0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb21wbGV0aW9uIGxpc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXRlbXMgVGhlIGNvbXBsZXRpb24gaXRlbXMuXG4gICAgICogQHBhcmFtIGlzSW5jb21wbGV0ZSBUaGUgbGlzdCBpcyBub3QgY29tcGxldGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIHsgaXRlbXM6IGl0ZW1zID8gaXRlbXMgOiBbXSwgaXNJbmNvbXBsZXRlOiAhIWlzSW5jb21wbGV0ZSB9O1xuICAgIH1cbiAgICBDb21wbGV0aW9uTGlzdC5jcmVhdGUgPSBjcmVhdGU7XG59KShDb21wbGV0aW9uTGlzdCB8fCAoQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xuZXhwb3J0IHZhciBNYXJrZWRTdHJpbmc7XG4oZnVuY3Rpb24gKE1hcmtlZFN0cmluZykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXJrZWQgc3RyaW5nIGZyb20gcGxhaW4gdGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwbGFpblRleHQgVGhlIHBsYWluIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICAgICAgcmV0dXJuIHBsYWluVGV4dC5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgXCJcXFxcJCZcIik7IC8vIGVzY2FwZSBtYXJrZG93biBzeW50YXggdG9rZW5zOiBodHRwOi8vZGFyaW5nZmlyZWJhbGwubmV0L3Byb2plY3RzL21hcmtkb3duL3N5bnRheCNiYWNrc2xhc2hcbiAgICB9XG4gICAgTWFya2VkU3RyaW5nLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xufSkoTWFya2VkU3RyaW5nIHx8IChNYXJrZWRTdHJpbmcgPSB7fSkpO1xuLyoqXG4gKiBUaGUgUGFyYW1ldGVySW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbUGFyYW1ldGVySW5mb3JtYXRpb25dKCNQYXJhbWV0ZXJJbmZvcm1hdGlvbikgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgUGFyYW1ldGVySW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKFBhcmFtZXRlckluZm9ybWF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBwYXJhbWV0ZXIgaW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYWJlbCBBIGxhYmVsIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRhdGlvbiBBIGRvYyBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudGF0aW9uID8geyBsYWJlbDogbGFiZWwsIGRvY3VtZW50YXRpb246IGRvY3VtZW50YXRpb24gfSA6IHsgbGFiZWw6IGxhYmVsIH07XG4gICAgfVxuICAgIFBhcmFtZXRlckluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICA7XG59KShQYXJhbWV0ZXJJbmZvcm1hdGlvbiB8fCAoUGFyYW1ldGVySW5mb3JtYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgU2lnbmF0dXJlSW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbU2lnbmF0dXJlSW5mb3JtYXRpb25dKCNTaWduYXR1cmVJbmZvcm1hdGlvbikgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgU2lnbmF0dXJlSW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKFNpZ25hdHVyZUluZm9ybWF0aW9uKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uKSB7XG4gICAgICAgIHZhciBwYXJhbWV0ZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSB7IGxhYmVsOiBsYWJlbCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFNpZ25hdHVyZUluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNpZ25hdHVyZUluZm9ybWF0aW9uIHx8IChTaWduYXR1cmVJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIHRleHR1YWwgb2NjdXJyYW5jZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dCA9IDE7XG4gICAgLyoqXG4gICAgICogUmVhZC1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2UgcmVhZGluZyBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkID0gMjtcbiAgICAvKipcbiAgICAgKiBXcml0ZS1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2Ugd3JpdGluZyB0byBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5Xcml0ZSA9IDM7XG59KShEb2N1bWVudEhpZ2hsaWdodEtpbmQgfHwgKERvY3VtZW50SGlnaGxpZ2h0S2luZCA9IHt9KSk7XG4vKipcbiAqIERvY3VtZW50SGlnaGxpZ2h0IG5hbWVzcGFjZSB0byBwcm92aWRlIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbRG9jdW1lbnRIaWdobGlnaHRdKCNEb2N1bWVudEhpZ2hsaWdodCkgbGl0ZXJhbHMuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHQ7XG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgRG9jdW1lbnRIaWdobGlnaHQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2UgdGhlIGhpZ2hsaWdodCBhcHBsaWVzIHRvLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwga2luZCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0geyByYW5nZTogcmFuZ2UgfTtcbiAgICAgICAgaWYgKElzLm51bWJlcihraW5kKSkge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIERvY3VtZW50SGlnaGxpZ2h0LmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERvY3VtZW50SGlnaGxpZ2h0IHx8IChEb2N1bWVudEhpZ2hsaWdodCA9IHt9KSk7XG4vKipcbiAqIEEgc3ltYm9sIGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbiAoU3ltYm9sS2luZCkge1xuICAgIFN5bWJvbEtpbmQuRmlsZSA9IDE7XG4gICAgU3ltYm9sS2luZC5Nb2R1bGUgPSAyO1xuICAgIFN5bWJvbEtpbmQuTmFtZXNwYWNlID0gMztcbiAgICBTeW1ib2xLaW5kLlBhY2thZ2UgPSA0O1xuICAgIFN5bWJvbEtpbmQuQ2xhc3MgPSA1O1xuICAgIFN5bWJvbEtpbmQuTWV0aG9kID0gNjtcbiAgICBTeW1ib2xLaW5kLlByb3BlcnR5ID0gNztcbiAgICBTeW1ib2xLaW5kLkZpZWxkID0gODtcbiAgICBTeW1ib2xLaW5kLkNvbnN0cnVjdG9yID0gOTtcbiAgICBTeW1ib2xLaW5kLkVudW0gPSAxMDtcbiAgICBTeW1ib2xLaW5kLkludGVyZmFjZSA9IDExO1xuICAgIFN5bWJvbEtpbmQuRnVuY3Rpb24gPSAxMjtcbiAgICBTeW1ib2xLaW5kLlZhcmlhYmxlID0gMTM7XG4gICAgU3ltYm9sS2luZC5Db25zdGFudCA9IDE0O1xuICAgIFN5bWJvbEtpbmQuU3RyaW5nID0gMTU7XG4gICAgU3ltYm9sS2luZC5OdW1iZXIgPSAxNjtcbiAgICBTeW1ib2xLaW5kLkJvb2xlYW4gPSAxNztcbiAgICBTeW1ib2xLaW5kLkFycmF5ID0gMTg7XG4gICAgU3ltYm9sS2luZC5PYmplY3QgPSAxOTtcbiAgICBTeW1ib2xLaW5kLktleSA9IDIwO1xuICAgIFN5bWJvbEtpbmQuTnVsbCA9IDIxO1xuICAgIFN5bWJvbEtpbmQuRW51bU1lbWJlciA9IDIyO1xuICAgIFN5bWJvbEtpbmQuU3RydWN0ID0gMjM7XG4gICAgU3ltYm9sS2luZC5FdmVudCA9IDI0O1xuICAgIFN5bWJvbEtpbmQuT3BlcmF0b3IgPSAyNTtcbiAgICBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBTeW1ib2xJbmZvcm1hdGlvbjtcbihmdW5jdGlvbiAoU3ltYm9sSW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHN5bWJvbCBpbmZvcm1hdGlvbiBsaXRlcmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0ga2luZCBUaGUga2luZCBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgcmVzb3VyY2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHN5bWJvbCwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIGNvbnRhaW5lck5hbWUgVGhlIG5hbWUgb2YgdGhlIHN5bWJvbCBjb250YWluZyB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCByYW5nZSwgdXJpLCBjb250YWluZXJOYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB7IHVyaTogdXJpLCByYW5nZTogcmFuZ2UgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY29udGFpbmVyTmFtZSkge1xuICAgICAgICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFN5bWJvbEluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFN5bWJvbEluZm9ybWF0aW9uIHx8IChTeW1ib2xJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb2RlQWN0aW9uQ29udGV4dCBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtDb2RlQWN0aW9uQ29udGV4dF0oI0NvZGVBY3Rpb25Db250ZXh0KSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBDb2RlQWN0aW9uQ29udGV4dDtcbihmdW5jdGlvbiAoQ29kZUFjdGlvbkNvbnRleHQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvZGVBY3Rpb25Db250ZXh0IGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGRpYWdub3N0aWNzKSB7XG4gICAgICAgIHJldHVybiB7IGRpYWdub3N0aWNzOiBkaWFnbm9zdGljcyB9O1xuICAgIH1cbiAgICBDb2RlQWN0aW9uQ29udGV4dC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtDb2RlQWN0aW9uQ29udGV4dF0oI0NvZGVBY3Rpb25Db250ZXh0KSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKTtcbiAgICB9XG4gICAgQ29kZUFjdGlvbkNvbnRleHQuaXMgPSBpcztcbn0pKENvZGVBY3Rpb25Db250ZXh0IHx8IChDb2RlQWN0aW9uQ29udGV4dCA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb2RlTGVucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtDb2RlTGVuc10oI0NvZGVMZW5zKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBDb2RlTGVucztcbihmdW5jdGlvbiAoQ29kZUxlbnMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvZGVMZW5zIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBkYXRhKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChkYXRhKSlcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ29kZUxlbnMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbQ29kZUxlbnNdKCNDb2RlTGVucykgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvbW1hbmQpIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgICB9XG4gICAgQ29kZUxlbnMuaXMgPSBpcztcbn0pKENvZGVMZW5zIHx8IChDb2RlTGVucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBGb3JtYXR0aW5nT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIFtGb3JtYXR0aW5nT3B0aW9uc10oI0Zvcm1hdHRpbmdPcHRpb25zKSBsaXRlcmFscy5cbiAqL1xuZXhwb3J0IHZhciBGb3JtYXR0aW5nT3B0aW9ucztcbihmdW5jdGlvbiAoRm9ybWF0dGluZ09wdGlvbnMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZvcm1hdHRpbmdPcHRpb25zIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xuICAgICAgICByZXR1cm4geyB0YWJTaXplOiB0YWJTaXplLCBpbnNlcnRTcGFjZXM6IGluc2VydFNwYWNlcyB9O1xuICAgIH1cbiAgICBGb3JtYXR0aW5nT3B0aW9ucy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtGb3JtYXR0aW5nT3B0aW9uc10oI0Zvcm1hdHRpbmdPcHRpb25zKSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLm51bWJlcihjYW5kaWRhdGUudGFiU2l6ZSkgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUuaW5zZXJ0U3BhY2VzKTtcbiAgICB9XG4gICAgRm9ybWF0dGluZ09wdGlvbnMuaXMgPSBpcztcbn0pKEZvcm1hdHRpbmdPcHRpb25zIHx8IChGb3JtYXR0aW5nT3B0aW9ucyA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgbGluayBpcyBhIHJhbmdlIGluIGEgdGV4dCBkb2N1bWVudCB0aGF0IGxpbmtzIHRvIGFuIGludGVybmFsIG9yIGV4dGVybmFsIHJlc291cmNlLCBsaWtlIGFub3RoZXJcbiAqIHRleHQgZG9jdW1lbnQgb3IgYSB3ZWIgc2l0ZS5cbiAqL1xudmFyIERvY3VtZW50TGluayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudExpbmsoKSB7XG4gICAgfVxuICAgIHJldHVybiBEb2N1bWVudExpbms7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRMaW5rIH07XG4vKipcbiAqIFRoZSBEb2N1bWVudExpbmsgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBbRG9jdW1lbnRMaW5rXSgjRG9jdW1lbnRMaW5rKSBsaXRlcmFscy5cbiAqL1xuKGZ1bmN0aW9uIChEb2N1bWVudExpbmspIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IERvY3VtZW50TGluayBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgdGFyZ2V0OiB0YXJnZXQgfTtcbiAgICB9XG4gICAgRG9jdW1lbnRMaW5rLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0RvY3VtZW50TGlua10oI0RvY3VtZW50TGluaykgaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRhcmdldCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50YXJnZXQpKTtcbiAgICB9XG4gICAgRG9jdW1lbnRMaW5rLmlzID0gaXM7XG59KShEb2N1bWVudExpbmsgfHwgKERvY3VtZW50TGluayA9IHt9KSk7XG5leHBvcnQgdmFyIEVPTCA9IFsnXFxuJywgJ1xcclxcbicsICdcXHInXTtcbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50O1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IElUZXh0RG9jdW1lbnQgbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiB1cmkgYW5kIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlSWQgIFRoZSBkb2N1bWVudCdzIGxhbmd1YWdlIElkLlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0lUZXh0RG9jdW1lbnRdKCNJVGV4dERvY3VtZW50KSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmxpbmVDb3VudClcbiAgICAgICAgICAgICYmIElzLmZ1bmMoY2FuZGlkYXRlLmdldFRleHQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLnBvc2l0aW9uQXQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9mZnNldEF0KSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmlzID0gaXM7XG4gICAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgdmFyIHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgICAgIHZhciBzb3J0ZWRFZGl0cyA9IG1lcmdlU29ydChlZGl0cywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBkaWZmID0gYS5yYW5nZS5zdGFydC5saW5lIC0gYi5yYW5nZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgLSBiLnJhbmdlLnN0YXJ0LmNoYXJhY3RlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGxhc3RNb2RpZmllZE9mZnNldCA9IHRleHQubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gc29ydGVkRWRpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBlID0gc29ydGVkRWRpdHNbaV07XG4gICAgICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIHZhciBlbmRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLmVuZCk7XG4gICAgICAgICAgICBpZiAoZW5kT2Zmc2V0IDw9IGxhc3RNb2RpZmllZE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydE9mZnNldCkgKyBlLm5ld1RleHQgKyB0ZXh0LnN1YnN0cmluZyhlbmRPZmZzZXQsIHRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3ZlbGFwcGluZyBlZGl0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0TW9kaWZpZWRPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmFwcGx5RWRpdHMgPSBhcHBseUVkaXRzO1xuICAgIGZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyBzb3J0ZWRcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwID0gKGRhdGEubGVuZ3RoIC8gMikgfCAwO1xuICAgICAgICB2YXIgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgICAgIHZhciByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgICAgIG1lcmdlU29ydChsZWZ0LCBjb21wYXJlKTtcbiAgICAgICAgbWVyZ2VTb3J0KHJpZ2h0LCBjb21wYXJlKTtcbiAgICAgICAgdmFyIGxlZnRJZHggPSAwO1xuICAgICAgICB2YXIgcmlnaHRJZHggPSAwO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBjb21wYXJlKGxlZnRbbGVmdElkeF0sIHJpZ2h0W3JpZ2h0SWR4XSk7XG4gICAgICAgICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzbWFsbGVyX2VxdWFsIC0+IHRha2UgbGVmdCB0byBwcmVzZXJ2ZSBvcmRlclxuICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGdyZWF0ZXIgLT4gdGFrZSByaWdodFxuICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn0pKFRleHREb2N1bWVudCB8fCAoVGV4dERvY3VtZW50ID0ge30pKTtcbi8qKlxuICogUmVwcmVzZW50cyByZWFzb25zIHdoeSBhIHRleHQgZG9jdW1lbnQgaXMgc2F2ZWQuXG4gKi9cbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50U2F2ZVJlYXNvbjtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50U2F2ZVJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IHRyaWdnZXJlZCwgZS5nLiBieSB0aGUgdXNlciBwcmVzc2luZyBzYXZlLCBieSBzdGFydGluZyBkZWJ1Z2dpbmcsXG4gICAgICogb3IgYnkgYW4gQVBJIGNhbGwuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5NYW51YWwgPSAxO1xuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpYyBhZnRlciBhIGRlbGF5LlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFNhdmVSZWFzb24uQWZ0ZXJEZWxheSA9IDI7XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgZWRpdG9yIGxvc3QgZm9jdXMuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5Gb2N1c091dCA9IDM7XG59KShUZXh0RG9jdW1lbnRTYXZlUmVhc29uIHx8IChUZXh0RG9jdW1lbnRTYXZlUmVhc29uID0ge30pKTtcbnZhciBGdWxsVGV4dERvY3VtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwidXJpXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXJpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwibGFuZ3VhZ2VJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJ2ZXJzaW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChldmVudCwgdmVyc2lvbikge1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gZXZlbnQudGV4dDtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbnVsbDtcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLmdldExpbmVPZmZzZXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbGluZU9mZnNldHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsaW5lT2Zmc2V0cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHRleHQgPSB0aGlzLl9jb250ZW50O1xuICAgICAgICAgICAgdmFyIGlzTGluZVN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc0xpbmVTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IChjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXG4nKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQXQoaSArIDEpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTGluZVN0YXJ0ICYmIHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2godGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgfTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5wb3NpdGlvbkF0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICAgICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKDAsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb3cgaXMgdGhlIGxlYXN0IHggZm9yIHdoaWNoIHRoZSBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgLy8gb3IgYXJyYXkubGVuZ3RoIGlmIG5vIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICB2YXIgbGluZSA9IGxvdyAtIDE7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUub2Zmc2V0QXQgPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICAgICAgdmFyIG5leHRMaW5lT2Zmc2V0ID0gKHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoKSA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsaW5lQ291bnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRnVsbFRleHREb2N1bWVudDtcbn0oKSk7XG52YXIgSXM7XG4oZnVuY3Rpb24gKElzKSB7XG4gICAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgICBmdW5jdGlvbiBkZWZpbmVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBJcy5kZWZpbmVkID0gZGVmaW5lZDtcbiAgICBmdW5jdGlvbiB1bmRlZmluZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIElzLnVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBmdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIElzLmJvb2xlYW4gPSBib29sZWFuO1xuICAgIGZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuICAgIH1cbiAgICBJcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG4gICAgfVxuICAgIElzLm51bWJlciA9IG51bWJlcjtcbiAgICBmdW5jdGlvbiBmdW5jKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG4gICAgSXMuZnVuYyA9IGZ1bmM7XG4gICAgZnVuY3Rpb24gdHlwZWRBcnJheSh2YWx1ZSwgY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGNoZWNrKTtcbiAgICB9XG4gICAgSXMudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XG59KShJcyB8fCAoSXMgPSB7fSkpO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBXb3JrZXJNYW5hZ2VyIH0gZnJvbSAnLi93b3JrZXJNYW5hZ2VyLmpzJztcbmltcG9ydCAqIGFzIGxhbmd1YWdlRmVhdHVyZXMgZnJvbSAnLi9sYW5ndWFnZUZlYXR1cmVzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cE1vZGUoZGVmYXVsdHMpIHtcbiAgICB2YXIgY2xpZW50ID0gbmV3IFdvcmtlck1hbmFnZXIoZGVmYXVsdHMpO1xuICAgIHZhciB3b3JrZXIgPSBmdW5jdGlvbiAoZmlyc3QpIHtcbiAgICAgICAgdmFyIG1vcmUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1vcmVbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIuYXBwbHkoY2xpZW50LCBbZmlyc3RdLmNvbmNhdChtb3JlKSk7XG4gICAgfTtcbiAgICB2YXIgbGFuZ3VhZ2VJZCA9IGRlZmF1bHRzLmxhbmd1YWdlSWQ7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuQ29tcGxldGlvbkFkYXB0ZXIod29ya2VyKSk7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckhvdmVyUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuSG92ZXJBZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50SGlnaGxpZ2h0QWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRlZmluaXRpb25BZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5SZWZlcmVuY2VBZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudFN5bWJvbFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50U3ltYm9sQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyUmVuYW1lUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuUmVuYW1lQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29sb3JQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5Eb2N1bWVudENvbG9yQWRhcHRlcih3b3JrZXIpKTtcbiAgICBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5EaWFnbm9zdGljc0FkYXB0ZXIobGFuZ3VhZ2VJZCwgd29ya2VyLCBkZWZhdWx0cyk7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4vX2RlcHMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL21haW4uanMnO1xudmFyIFVyaSA9IG1vbmFjby5Vcmk7XG4vLyAtLS0gZGlhZ25vc3RpY3MgLS0tIC0tLVxudmFyIERpYWdub3N0aWNzQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaWFnbm9zdGljc0FkYXB0ZXIoX2xhbmd1YWdlSWQsIF93b3JrZXIsIGRlZmF1bHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBfbGFuZ3VhZ2VJZDtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB2YXIgb25Nb2RlbEFkZCA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgdmFyIG1vZGVJZCA9IG1vZGVsLmdldE1vZGVJZCgpO1xuICAgICAgICAgICAgaWYgKG1vZGVJZCAhPT0gX3RoaXMuX2xhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGFuZGxlO1xuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVyW21vZGVsLnVyaS50b1N0cmluZygpXSA9IG1vZGVsLm9uRGlkQ2hhbmdlQ29udGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmksIG1vZGVJZCk7IH0sIDUwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLl9kb1ZhbGlkYXRlKG1vZGVsLnVyaSwgbW9kZUlkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uTW9kZWxSZW1vdmVkID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICBtb25hY28uZWRpdG9yLnNldE1vZGVsTWFya2Vycyhtb2RlbCwgX3RoaXMuX2xhbmd1YWdlSWQsIFtdKTtcbiAgICAgICAgICAgIHZhciB1cmlTdHIgPSBtb2RlbC51cmkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF90aGlzLl9saXN0ZW5lclt1cmlTdHJdO1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fbGlzdGVuZXJbdXJpU3RyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY28uZWRpdG9yLm9uRGlkQ3JlYXRlTW9kZWwob25Nb2RlbEFkZCkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25XaWxsRGlzcG9zZU1vZGVsKG9uTW9kZWxSZW1vdmVkKSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2gobW9uYWNvLmVkaXRvci5vbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBvbk1vZGVsUmVtb3ZlZChldmVudC5tb2RlbCk7XG4gICAgICAgICAgICBvbk1vZGVsQWRkKGV2ZW50Lm1vZGVsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBkZWZhdWx0cy5vbkRpZENoYW5nZShmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5nZXRNb2RlSWQoKSA9PT0gX3RoaXMuX2xhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBvbk1vZGVsQWRkKG1vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2goe1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBfdGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVyW2tleV0uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1vbmFjby5lZGl0b3IuZ2V0TW9kZWxzKCkuZm9yRWFjaChvbk1vZGVsQWRkKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY3NBZGFwdGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkICYmIGQuZGlzcG9zZSgpOyB9KTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICB9O1xuICAgIERpYWdub3N0aWNzQWRhcHRlci5wcm90b3R5cGUuX2RvVmFsaWRhdGUgPSBmdW5jdGlvbiAocmVzb3VyY2UsIGxhbmd1YWdlSWQpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZG9WYWxpZGF0aW9uKHJlc291cmNlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkaWFnbm9zdGljcykge1xuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBkaWFnbm9zdGljcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHRvRGlhZ25vc3RpY3MocmVzb3VyY2UsIGQpOyB9KTtcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IG1vbmFjby5lZGl0b3IuZ2V0TW9kZWwocmVzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKG1vZGVsLmdldE1vZGVJZCgpID09PSBsYW5ndWFnZUlkKSB7XG4gICAgICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9kZWwsIGxhbmd1YWdlSWQsIG1hcmtlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5kb25lKHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEaWFnbm9zdGljc0FkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgRGlhZ25vc3RpY3NBZGFwdGVyIH07XG5mdW5jdGlvbiB0b1NldmVyaXR5KGxzU2V2ZXJpdHkpIHtcbiAgICBzd2l0Y2ggKGxzU2V2ZXJpdHkpIHtcbiAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I6IHJldHVybiBtb25hY28uTWFya2VyU2V2ZXJpdHkuRXJyb3I7XG4gICAgICAgIGNhc2UgbHMuRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc6IHJldHVybiBtb25hY28uTWFya2VyU2V2ZXJpdHkuV2FybmluZztcbiAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb246IHJldHVybiBtb25hY28uTWFya2VyU2V2ZXJpdHkuSW5mbztcbiAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuSGludDogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5IaW50O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5JbmZvO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvRGlhZ25vc3RpY3MocmVzb3VyY2UsIGRpYWcpIHtcbiAgICB2YXIgY29kZSA9IHR5cGVvZiBkaWFnLmNvZGUgPT09ICdudW1iZXInID8gU3RyaW5nKGRpYWcuY29kZSkgOiBkaWFnLmNvZGU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V2ZXJpdHk6IHRvU2V2ZXJpdHkoZGlhZy5zZXZlcml0eSksXG4gICAgICAgIHN0YXJ0TGluZU51bWJlcjogZGlhZy5yYW5nZS5zdGFydC5saW5lICsgMSxcbiAgICAgICAgc3RhcnRDb2x1bW46IGRpYWcucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMSxcbiAgICAgICAgZW5kTGluZU51bWJlcjogZGlhZy5yYW5nZS5lbmQubGluZSArIDEsXG4gICAgICAgIGVuZENvbHVtbjogZGlhZy5yYW5nZS5lbmQuY2hhcmFjdGVyICsgMSxcbiAgICAgICAgbWVzc2FnZTogZGlhZy5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICBzb3VyY2U6IGRpYWcuc291cmNlXG4gICAgfTtcbn1cbi8vIC0tLSBjb21wbGV0aW9uIC0tLS0tLVxuZnVuY3Rpb24gZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4geyBjaGFyYWN0ZXI6IHBvc2l0aW9uLmNvbHVtbiAtIDEsIGxpbmU6IHBvc2l0aW9uLmxpbmVOdW1iZXIgLSAxIH07XG59XG5mdW5jdGlvbiBmcm9tUmFuZ2UocmFuZ2UpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0OiB7IGxpbmU6IHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDEsIGNoYXJhY3RlcjogcmFuZ2Uuc3RhcnRDb2x1bW4gLSAxIH0sIGVuZDogeyBsaW5lOiByYW5nZS5lbmRMaW5lTnVtYmVyIC0gMSwgY2hhcmFjdGVyOiByYW5nZS5lbmRDb2x1bW4gLSAxIH0gfTtcbn1cbmZ1bmN0aW9uIHRvUmFuZ2UocmFuZ2UpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBuZXcgbW9uYWNvLlJhbmdlKHJhbmdlLnN0YXJ0LmxpbmUgKyAxLCByYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLCByYW5nZS5lbmQubGluZSArIDEsIHJhbmdlLmVuZC5jaGFyYWN0ZXIgKyAxKTtcbn1cbmZ1bmN0aW9uIHRvQ29tcGxldGlvbkl0ZW1LaW5kKGtpbmQpIHtcbiAgICB2YXIgbUl0ZW1LaW5kID0gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQ7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQ6IHJldHVybiBtSXRlbUtpbmQuVGV4dDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kOiByZXR1cm4gbUl0ZW1LaW5kLk1ldGhvZDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb246IHJldHVybiBtSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yOiByZXR1cm4gbUl0ZW1LaW5kLkNvbnN0cnVjdG9yO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZDogcmV0dXJuIG1JdGVtS2luZC5GaWVsZDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU6IHJldHVybiBtSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzOiByZXR1cm4gbUl0ZW1LaW5kLkNsYXNzO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2U6IHJldHVybiBtSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGU6IHJldHVybiBtSXRlbUtpbmQuTW9kdWxlO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTogcmV0dXJuIG1JdGVtS2luZC5Qcm9wZXJ0eTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuVW5pdDogcmV0dXJuIG1JdGVtS2luZC5Vbml0O1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYWx1ZTogcmV0dXJuIG1JdGVtS2luZC5WYWx1ZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuRW51bTogcmV0dXJuIG1JdGVtS2luZC5FbnVtO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkOiByZXR1cm4gbUl0ZW1LaW5kLktleXdvcmQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlNuaXBwZXQ6IHJldHVybiBtSXRlbUtpbmQuU25pcHBldDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuQ29sb3I6IHJldHVybiBtSXRlbUtpbmQuQ29sb3I7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGU6IHJldHVybiBtSXRlbUtpbmQuRmlsZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlOiByZXR1cm4gbUl0ZW1LaW5kLlJlZmVyZW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIG1JdGVtS2luZC5Qcm9wZXJ0eTtcbn1cbmZ1bmN0aW9uIHRvVGV4dEVkaXQodGV4dEVkaXQpIHtcbiAgICBpZiAoIXRleHRFZGl0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKHRleHRFZGl0LnJhbmdlKSxcbiAgICAgICAgdGV4dDogdGV4dEVkaXQubmV3VGV4dFxuICAgIH07XG59XG52YXIgQ29tcGxldGlvbkFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcGxldGlvbkFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLCBcInRyaWdnZXJDaGFyYWN0ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gWycgJywgJzonXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVDb21wbGV0aW9uSXRlbXMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgd29yZEluZm8gPSBtb2RlbC5nZXRXb3JkVW50aWxQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZG9Db21wbGV0ZShyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gaW5mby5pdGVtcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBlbnRyeS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGV4dDogZW50cnkuaW5zZXJ0VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc29ydFRleHQ6IGVudHJ5LnNvcnRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0OiBlbnRyeS5maWx0ZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBlbnRyeS5kb2N1bWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGVudHJ5LmRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAga2luZDogdG9Db21wbGV0aW9uSXRlbUtpbmQoZW50cnkua2luZCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudGV4dEVkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS50ZXh0RWRpdC5uZXdUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSBlbnRyeS5hZGRpdGlvbmFsVGV4dEVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5Lmluc2VydFRleHRGb3JtYXQgPT09IGxzLkluc2VydFRleHRGb3JtYXQuU25pcHBldCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluc2VydFRleHQgPSB7IHZhbHVlOiBpdGVtLmluc2VydFRleHQgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXNJbmNvbXBsZXRlOiBpbmZvLmlzSW5jb21wbGV0ZSxcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wbGV0aW9uQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBDb21wbGV0aW9uQWRhcHRlciB9O1xuZnVuY3Rpb24gaXNNYXJrdXBDb250ZW50KHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRoaW5nLmtpbmQgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gdG9NYXJrZG93blN0cmluZyhlbnRyeSkge1xuICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZW50cnlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzTWFya3VwQ29udGVudChlbnRyeSkpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtpbmQgPT09ICdwbGFpbnRleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlbnRyeS52YWx1ZS5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgJ1xcXFwkJicpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZW50cnkudmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6ICdgYGAnICsgZW50cnkubGFuZ3VhZ2UgKyAnXFxuJyArIGVudHJ5LnZhbHVlICsgJ1xcbmBgYFxcbicgfTtcbn1cbmZ1bmN0aW9uIHRvTWFya2VkU3RyaW5nQXJyYXkoY29udGVudHMpIHtcbiAgICBpZiAoIWNvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnRzKSkge1xuICAgICAgICByZXR1cm4gY29udGVudHMubWFwKHRvTWFya2Rvd25TdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gW3RvTWFya2Rvd25TdHJpbmcoY29udGVudHMpXTtcbn1cbi8vIC0tLSBob3ZlciAtLS0tLS1cbnZhciBIb3ZlckFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSG92ZXJBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgSG92ZXJBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlSG92ZXIgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmRvSG92ZXIocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICAgIGlmICghaW5mbykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoaW5mby5yYW5nZSksXG4gICAgICAgICAgICAgICAgY29udGVudHM6IHRvTWFya2VkU3RyaW5nQXJyYXkoaW5mby5jb250ZW50cylcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBIb3ZlckFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgSG92ZXJBZGFwdGVyIH07XG4vLyAtLS0gZG9jdW1lbnQgaGlnaGxpZ2h0cyAtLS0tLS1cbmZ1bmN0aW9uIHRvRG9jdW1lbnRIaWdobGlnaHRLaW5kKGtpbmQpIHtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgY2FzZSBscy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZDogcmV0dXJuIG1vbmFjby5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQ7XG4gICAgICAgIGNhc2UgbHMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlOiByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU7XG4gICAgICAgIGNhc2UgbHMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ6IHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dDtcbn1cbnZhciBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzID0gZnVuY3Rpb24gKG1vZGVsLCBwb3NpdGlvbiwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5maW5kRG9jdW1lbnRIaWdobGlnaHRzKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgICBpZiAoIWVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoZW50cnkucmFuZ2UpLFxuICAgICAgICAgICAgICAgICAgICBraW5kOiB0b0RvY3VtZW50SGlnaGxpZ2h0S2luZChlbnRyeS5raW5kKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50SGlnaGxpZ2h0QWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIgfTtcbi8vIC0tLSBkZWZpbml0aW9uIC0tLS0tLVxuZnVuY3Rpb24gdG9Mb2NhdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHVyaTogVXJpLnBhcnNlKGxvY2F0aW9uLnVyaSksXG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKGxvY2F0aW9uLnJhbmdlKVxuICAgIH07XG59XG52YXIgRGVmaW5pdGlvbkFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmaW5pdGlvbkFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBEZWZpbml0aW9uQWRhcHRlci5wcm90b3R5cGUucHJvdmlkZURlZmluaXRpb24gPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmZpbmREZWZpbml0aW9uKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3RvTG9jYXRpb24oZGVmaW5pdGlvbildO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmaW5pdGlvbkFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgRGVmaW5pdGlvbkFkYXB0ZXIgfTtcbi8vIC0tLSByZWZlcmVuY2VzIC0tLS0tLVxudmFyIFJlZmVyZW5jZUFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmZXJlbmNlQWRhcHRlcihfd29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgfVxuICAgIFJlZmVyZW5jZUFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVSZWZlcmVuY2VzID0gZnVuY3Rpb24gKG1vZGVsLCBwb3NpdGlvbiwgY29udGV4dCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5maW5kUmVmZXJlbmNlcyhyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgaWYgKCFlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKHRvTG9jYXRpb24pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVmZXJlbmNlQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBSZWZlcmVuY2VBZGFwdGVyIH07XG4vLyAtLS0gcmVuYW1lIC0tLS0tLVxuZnVuY3Rpb24gdG9Xb3Jrc3BhY2VFZGl0KGVkaXQpIHtcbiAgICBpZiAoIWVkaXQgfHwgIWVkaXQuY2hhbmdlcykge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgcmVzb3VyY2VFZGl0cyA9IFtdO1xuICAgIGZvciAodmFyIHVyaSBpbiBlZGl0LmNoYW5nZXMpIHtcbiAgICAgICAgdmFyIGVkaXRzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBlZGl0LmNoYW5nZXNbdXJpXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBlID0gX2FbX2ldO1xuICAgICAgICAgICAgZWRpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoZS5yYW5nZSksXG4gICAgICAgICAgICAgICAgdGV4dDogZS5uZXdUZXh0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXNvdXJjZUVkaXRzLnB1c2goeyByZXNvdXJjZTogVXJpLnBhcnNlKHVyaSksIGVkaXRzOiBlZGl0cyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWRpdHM6IHJlc291cmNlRWRpdHNcbiAgICB9O1xufVxudmFyIFJlbmFtZUFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVuYW1lQWRhcHRlcihfd29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgfVxuICAgIFJlbmFtZUFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVSZW5hbWVFZGl0cyA9IGZ1bmN0aW9uIChtb2RlbCwgcG9zaXRpb24sIG5ld05hbWUsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXIuZG9SZW5hbWUocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSwgbmV3TmFtZSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVkaXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0b1dvcmtzcGFjZUVkaXQoZWRpdCk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBSZW5hbWVBZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IFJlbmFtZUFkYXB0ZXIgfTtcbi8vIC0tLSBkb2N1bWVudCBzeW1ib2xzIC0tLS0tLVxuZnVuY3Rpb24gdG9TeW1ib2xLaW5kKGtpbmQpIHtcbiAgICB2YXIgbUtpbmQgPSBtb25hY28ubGFuZ3VhZ2VzLlN5bWJvbEtpbmQ7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5GaWxlOiByZXR1cm4gbUtpbmQuQXJyYXk7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Nb2R1bGU6IHJldHVybiBtS2luZC5Nb2R1bGU7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5OYW1lc3BhY2U6IHJldHVybiBtS2luZC5OYW1lc3BhY2U7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5QYWNrYWdlOiByZXR1cm4gbUtpbmQuUGFja2FnZTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkNsYXNzOiByZXR1cm4gbUtpbmQuQ2xhc3M7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5NZXRob2Q6IHJldHVybiBtS2luZC5NZXRob2Q7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Qcm9wZXJ0eTogcmV0dXJuIG1LaW5kLlByb3BlcnR5O1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuRmllbGQ6IHJldHVybiBtS2luZC5GaWVsZDtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkNvbnN0cnVjdG9yOiByZXR1cm4gbUtpbmQuQ29uc3RydWN0b3I7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5FbnVtOiByZXR1cm4gbUtpbmQuRW51bTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkludGVyZmFjZTogcmV0dXJuIG1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkZ1bmN0aW9uOiByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5WYXJpYWJsZTogcmV0dXJuIG1LaW5kLlZhcmlhYmxlO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuQ29uc3RhbnQ6IHJldHVybiBtS2luZC5Db25zdGFudDtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLlN0cmluZzogcmV0dXJuIG1LaW5kLlN0cmluZztcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLk51bWJlcjogcmV0dXJuIG1LaW5kLk51bWJlcjtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkJvb2xlYW46IHJldHVybiBtS2luZC5Cb29sZWFuO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuQXJyYXk6IHJldHVybiBtS2luZC5BcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIG1LaW5kLkZ1bmN0aW9uO1xufVxudmFyIERvY3VtZW50U3ltYm9sQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudFN5bWJvbEFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBEb2N1bWVudFN5bWJvbEFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudFN5bWJvbHMgPSBmdW5jdGlvbiAobW9kZWwsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHdpcmVDYW5jZWxsYXRpb25Ub2tlbih0b2tlbiwgdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHsgcmV0dXJuIHdvcmtlci5maW5kRG9jdW1lbnRTeW1ib2xzKHJlc291cmNlLnRvU3RyaW5nKCkpOyB9KS50aGVuKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IGl0ZW0uY29udGFpbmVyTmFtZSxcbiAgICAgICAgICAgICAgICBraW5kOiB0b1N5bWJvbEtpbmQoaXRlbS5raW5kKSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogdG9Mb2NhdGlvbihpdGVtLmxvY2F0aW9uKVxuICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRTeW1ib2xBZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50U3ltYm9sQWRhcHRlciB9O1xudmFyIERvY3VtZW50Q29sb3JBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50Q29sb3JBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRDb2xvckFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVEb2N1bWVudENvbG9ycyA9IGZ1bmN0aW9uIChtb2RlbCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gd2lyZUNhbmNlbGxhdGlvblRva2VuKHRva2VuLCB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikgeyByZXR1cm4gd29ya2VyLmZpbmREb2N1bWVudENvbG9ycyhyZXNvdXJjZS50b1N0cmluZygpKTsgfSkudGhlbihmdW5jdGlvbiAoaW5mb3MpIHtcbiAgICAgICAgICAgIGlmICghaW5mb3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5mb3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxuICAgICAgICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpXG4gICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIERvY3VtZW50Q29sb3JBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlQ29sb3JQcmVzZW50YXRpb25zID0gZnVuY3Rpb24gKG1vZGVsLCBpbmZvLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7IHJldHVybiB3b3JrZXIuZ2V0Q29sb3JQcmVzZW50YXRpb25zKHJlc291cmNlLnRvU3RyaW5nKCksIGluZm8uY29sb3IsIGZyb21SYW5nZShpbmZvLnJhbmdlKSk7IH0pLnRoZW4oZnVuY3Rpb24gKHByZXNlbnRhdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghcHJlc2VudGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmVzZW50YXRpb25zLm1hcChmdW5jdGlvbiAocHJlc2VudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBwcmVzZW50YXRpb24ubGFiZWwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAocHJlc2VudGF0aW9uLnRleHRFZGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGV4dEVkaXQgPSB0b1RleHRFZGl0KHByZXNlbnRhdGlvbi50ZXh0RWRpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmVzZW50YXRpb24uYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSBwcmVzZW50YXRpb24uYWRkaXRpb25hbFRleHRFZGl0cy5tYXAodG9UZXh0RWRpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBEb2N1bWVudENvbG9yQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudENvbG9yQWRhcHRlciB9O1xuLyoqXG4gKiBIb29rIGEgY2FuY2VsbGF0aW9uIHRva2VuIHRvIGEgV2luSlMgUHJvbWlzZVxuICovXG5mdW5jdGlvbiB3aXJlQ2FuY2VsbGF0aW9uVG9rZW4odG9rZW4sIHByb21pc2UpIHtcbiAgICB0b2tlbi5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZChmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9taXNlLmNhbmNlbCgpOyB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJ3VzZSBzdHJpY3QnO1xudmFyIFByb21pc2UgPSBtb25hY28uUHJvbWlzZTtcbnZhciBTVE9QX1dIRU5fSURMRV9GT1IgPSAyICogNjAgKiAxMDAwOyAvLyAybWluXG52YXIgV29ya2VyTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXb3JrZXJNYW5hZ2VyKGRlZmF1bHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NoZWNrSWZJZGxlKCk7IH0sIDMwICogMTAwMCk7XG4gICAgICAgIHRoaXMuX2xhc3RVc2VkVGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0b3BXb3JrZXIoKTsgfSk7XG4gICAgfVxuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLl9zdG9wV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZGxlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2NoZWNrSWZJZGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgICAgIGlmICh0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA+IFNUT1BfV0hFTl9JRExFX0ZPUikge1xuICAgICAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0Q2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvLmVkaXRvci5jcmVhdGVXZWJXb3JrZXIoe1xuICAgICAgICAgICAgICAgIC8vIG1vZHVsZSB0aGF0IGV4cG9ydHMgdGhlIGNyZWF0ZSgpIG1ldGhvZCBhbmQgcmV0dXJucyBhIGBDU1NXb3JrZXJgIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgbW9kdWxlSWQ6ICd2cy9sYW5ndWFnZS9jc3MvY3NzV29ya2VyJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5fZGVmYXVsdHMubGFuZ3VhZ2VJZCxcbiAgICAgICAgICAgICAgICAvLyBwYXNzZWQgaW4gdG8gdGhlIGNyZWF0ZSgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VTZXR0aW5nczogdGhpcy5fZGVmYXVsdHMuZGlhZ25vc3RpY3NPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUlkOiB0aGlzLl9kZWZhdWx0cy5sYW5ndWFnZUlkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9jbGllbnQgPSB0aGlzLl93b3JrZXIuZ2V0UHJveHkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50O1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICByZXNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NsaWVudDtcbiAgICAgICAgcmV0dXJuIHRvU2hhbGxvd0NhbmNlbFByb21pc2UodGhpcy5fZ2V0Q2xpZW50KCkudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICBfY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX3dvcmtlci53aXRoU3luY2VkUmVzb3VyY2VzKHJlc291cmNlcyk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF9jbGllbnQ7IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBXb3JrZXJNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydCB7IFdvcmtlck1hbmFnZXIgfTtcbmZ1bmN0aW9uIHRvU2hhbGxvd0NhbmNlbFByb21pc2UocCkge1xuICAgIHZhciBjb21wbGV0ZUNhbGxiYWNrO1xuICAgIHZhciBlcnJvckNhbGxiYWNrO1xuICAgIHZhciByID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKGMsIGUpIHtcbiAgICAgICAgY29tcGxldGVDYWxsYmFjayA9IGM7XG4gICAgICAgIGVycm9yQ2FsbGJhY2sgPSBlO1xuICAgIH0sIGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgcC50aGVuKGNvbXBsZXRlQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgIHJldHVybiByO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==