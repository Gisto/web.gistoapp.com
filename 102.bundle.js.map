{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/markdown.js"],"names":["module","exports","hljs","INLINE_HTML","begin","end","subLanguage","relevance","LINK","returnBegin","contains","className","excludeBegin","returnEnd","excludeEnd","BOLD","variants","ITALIC","push","CONTAINABLE","concat","name","aliases"],"mappings":"8EA4JAA,EAAOC,QApJP,SAAkBC,GAChB,MAAMC,EAAc,CAClBC,MAAO,IAAKC,IAAK,IACjBC,YAAa,MACbC,UAAW,GAgDPC,EAAO,CACXJ,MAAO,+BACPK,aAAa,EACbC,SAAU,CACR,CACEC,UAAW,SACXP,MAAO,MAAOC,IAAK,MACnBO,cAAc,EACdC,WAAW,EACXN,UAAW,GAEb,CACEI,UAAW,OACXP,MAAO,SAAUC,IAAK,MACtBO,cAAc,EAAME,YAAY,GAElC,CACEH,UAAW,SACXP,MAAO,SAAUC,IAAK,MACtBO,cAAc,EAAME,YAAY,IAGpCP,UAAW,IAEPQ,EAAO,CACXJ,UAAW,SACXD,SAAU,GACVM,SAAU,CACR,CAACZ,MAAO,OAAQC,IAAK,QACrB,CAACD,MAAO,QAASC,IAAK,WAGpBY,EAAS,CACbN,UAAW,WACXD,SAAU,GACVM,SAAU,CACR,CAAEZ,MAAO,WAAYC,IAAK,MAC1B,CAAED,MAAO,SAAUC,IAAK,IAAKE,UAAW,KAG5CQ,EAAKL,SAASQ,KAAKD,GACnBA,EAAOP,SAASQ,KAAKH,GAErB,IAAII,EAAc,CAChBhB,EACAK,GAiCF,OA9BAO,EAAKL,SAAWK,EAAKL,SAASU,OAAOD,GACrCF,EAAOP,SAAWO,EAAOP,SAASU,OAAOD,GA6BlC,CACLE,KAAM,WACNC,QAAS,CAAC,KAAM,SAAU,OAC1BZ,SAAU,CA5BG,CACbC,UAAW,UACXK,SAAU,CACR,CACEZ,MAAO,UACPC,IAAK,IACLK,SARNS,EAAcA,EAAYC,OAAOL,EAAKE,IAUlC,CACEb,MAAO,uBACPM,SAAU,CACR,CAAEN,MAAO,WACT,CAAEA,MAAO,IAAKC,IAAK,MAAOK,SAAUS,OAkBxChB,EAzGS,CACXQ,UAAW,SACXP,MAAO,mCACPC,IAAK,OACLS,YAAY,GAuGVC,EACAE,EAfe,CACjBN,UAAW,QACXP,MAAO,SACPM,SAAUS,EACVd,IAAK,KAtHM,CACXM,UAAW,OACXK,SAAU,CAER,CAAEZ,MAAO,6BACT,CAAEA,MAAO,6BAET,CAAEA,MAAO,MAAOC,IAAK,aACrB,CAAED,MAAO,MAAOC,IAAK,aACrB,CAAED,MAAO,SACT,CACEA,MAAO,kBAGPM,SAAU,CACR,CAAEN,MAAO,cAAeC,IAAK,WAE/BE,UAAW,KApBO,CACtBH,MAAO,cAAeC,IAAK,KAuIzBG,EA1GmB,CACrBJ,MAAO,eACPK,aAAa,EACbC,SAAU,CACR,CACEC,UAAW,SACXP,MAAO,KAAMC,IAAK,KAClBO,cAAc,EAAME,YAAY,GAElC,CACEH,UAAW,OACXP,MAAO,OAAQC,IAAK,IACpBO,cAAc","file":"102.bundle.js","sourcesContent":["/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: '<', end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}', end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      { begin: '(`{3,})(.|\\\\n)*?\\\\1`*[ ]*', },\n      { begin: '(~{3,})(.|\\\\n)*?\\\\1~*[ ]*', },\n      // needed to allow markdown as a sublanguage to work\n      { begin: '```', end: '```+[ ]*$' },\n      { begin: '~~~', end: '~~~+[ ]*$' },\n      { begin: '`.+?`' },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          { begin: '^( {4}|\\\\t)', end: '(\\\\n)$' }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/, end: /\\]/,\n        excludeBegin: true, excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/, end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const LINK = {\n    begin: '\\\\[.+?\\\\][\\\\(\\\\[].*?[\\\\)\\\\]]',\n    returnBegin: true,\n    contains: [\n      {\n        className: 'string',\n        begin: '\\\\[', end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true,\n        relevance: 0\n      },\n      {\n        className: 'link',\n        begin: '\\\\]\\\\(', end: '\\\\)',\n        excludeBegin: true, excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        begin: '\\\\]\\\\[', end: '\\\\]',\n        excludeBegin: true, excludeEnd: true\n      }\n    ],\n    relevance: 10\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    variants: [\n      {begin: /_{2}/, end: /_{2}/ },\n      {begin: /\\*{2}/, end: /\\*{2}/ }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    variants: [\n      { begin: /\\*(?!\\*)/, end: /\\*/ },\n      { begin: /_(?!_)/, end: /_/, relevance: 0},\n    ]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n\n  var CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD,ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n       },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          { begin: '^[=-]*$' },\n          { begin: '^', end: \"\\\\n\", contains: CONTAINABLE },\n        ]\n       }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$',\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"],"sourceRoot":""}