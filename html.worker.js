!function(e){this.webpackChunk=function(t,r){for(var i in r)e[i]=r[i];for(;t.length;)n[t.pop()]=1};var t={},n={main:1};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s="./node_modules/monaco-editor/esm/vs/language/html/html.worker.js")}({"./node_modules/monaco-editor/esm/vs/base/common/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/async.js ***!
  \****************************************************************/
/*! exports provided: isPromiseLike, toPromiseLike, asWinJsPromise, wireCancellationToken, Throttler, SimpleThrottler, Delayer, ThrottledDelayer, Barrier, ShallowCancelThenPromise, timeout, always, sequence, first, Limiter, Queue, ResourceQueue, setDisposableTimeout, TimeoutTimer, IntervalTimer, RunOnceScheduler, nfcall, ninvoke, ThrottledEmitter */function(e,t,n){"use strict";n.r(t),n.d(t,"isPromiseLike",function(){return c}),n.d(t,"toPromiseLike",function(){return l}),n.d(t,"asWinJsPromise",function(){return d}),n.d(t,"wireCancellationToken",function(){return h}),n.d(t,"Throttler",function(){return f}),n.d(t,"SimpleThrottler",function(){return p}),n.d(t,"Delayer",function(){return m}),n.d(t,"ThrottledDelayer",function(){return g}),n.d(t,"Barrier",function(){return v}),n.d(t,"ShallowCancelThenPromise",function(){return _}),n.d(t,"timeout",function(){return b}),n.d(t,"always",function(){return y}),n.d(t,"sequence",function(){return w}),n.d(t,"first",function(){return T}),n.d(t,"Limiter",function(){return C}),n.d(t,"Queue",function(){return S}),n.d(t,"ResourceQueue",function(){return E}),n.d(t,"setDisposableTimeout",function(){return k}),n.d(t,"TimeoutTimer",function(){return x}),n.d(t,"IntervalTimer",function(){return A}),n.d(t,"RunOnceScheduler",function(){return L}),n.d(t,"nfcall",function(){return N}),n.d(t,"ninvoke",function(){return O}),n.d(t,"ThrottledEmitter",function(){return P});var r=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),i=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),o=n(/*! ./cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),a=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),s=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),u=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function c(e){return e&&"function"==typeof e.then}function l(e){return c(e)?e:i.TPromise.as(e)}function d(e){var t=new o.CancellationTokenSource;return new i.TPromise(function(n,r,o){var a=e(t.token);a instanceof i.TPromise?a.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)},o):c(a)?a.then(function(e){t.dispose(),n(e)},function(e){t.dispose(),r(e)}):(t.dispose(),n(a))},function(){t.cancel()})}function h(e,t,n){var o=e.onCancellationRequested(function(){return t.cancel()});return n&&(t=t.then(void 0,function(e){if(!r.isPromiseCanceledError(e))return i.TPromise.wrapError(e)})),y(t,function(){return o.dispose()})}var f=function(){function e(){this.activePromise=null,this.queuedPromise=null,this.queuedPromiseFactory=null}return e.prototype.queue=function(e){var t=this;if(this.activePromise){if(this.queuedPromiseFactory=e,!this.queuedPromise){var n=function(){t.queuedPromise=null;var e=t.queue(t.queuedPromiseFactory);return t.queuedPromiseFactory=null,e};this.queuedPromise=new i.TPromise(function(e,r,i){t.activePromise.then(n,n,i).done(e)},function(){t.activePromise.cancel()})}return new i.TPromise(function(e,n,r){t.queuedPromise.then(e,n,r)},function(){})}return this.activePromise=e(),new i.TPromise(function(e,n,r){t.activePromise.done(function(n){t.activePromise=null,e(n)},function(e){t.activePromise=null,n(e)},r)},function(){t.activePromise.cancel()})},e}(),p=function(){function e(){this.current=i.TPromise.wrap(null)}return e.prototype.queue=function(e){return this.current=this.current.then(function(){return e()})},e}(),m=function(){function e(e){this.defaultDelay=e,this.timeout=null,this.completionPromise=null,this.onSuccess=null,this.task=null}return e.prototype.trigger=function(e,t){var n=this;return void 0===t&&(t=this.defaultDelay),this.task=e,this.cancelTimeout(),this.completionPromise||(this.completionPromise=new i.TPromise(function(e){n.onSuccess=e},function(){}).then(function(){n.completionPromise=null,n.onSuccess=null;var e=n.task;return n.task=null,e()})),this.timeout=setTimeout(function(){n.timeout=null,n.onSuccess(null)},t),this.completionPromise},e.prototype.isTriggered=function(){return null!==this.timeout},e.prototype.cancel=function(){this.cancelTimeout(),this.completionPromise&&(this.completionPromise.cancel(),this.completionPromise=null)},e.prototype.cancelTimeout=function(){null!==this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},e}(),g=function(e){function t(t){var n=e.call(this,t)||this;return n.throttler=new f,n}return u(t,e),t.prototype.trigger=function(t,n){var r=this;return e.prototype.trigger.call(this,function(){return r.throttler.queue(t)},n)},t}(m),v=function(){function e(){var e=this;this._isOpen=!1,this._promise=new i.TPromise(function(t,n,r){e._completePromise=t},function(){console.warn("You should really not try to cancel this ready promise!")})}return e.prototype.isOpen=function(){return this._isOpen},e.prototype.open=function(){this._isOpen=!0,this._completePromise(!0)},e.prototype.wait=function(){return this._promise},e}(),_=function(e){function t(t){var n,i,o,a;return n=e.call(this,function(e,t,n){i=e,o=t,a=n},function(){o(r.canceled())})||this,t.then(i,o,a),n}return u(t,e),t}(i.TPromise);function b(e){return new i.Promise(function(t){return setTimeout(t,e)})}function y(e,t){return function(e){return i.TPromise.is(e)&&"function"==typeof e.done}(e)?new i.TPromise(function(n,i,o){e.done(function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}n(e)},function(e){try{t(e)}catch(e){r.onUnexpectedError(e)}i(e)},function(e){o(e)})},function(){e.cancel()}):(e.then(function(e){return t()},function(e){return t()}),e)}function w(e){var t=[];return e=e.reverse(),i.TPromise.as(null).then(function n(r){void 0!==r&&null!==r&&t.push(r);var o=e.length?e.pop()():null;return o?o.then(n):i.TPromise.as(t)})}function T(e,t){void 0===t&&(t=function(e){return!!e}),e=e.reverse().slice();var n=function(){return 0===e.length?i.TPromise.as(null):e.pop()().then(function(e){return t(e)?i.TPromise.as(e):n()})};return n()}var C=function(){function e(e){this.maxDegreeOfParalellism=e,this.outstandingPromises=[],this.runningPromises=0,this._onFinished=new s.Emitter}return Object.defineProperty(e.prototype,"onFinished",{get:function(){return this._onFinished.event},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.runningPromises+this.outstandingPromises.length},enumerable:!0,configurable:!0}),e.prototype.queue=function(e){var t=this;return new i.TPromise(function(n,r,i){t.outstandingPromises.push({factory:e,c:n,e:r,p:i}),t.consume()})},e.prototype.consume=function(){for(var e=this;this.outstandingPromises.length&&this.runningPromises<this.maxDegreeOfParalellism;){var t=this.outstandingPromises.shift();this.runningPromises++;var n=t.factory();n.done(t.c,t.e,t.p),n.done(function(){return e.consumed()},function(){return e.consumed()})}},e.prototype.consumed=function(){this.runningPromises--,this.outstandingPromises.length>0?this.consume():this._onFinished.fire()},e.prototype.dispose=function(){this._onFinished.dispose()},e}(),S=function(e){function t(){return e.call(this,1)||this}return u(t,e),t}(C),E=function(){function e(){this.queues=Object.create(null)}return e.prototype.queueFor=function(e){var t=this,n=e.toString();if(!this.queues[n]){var r=new S;r.onFinished(function(){r.dispose(),delete t.queues[n]}),this.queues[n]=r}return this.queues[n]},e}();function k(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=setTimeout.apply(void 0,[e,t].concat(n));return{dispose:function(){clearTimeout(i)}}}var x=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return u(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearTimeout(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){var n=this;this.cancel(),this._token=setTimeout(function(){n._token=-1,e()},t)},t.prototype.setIfNotSet=function(e,t){var n=this;-1===this._token&&(this._token=setTimeout(function(){n._token=-1,e()},t))},t}(a.Disposable),A=function(e){function t(){var t=e.call(this)||this;return t._token=-1,t}return u(t,e),t.prototype.dispose=function(){this.cancel(),e.prototype.dispose.call(this)},t.prototype.cancel=function(){-1!==this._token&&(clearInterval(this._token),this._token=-1)},t.prototype.cancelAndSet=function(e,t){this.cancel(),this._token=setInterval(function(){e()},t)},t}(a.Disposable),L=function(){function e(e,t){this.timeoutToken=-1,this.runner=e,this.timeout=t,this.timeoutHandler=this.onTimeout.bind(this)}return e.prototype.dispose=function(){this.cancel(),this.runner=null},e.prototype.cancel=function(){this.isScheduled()&&(clearTimeout(this.timeoutToken),this.timeoutToken=-1)},e.prototype.schedule=function(e){void 0===e&&(e=this.timeout),this.cancel(),this.timeoutToken=setTimeout(this.timeoutHandler,e)},e.prototype.isScheduled=function(){return-1!==this.timeoutToken},e.prototype.onTimeout=function(){this.timeoutToken=-1,this.runner&&this.runner()},e}();function N(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i.TPromise(function(n,r){return e.apply(void 0,t.concat([function(e,t){return e?r(e):n(t)}]))},function(){return null})}function O(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return new i.TPromise(function(r,i){return t.call.apply(t,[e].concat(n,[function(e,t){return e?i(e):r(t)}]))},function(){return null})}var P=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.throttle=function(e){var t=this;return this.suspended=!0,y(e,function(){return t.resume()})},t.prototype.fire=function(t){return this.suspended?(this.lastEvent=t,void(this.hasLastEvent=!0)):e.prototype.fire.call(this,t)},t.prototype.resume=function(){this.suspended=!1,this.hasLastEvent&&this.fire(this.lastEvent),this.hasLastEvent=!1,this.lastEvent=void 0},t}(s.Emitter)},"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/*! exports provided: CancellationToken, CancellationTokenSource */function(e,t,n){"use strict";n.r(t),n.d(t,"CancellationToken",function(){return r}),n.d(t,"CancellationTokenSource",function(){return s});var r,i=n(/*! ./event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),o=Object.freeze(function(e,t){var n=setTimeout(e.bind(t),0);return{dispose:function(){clearTimeout(n)}}});!function(e){e.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:i.Event.None}),e.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:o})}(r||(r={}));var a=function(){function e(){this._isCancelled=!1}return e.prototype.cancel=function(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))},Object.defineProperty(e.prototype,"isCancellationRequested",{get:function(){return this._isCancelled},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"onCancellationRequested",{get:function(){return this._isCancelled?o:(this._emitter||(this._emitter=new i.Emitter),this._emitter.event)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)},e}(),s=function(){function e(){}return Object.defineProperty(e.prototype,"token",{get:function(){return this._token||(this._token=new a),this._token},enumerable:!0,configurable:!0}),e.prototype.cancel=function(){this._token?this._token instanceof a&&this._token.cancel():this._token=r.Cancelled},e.prototype.dispose=function(){this._token?this._token instanceof a&&this._token.dispose():this._token=r.None},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/*! exports provided: stringDiff, Debug, MyArray, LcsDiff */function(e,t,n){"use strict";n.r(t),n.d(t,"stringDiff",function(){return o}),n.d(t,"Debug",function(){return a}),n.d(t,"MyArray",function(){return s}),n.d(t,"LcsDiff",function(){return l});var r=n(/*! ./diffChange.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js");function i(e){return{getLength:function(){return e.length},getElementHash:function(t){return e[t]}}}function o(e,t,n){return new l(i(e),i(t)).ComputeDiff(n)}var a=function(){function e(){}return e.Assert=function(e,t){if(!e)throw new Error(t)},e}(),s=function(){function e(){}return e.Copy=function(e,t,n,r,i){for(var o=0;o<i;o++)n[r+o]=e[t+o]},e}(),u=function(){function e(){this.m_changes=[],this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE,this.m_originalCount=0,this.m_modifiedCount=0}return e.prototype.MarkNextChange=function(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new r.DiffChange(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=Number.MAX_VALUE,this.m_modifiedStart=Number.MAX_VALUE},e.prototype.AddOriginalElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++},e.prototype.AddModifiedElement=function(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++},e.prototype.getChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes},e.prototype.getReverseChanges=function(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes},e}(),c=Object.prototype.hasOwnProperty,l=function(){function e(e,t,n){void 0===n&&(n=null),this.OriginalSequence=e,this.ModifiedSequence=t,this.ContinueProcessingPredicate=n,this.m_originalIds=[],this.m_modifiedIds=[],this.m_forwardHistory=[],this.m_reverseHistory=[],this.ComputeUniqueIdentifiers()}return e.prototype.ComputeUniqueIdentifiers=function(){var e=this.OriginalSequence.getLength(),t=this.ModifiedSequence.getLength();this.m_originalIds=new Array(e),this.m_modifiedIds=new Array(t);var n,r={},i=1;for(n=0;n<e;n++){var o=this.OriginalSequence.getElementHash(n);c.call(r,o)?this.m_originalIds[n]=r[o]:(this.m_originalIds[n]=i++,r[o]=this.m_originalIds[n])}for(n=0;n<t;n++){var a=this.ModifiedSequence.getElementHash(n);c.call(r,a)?this.m_modifiedIds[n]=r[a]:(this.m_modifiedIds[n]=i++,r[a]=this.m_modifiedIds[n])}},e.prototype.ElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_modifiedIds[t]},e.prototype.OriginalElementsAreEqual=function(e,t){return this.m_originalIds[e]===this.m_originalIds[t]},e.prototype.ModifiedElementsAreEqual=function(e,t){return this.m_modifiedIds[e]===this.m_modifiedIds[t]},e.prototype.ComputeDiff=function(e){return this._ComputeDiff(0,this.OriginalSequence.getLength()-1,0,this.ModifiedSequence.getLength()-1,e)},e.prototype._ComputeDiff=function(e,t,n,r,i){var o=this.ComputeDiffRecursive(e,t,n,r,[!1]);return i?this.ShiftChanges(o):o},e.prototype.ComputeDiffRecursive=function(e,t,n,i,o){for(o[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){var s=void 0;return n<=i?(a.Assert(e===t+1,"originalStart should only be one more than originalEnd"),s=[new r.DiffChange(e,0,n,i-n+1)]):e<=t?(a.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),s=[new r.DiffChange(e,t-e+1,n,0)]):(a.Assert(e===t+1,"originalStart should only be one more than originalEnd"),a.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),s=[]),s}var u=[0],c=[0],l=this.ComputeRecursionPoint(e,t,n,i,u,c,o),d=u[0],h=c[0];if(null!==l)return l;if(!o[0]){var f=this.ComputeDiffRecursive(e,d,n,h,o),p=[];return p=o[0]?[new r.DiffChange(d+1,t-(d+1)+1,h+1,i-(h+1)+1)]:this.ComputeDiffRecursive(d+1,t,h+1,i,o),this.ConcatenateChanges(f,p)}return[new r.DiffChange(e,t-e+1,n,i-n+1)]},e.prototype.WALKTRACE=function(e,t,n,i,o,a,s,c,l,d,h,f,p,m,g,v,_,b){var y,w,T=null,C=new u,S=t,E=n,k=p[0]-v[0]-i,x=Number.MIN_VALUE,A=this.m_forwardHistory.length-1;do{(w=k+e)===S||w<E&&l[w-1]<l[w+1]?(m=(h=l[w+1])-k-i,h<x&&C.MarkNextChange(),x=h,C.AddModifiedElement(h+1,m),k=w+1-e):(m=(h=l[w-1]+1)-k-i,h<x&&C.MarkNextChange(),x=h-1,C.AddOriginalElement(h,m+1),k=w-1-e),A>=0&&(e=(l=this.m_forwardHistory[A])[0],S=1,E=l.length-1)}while(--A>=-1);if(y=C.getReverseChanges(),b[0]){var L=p[0]+1,N=v[0]+1;if(null!==y&&y.length>0){var O=y[y.length-1];L=Math.max(L,O.getOriginalEnd()),N=Math.max(N,O.getModifiedEnd())}T=[new r.DiffChange(L,f-L+1,N,g-N+1)]}else{C=new u,S=a,E=s,k=p[0]-v[0]-c,x=Number.MAX_VALUE,A=_?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{(w=k+o)===S||w<E&&d[w-1]>=d[w+1]?(m=(h=d[w+1]-1)-k-c,h>x&&C.MarkNextChange(),x=h+1,C.AddOriginalElement(h+1,m+1),k=w+1-o):(m=(h=d[w-1])-k-c,h>x&&C.MarkNextChange(),x=h,C.AddModifiedElement(h+1,m+1),k=w-1-o),A>=0&&(o=(d=this.m_reverseHistory[A])[0],S=1,E=d.length-1)}while(--A>=-1);T=C.getChanges()}return this.ConcatenateChanges(y,T)},e.prototype.ComputeRecursionPoint=function(e,t,n,i,o,a,u){var c,l,d,h=0,f=0,p=0,m=0;e--,n--,o[0]=0,a[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];var g,v,_=t-e+(i-n),b=_+1,y=new Array(b),w=new Array(b),T=i-n,C=t-e,S=e-n,E=t-i,k=(C-T)%2==0;for(y[T]=e,w[C]=t,u[0]=!1,d=1;d<=_/2+1;d++){var x=0,A=0;for(h=this.ClipDiagonalBound(T-d,d,T,b),f=this.ClipDiagonalBound(T+d,d,T,b),g=h;g<=f;g+=2){for(l=(c=g===h||g<f&&y[g-1]<y[g+1]?y[g+1]:y[g-1]+1)-(g-T)-S,v=c;c<t&&l<i&&this.ElementsAreEqual(c+1,l+1);)c++,l++;if(y[g]=c,c+l>x+A&&(x=c,A=l),!k&&Math.abs(g-C)<=d-1&&c>=w[g])return o[0]=c,a[0]=l,v<=w[g]&&d<=1448?this.WALKTRACE(T,h,f,S,C,p,m,E,y,w,c,t,o,l,i,a,k,u):null}var L=(x-e+(A-n)-d)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(x,this.OriginalSequence,L))return u[0]=!0,o[0]=x,a[0]=A,L>0&&d<=1448?this.WALKTRACE(T,h,f,S,C,p,m,E,y,w,c,t,o,l,i,a,k,u):(e++,n++,[new r.DiffChange(e,t-e+1,n,i-n+1)]);for(p=this.ClipDiagonalBound(C-d,d,C,b),m=this.ClipDiagonalBound(C+d,d,C,b),g=p;g<=m;g+=2){for(l=(c=g===p||g<m&&w[g-1]>=w[g+1]?w[g+1]-1:w[g-1])-(g-C)-E,v=c;c>e&&l>n&&this.ElementsAreEqual(c,l);)c--,l--;if(w[g]=c,k&&Math.abs(g-T)<=d&&c<=y[g])return o[0]=c,a[0]=l,v>=y[g]&&d<=1448?this.WALKTRACE(T,h,f,S,C,p,m,E,y,w,c,t,o,l,i,a,k,u):null}if(d<=1447){var N=new Array(f-h+2);N[0]=T-h+1,s.Copy(y,h,N,1,f-h+1),this.m_forwardHistory.push(N),(N=new Array(m-p+2))[0]=C-p+1,s.Copy(w,p,N,1,m-p+1),this.m_reverseHistory.push(N)}}return this.WALKTRACE(T,h,f,S,C,p,m,E,y,w,c,t,o,l,i,a,k,u)},e.prototype.ShiftChanges=function(e){var t;do{t=!1;for(var n=0;n<e.length;n++)for(var r=e[n],i=n<e.length-1?e[n+1].originalStart:this.OriginalSequence.getLength(),o=n<e.length-1?e[n+1].modifiedStart:this.ModifiedSequence.getLength(),a=r.originalLength>0,s=r.modifiedLength>0;r.originalStart+r.originalLength<i&&r.modifiedStart+r.modifiedLength<o&&(!a||this.OriginalElementsAreEqual(r.originalStart,r.originalStart+r.originalLength))&&(!s||this.ModifiedElementsAreEqual(r.modifiedStart,r.modifiedStart+r.modifiedLength));)r.originalStart++,r.modifiedStart++;var u=new Array,c=[null];for(n=0;n<e.length;n++)n<e.length-1&&this.ChangesOverlap(e[n],e[n+1],c)?(t=!0,u.push(c[0]),n++):u.push(e[n]);e=u}while(t);for(n=e.length-1;n>=0;n--){r=e[n],i=0,o=0;if(n>0){var l=e[n-1];l.originalLength>0&&(i=l.originalStart+l.originalLength),l.modifiedLength>0&&(o=l.modifiedStart+l.modifiedLength)}a=r.originalLength>0,s=r.modifiedLength>0;for(var d=0,h=this._boundaryScore(r.originalStart,r.originalLength,r.modifiedStart,r.modifiedLength),f=1;;f++){var p=r.originalStart-f,m=r.modifiedStart-f;if(p<i||m<o)break;if(a&&!this.OriginalElementsAreEqual(p,p+r.originalLength))break;if(s&&!this.ModifiedElementsAreEqual(m,m+r.modifiedLength))break;var g=this._boundaryScore(p,r.originalLength,m,r.modifiedLength);g>h&&(h=g,d=f)}r.originalStart-=d,r.modifiedStart-=d}return e},e.prototype._OriginalIsBoundary=function(e){return e<=0||e>=this.OriginalSequence.getLength()-1||/^\s*$/.test(this.OriginalSequence.getElementHash(e))},e.prototype._OriginalRegionIsBoundary=function(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1},e.prototype._ModifiedIsBoundary=function(e){return e<=0||e>=this.ModifiedSequence.getLength()-1||/^\s*$/.test(this.ModifiedSequence.getElementHash(e))},e.prototype._ModifiedRegionIsBoundary=function(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){var n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1},e.prototype._boundaryScore=function(e,t,n,r){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,r)?1:0)},e.prototype.ConcatenateChanges=function(e,t){var n=[],r=null;return 0===e.length||0===t.length?t.length>0?t:e:this.ChangesOverlap(e[e.length-1],t[0],n)?(r=new Array(e.length+t.length-1),s.Copy(e,0,r,0,e.length-1),r[e.length-1]=n[0],s.Copy(t,1,r,e.length,t.length-1),r):(r=new Array(e.length+t.length),s.Copy(e,0,r,0,e.length),s.Copy(t,0,r,e.length,t.length),r)},e.prototype.ChangesOverlap=function(e,t,n){if(a.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),a.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){var i=e.originalStart,o=e.originalLength,s=e.modifiedStart,u=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(o=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(u=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new r.DiffChange(i,o,s,u),!0}return n[0]=null,!1},e.prototype.ClipDiagonalBound=function(e,t,n,r){if(e>=0&&e<r)return e;var i=t%2==0;return e<0?i===(n%2==0)?0:1:i===((r-n-1)%2==0)?r-1:r-2},e}()},"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/*! exports provided: DiffChange */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffChange",function(){return r});var r=function(){function e(e,t,n,r){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=r}return e.prototype.getOriginalEnd=function(){return this.originalStart+this.originalLength},e.prototype.getModifiedEnd=function(){return this.modifiedStart+this.modifiedLength},e}()},"./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/*! exports provided: ErrorHandler, errorHandler, setUnexpectedErrorHandler, onUnexpectedError, onUnexpectedExternalError, transformErrorForSerialization, isPromiseCanceledError, canceled, illegalArgument, illegalState, readonly, disposed, isErrorWithActions, create, getErrorMessage */function(e,t,n){"use strict";n.r(t),n.d(t,"ErrorHandler",function(){return i}),n.d(t,"errorHandler",function(){return o}),n.d(t,"setUnexpectedErrorHandler",function(){return a}),n.d(t,"onUnexpectedError",function(){return s}),n.d(t,"onUnexpectedExternalError",function(){return u}),n.d(t,"transformErrorForSerialization",function(){return c}),n.d(t,"isPromiseCanceledError",function(){return d}),n.d(t,"canceled",function(){return h}),n.d(t,"illegalArgument",function(){return f}),n.d(t,"illegalState",function(){return p}),n.d(t,"readonly",function(){return m}),n.d(t,"disposed",function(){return g}),n.d(t,"isErrorWithActions",function(){return v}),n.d(t,"create",function(){return _}),n.d(t,"getErrorMessage",function(){return b});var r={};n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js").TPromise.addEventListener("error",function(e){var t=e.detail,n=t.id;t.parent?t.handler&&r&&delete r[n]:(r[n]=t,1===Object.keys(r).length&&setTimeout(function(){var e=r;r={},Object.keys(e).forEach(function(t){var n=e[t];n.exception?s(n.exception):n.error&&s(n.error),console.log("WARNING: Promise with no error callback:"+n.id),console.log(n),n.exception&&console.log(n.exception.stack)})},0))});var i=function(){function e(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(function(){if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e},0)}}return e.prototype.addListener=function(e){var t=this;return this.listeners.push(e),function(){t._removeListener(e)}},e.prototype.emit=function(e){this.listeners.forEach(function(t){t(e)})},e.prototype._removeListener=function(e){this.listeners.splice(this.listeners.indexOf(e),1)},e.prototype.setUnexpectedErrorHandler=function(e){this.unexpectedErrorHandler=e},e.prototype.getUnexpectedErrorHandler=function(){return this.unexpectedErrorHandler},e.prototype.onUnexpectedError=function(e){this.unexpectedErrorHandler(e),this.emit(e)},e.prototype.onUnexpectedExternalError=function(e){this.unexpectedErrorHandler(e)},e}(),o=new i;function a(e){o.setUnexpectedErrorHandler(e)}function s(e){d(e)||o.onUnexpectedError(e)}function u(e){d(e)||o.onUnexpectedExternalError(e)}function c(e){return e instanceof Error?{$isError:!0,name:e.name,message:e.message,stack:e.stacktrace||e.stack}:e}var l="Canceled";function d(e){return e instanceof Error&&e.name===l&&e.message===l}function h(){var e=new Error(l);return e.name=e.message,e}function f(e){return e?new Error("Illegal argument: "+e):new Error("Illegal argument")}function p(e){return e?new Error("Illegal state: "+e):new Error("Illegal state")}function m(e){return e?new Error("readonly property '"+e+" cannot be changed'"):new Error("readonly property cannot be changed")}function g(e){var t=new Error(e+" has been disposed");return t.name="DISPOSED",t}function v(e){return e instanceof Error&&Array.isArray(e.actions)}function _(e,t){void 0===t&&(t=Object.create(null));var n=new Error(e);return t.actions&&(n.actions=t.actions),n}function b(e){return e?e.message?e.message:e.stack?e.stack.split("\n")[0]:String(e):"Error"}},"./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/*! exports provided: Event, Emitter, EventMultiplexer, fromCallback, fromPromise, toPromise, once, anyEvent, debounceEvent, EventBufferer, mapEvent, forEach, filterEvent, chain, stopwatch, buffer, echo, Relay, fromNodeEventEmitter, latch */function(e,t,n){"use strict";n.r(t),n.d(t,"Event",function(){return r}),n.d(t,"Emitter",function(){return c}),n.d(t,"EventMultiplexer",function(){return l}),n.d(t,"fromCallback",function(){return d}),n.d(t,"fromPromise",function(){return h}),n.d(t,"toPromise",function(){return f}),n.d(t,"once",function(){return p}),n.d(t,"anyEvent",function(){return m}),n.d(t,"debounceEvent",function(){return g}),n.d(t,"EventBufferer",function(){return v}),n.d(t,"mapEvent",function(){return _}),n.d(t,"forEach",function(){return b}),n.d(t,"filterEvent",function(){return y}),n.d(t,"chain",function(){return T}),n.d(t,"stopwatch",function(){return C}),n.d(t,"buffer",function(){return S}),n.d(t,"echo",function(){return E}),n.d(t,"Relay",function(){return k}),n.d(t,"fromNodeEventEmitter",function(){return x}),n.d(t,"latch",function(){return A});var r,i=n(/*! ./lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),o=n(/*! ./winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),a=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),s=n(/*! ./errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),u=n(/*! ./linkedList.js */"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js");!function(e){var t={dispose:function(){}};e.None=function(){return t}}(r||(r={}));var c=function(){function e(e){this._options=e}return Object.defineProperty(e.prototype,"event",{get:function(){var t=this;return this._event||(this._event=function(n,r,i){t._listeners||(t._listeners=new u.LinkedList);var o=t._listeners.isEmpty();o&&t._options&&t._options.onFirstListenerAdd&&t._options.onFirstListenerAdd(t);var a,s=t._listeners.push(r?[n,r]:n);return o&&t._options&&t._options.onFirstListenerDidAdd&&t._options.onFirstListenerDidAdd(t),t._options&&t._options.onListenerDidAdd&&t._options.onListenerDidAdd(t,n,r),a={dispose:function(){a.dispose=e._noop,t._disposed||(s(),t._options&&t._options.onLastListenerRemove&&t._listeners.isEmpty()&&t._options.onLastListenerRemove(t))}},Array.isArray(i)&&i.push(a),a}),this._event},enumerable:!0,configurable:!0}),e.prototype.fire=function(e){if(this._listeners){this._deliveryQueue||(this._deliveryQueue=[]);for(var t=this._listeners.iterator(),n=t.next();!n.done;n=t.next())this._deliveryQueue.push([n.value,e]);for(;this._deliveryQueue.length>0;){var r=this._deliveryQueue.shift(),i=r[0],o=r[1];try{"function"==typeof i?i.call(void 0,o):i[0].call(i[1],o)}catch(n){Object(s.onUnexpectedError)(n)}}}},e.prototype.dispose=function(){this._listeners&&(this._listeners=void 0),this._deliveryQueue&&(this._deliveryQueue.length=0),this._disposed=!0},e._noop=function(){},e}(),l=function(){function e(){var e=this;this.hasListeners=!1,this.events=[],this.emitter=new c({onFirstListenerAdd:function(){return e.onFirstListenerAdd()},onLastListenerRemove:function(){return e.onLastListenerRemove()}})}return Object.defineProperty(e.prototype,"event",{get:function(){return this.emitter.event},enumerable:!0,configurable:!0}),e.prototype.add=function(e){var t=this,n={event:e,listener:null};this.events.push(n),this.hasListeners&&this.hook(n);return Object(i.toDisposable)(Object(a.once)(function(){t.hasListeners&&t.unhook(n);var e=t.events.indexOf(n);t.events.splice(e,1)}))},e.prototype.onFirstListenerAdd=function(){var e=this;this.hasListeners=!0,this.events.forEach(function(t){return e.hook(t)})},e.prototype.onLastListenerRemove=function(){var e=this;this.hasListeners=!1,this.events.forEach(function(t){return e.unhook(t)})},e.prototype.hook=function(e){var t=this;e.listener=e.event(function(e){return t.emitter.fire(e)})},e.prototype.unhook=function(e){e.listener.dispose(),e.listener=null},e.prototype.dispose=function(){this.emitter.dispose()},e}();function d(e){var t,n=new c({onFirstListenerAdd:function(){return t=e(function(e){return n.fire(e)})},onLastListenerRemove:function(){return t.dispose()}});return n.event}function h(e){var t=new c,n=!1;return e.then(null,function(){return null}).then(function(){n?t.fire():setTimeout(function(){return t.fire()},0)}),n=!0,t.event}function f(e){return new o.TPromise(function(t){var n=e(function(e){n.dispose(),t(e)})})}function p(e){return function(t,n,r){void 0===n&&(n=null);var i=e(function(e){return i.dispose(),t.call(n,e)},null,r);return i}}function m(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t,n,r){return void 0===n&&(n=null),Object(i.combinedDisposable)(e.map(function(e){return e(function(e){return t.call(n,e)},null,r)}))}}function g(e,t,n,r){var i;void 0===n&&(n=100),void 0===r&&(r=!1);var o=void 0,a=void 0,s=0,u=new c({onFirstListenerAdd:function(){i=e(function(e){s++,o=t(o,e),r&&!a&&u.fire(o),clearTimeout(a),a=setTimeout(function(){var e=o;o=void 0,a=void 0,(!r||s>1)&&u.fire(e),s=0},n)})},onLastListenerRemove:function(){i.dispose()}});return u.event}var v=function(){function e(){this.buffers=[]}return e.prototype.wrapEvent=function(e){var t=this;return function(n,r,i){return e(function(e){var i=t.buffers[t.buffers.length-1];i?i.push(function(){return n.call(r,e)}):n.call(r,e)},void 0,i)}},e.prototype.bufferEvents=function(e){var t=[];this.buffers.push(t),e(),this.buffers.pop(),t.forEach(function(e){return e()})},e}();function _(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){return n.call(r,t(e))},null,i)}}function b(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){t(e),n.call(r,e)},null,i)}}function y(e,t){return function(n,r,i){return void 0===r&&(r=null),e(function(e){return t(e)&&n.call(r,e)},null,i)}}var w=function(){function e(e){this._event=e}return Object.defineProperty(e.prototype,"event",{get:function(){return this._event},enumerable:!0,configurable:!0}),e.prototype.map=function(t){return new e(_(this._event,t))},e.prototype.forEach=function(t){return new e(b(this._event,t))},e.prototype.filter=function(t){return new e(y(this._event,t))},e.prototype.latch=function(){return new e(A(this._event))},e.prototype.on=function(e,t,n){return this._event(e,t,n)},e}();function T(e){return new w(e)}function C(e){var t=(new Date).getTime();return _(p(e),function(e){return(new Date).getTime()-t})}function S(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice();var r=e(function(e){n?n.push(e):o.fire(e)}),i=function(){n.forEach(function(e){return o.fire(e)}),n=null},o=new c({onFirstListenerAdd:function(){r||(r=e(function(e){return o.fire(e)}))},onFirstListenerDidAdd:function(){n&&(t?setTimeout(i):i())},onLastListenerRemove:function(){r.dispose(),r=null}});return o.event}function E(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=[]),n=n.slice(),e(function(e){n.push(e),i.fire(e)});var r=function(e,t){return n.forEach(function(n){return e.call(t,n)})},i=new c({onListenerDidAdd:function(e,n,i){t?setTimeout(function(){return r(n,i)}):r(n,i)}});return i.event}var k=function(){function e(){this.emitter=new c,this.event=this.emitter.event,this.disposable=i.empty}return Object.defineProperty(e.prototype,"input",{set:function(e){this.disposable.dispose(),this.disposable=e(this.emitter.fire,this.emitter)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.disposable.dispose(),this.emitter.dispose()},e}();function x(e,t,n){void 0===n&&(n=function(e){return e});var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.fire(n.apply(void 0,e))},i=new c({onFirstListenerAdd:function(){return e.on(t,r)},onLastListenerRemove:function(){return e.removeListener(t,r)}});return i.event}function A(e){var t,n=!0;return y(e,function(e){var r=n||e!==t;return n=!1,t=e,r})}},"./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/*! exports provided: once */function(e,t,n){"use strict";function r(e){var t,n=this,r=!1;return function(){return r?t:(r=!0,t=e.apply(n,arguments))}}n.r(t),n.d(t,"once",function(){return r})},"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/*! exports provided: KeyCodeUtils, KeyChord, createKeybinding, createSimpleKeybinding, SimpleKeybinding, ChordKeybinding, ResolvedKeybindingPart, ResolvedKeybinding */function(e,t,n){"use strict";n.r(t),n.d(t,"KeyCodeUtils",function(){return r}),n.d(t,"KeyChord",function(){return u}),n.d(t,"createKeybinding",function(){return c}),n.d(t,"createSimpleKeybinding",function(){return l}),n.d(t,"SimpleKeybinding",function(){return d}),n.d(t,"ChordKeybinding",function(){return h}),n.d(t,"ResolvedKeybindingPart",function(){return f}),n.d(t,"ResolvedKeybinding",function(){return p});var r,i=function(){function e(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}return e.prototype.define=function(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e},e.prototype.keyCodeToStr=function(e){return this._keyCodeToStr[e]},e.prototype.strToKeyCode=function(e){return this._strToKeyCode[e.toLowerCase()]||0},e}(),o=new i,a=new i,s=new i;function u(e,t){return(e|(65535&t)<<16>>>0)>>>0}function c(e,t){if(0===e)return null;var n=(65535&e)>>>0,r=(4294901760&e)>>>16;return 0!==r?new h(l(n,t),l(r,t)):l(n,t)}function l(e,t){var n=!!(2048&e),r=!!(256&e);return new d(2===t?r:n,!!(1024&e),!!(512&e),2===t?n:r,255&e)}!function(){function e(e,t,n,r){void 0===n&&(n=t),void 0===r&&(r=n),o.define(e,t),a.define(e,n),s.define(e,r)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return o.keyCodeToStr(e)},e.fromString=function(e){return o.strToKeyCode(e)},e.toUserSettingsUS=function(e){return a.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return s.keyCodeToStr(e)},e.fromUserSettings=function(e){return a.strToKeyCode(e)||s.strToKeyCode(e)}}(r||(r={}));var d=function(){function e(e,t,n,r,i){this.type=1,this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyCode=i}return e.prototype.equals=function(e){return 1===e.type&&(this.ctrlKey===e.ctrlKey&&this.shiftKey===e.shiftKey&&this.altKey===e.altKey&&this.metaKey===e.metaKey&&this.keyCode===e.keyCode)},e.prototype.getHashCode=function(){return""+(this.ctrlKey?"1":"0")+(this.shiftKey?"1":"0")+(this.altKey?"1":"0")+(this.metaKey?"1":"0")+this.keyCode},e.prototype.isModifierKey=function(){return 0===this.keyCode||5===this.keyCode||57===this.keyCode||6===this.keyCode||4===this.keyCode},e.prototype.isDuplicateModifierCase=function(){return this.ctrlKey&&5===this.keyCode||this.shiftKey&&4===this.keyCode||this.altKey&&6===this.keyCode||this.metaKey&&57===this.keyCode},e}(),h=function(){function e(e,t){this.type=2,this.firstPart=e,this.chordPart=t}return e.prototype.getHashCode=function(){return this.firstPart.getHashCode()+";"+this.chordPart.getHashCode()},e}(),f=function(){return function(e,t,n,r,i,o){this.ctrlKey=e,this.shiftKey=t,this.altKey=n,this.metaKey=r,this.keyLabel=i,this.keyAriaLabel=o}}(),p=function(){return function(){}}()},"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/*! exports provided: empty, isDisposable, dispose, combinedDisposable, toDisposable, Disposable, ReferenceCollection, ImmortalReference */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return i}),n.d(t,"isDisposable",function(){return o}),n.d(t,"dispose",function(){return a}),n.d(t,"combinedDisposable",function(){return s}),n.d(t,"toDisposable",function(){return u}),n.d(t,"Disposable",function(){return c}),n.d(t,"ReferenceCollection",function(){return l}),n.d(t,"ImmortalReference",function(){return d});var r=n(/*! ./functional.js */"./node_modules/monaco-editor/esm/vs/base/common/functional.js"),i=Object.freeze({dispose:function(){}});function o(e){return"function"==typeof e.dispose&&0===e.dispose.length}function a(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Array.isArray(e)?(e.forEach(function(e){return e&&e.dispose()}),[]):0===t.length?e?(e.dispose(),e):void 0:(a(e),a(t),[])}function s(e){return{dispose:function(){return a(e)}}}function u(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return{dispose:function(){for(var t=0,n=e;t<n.length;t++){(0,n[t])()}}}}var c=function(){function e(){this._toDispose=[]}return e.prototype.dispose=function(){this._toDispose=a(this._toDispose)},e.prototype._register=function(e){return this._toDispose.push(e),e},e}(),l=function(){function e(){this.references=Object.create(null)}return e.prototype.acquire=function(e){var t=this,n=this.references[e];n||(n=this.references[e]={counter:0,object:this.createReferencedObject(e)});var i=n.object,o=Object(r.once)(function(){0==--n.counter&&(t.destroyReferencedObject(n.object),delete t.references[e])});return n.counter++,{object:i,dispose:o}},e}(),d=function(){function e(e){this.object=e}return e.prototype.dispose=function(){},e}()},"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/*! exports provided: LinkedList */function(e,t,n){"use strict";n.r(t),n.d(t,"LinkedList",function(){return i});var r=function(){return function(e){this.element=e}}(),i=function(){function e(){}return e.prototype.isEmpty=function(){return!this._first},e.prototype.clear=function(){this._first=void 0,this._last=void 0},e.prototype.unshift=function(e){return this.insert(e,!1)},e.prototype.push=function(e){return this.insert(e,!0)},e.prototype.insert=function(e,t){var n=this,i=new r(e);if(this._first)if(t){var o=this._last;this._last=i,i.prev=o,o.next=i}else{var a=this._first;this._first=i,i.next=a,a.prev=i}else this._first=i,this._last=i;return function(){for(var e=n._first;e instanceof r;e=e.next)if(e===i){if(e.prev&&e.next){var t=e.prev;t.next=e.next,e.next.prev=t}else e.prev||e.next?e.next?e.prev||(n._first=n._first.next,n._first.prev=void 0):(n._last=n._last.prev,n._last.next=void 0):(n._first=void 0,n._last=void 0);break}}},e.prototype.iterator=function(){var e={done:void 0,value:void 0},t=this._first;return{next:function(){return t?(e.done=!1,e.value=t.element,t=t.next):(e.done=!0,e.value=void 0),e}}},e.prototype.toArray=function(){for(var e=[],t=this._first;t instanceof r;t=t.next)e.push(t.element);return e},e}()},"./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/*! exports provided: values, keys, getOrSet, StringIterator, PathIterator, TernarySearchTree, ResourceMap, Touch, LinkedMap, LRUCache */function(e,t,n){"use strict";n.r(t),n.d(t,"values",function(){return o}),n.d(t,"keys",function(){return a}),n.d(t,"getOrSet",function(){return s}),n.d(t,"StringIterator",function(){return c}),n.d(t,"PathIterator",function(){return l}),n.d(t,"TernarySearchTree",function(){return h}),n.d(t,"ResourceMap",function(){return f}),n.d(t,"Touch",function(){return u}),n.d(t,"LinkedMap",function(){return p}),n.d(t,"LRUCache",function(){return m});var r=n(/*! ./uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function o(e){var t=[];return e.forEach(function(e){return t.push(e)}),t}function a(e){var t=[];return e.forEach(function(e,n){return t.push(n)}),t}function s(e,t,n){var r=e.get(t);return void 0===r&&(r=n,e.set(t,r)),r}var u,c=function(){function e(){this._value="",this._pos=0}return e.prototype.reset=function(e){return this._value=e,this._pos=0,this},e.prototype.next=function(){return this._pos+=1,this},e.prototype.join=function(e){return e.join("")},e.prototype.hasNext=function(){return this._pos<this._value.length-1},e.prototype.cmp=function(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)},e.prototype.value=function(){return this._value[this._pos]},e}(),l=function(){function e(){}return e.prototype.reset=function(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()},e.prototype.hasNext=function(){return this._to<this._value.length},e.prototype.join=function(e){return e.join("/")},e.prototype.next=function(){this._from=this._to;for(var t=!0;this._to<this._value.length;this._to++){var n=this._value.charCodeAt(this._to);if(n===e._fwd||n===e._bwd){if(!t)break;this._from++}else t=!1}return this},e.prototype.cmp=function(e){for(var t=0,n=e.length,r=this._from;t<n&&r<this._to;){var i=e.charCodeAt(t)-this._value.charCodeAt(r);if(0!==i)return i;t+=1,r+=1}return n===this._to-this._from?0:t<n?-1:1},e.prototype.value=function(){return this._value.substring(this._from,this._to)},e._fwd="/".charCodeAt(0),e._bwd="\\".charCodeAt(0),e}(),d=function(){function e(){}return e.prototype.isEmpty=function(){return!(this.left||this.mid||this.right||this.element)},e}(),h=function(){function e(e){this._iter=e}return e.forPaths=function(){return new e(new l)},e.forStrings=function(){return new e(new c)},e.prototype.clear=function(){this._root=void 0},e.prototype.set=function(e,t){var n,r=this._iter.reset(e);for(this._root||(this._root=new d,this._root.str=r.value()),n=this._root;;){var i=r.cmp(n.str);if(i>0)n.left||(n.left=new d,n.left.str=r.value()),n=n.left;else if(i<0)n.right||(n.right=new d,n.right.str=r.value()),n=n.right;else{if(!r.hasNext())break;r.next(),n.mid||(n.mid=new d,n.mid.str=r.value()),n=n.mid}}var o=n.element;return n.element=t,o},e.prototype.get=function(e){for(var t=this._iter.reset(e),n=this._root;n;){var r=t.cmp(n.str);if(r>0)n=n.left;else if(r<0)n=n.right;else{if(!t.hasNext())break;t.next(),n=n.mid}}return n?n.element:void 0},e.prototype.delete=function(e){for(var t=this._iter.reset(e),n=[],r=this._root;r;){var i=t.cmp(r.str);if(i>0)n.push([1,r]),r=r.left;else if(i<0)n.push([-1,r]),r=r.right;else{if(!t.hasNext()){for(r.element=void 0;n.length>0&&r.isEmpty();){var o=n.pop(),a=o[0],s=o[1];switch(a){case 1:s.left=void 0;break;case 0:s.mid=void 0;break;case-1:s.right=void 0}r=s}break}t.next(),n.push([0,r]),r=r.mid}}},e.prototype.findSubstr=function(e){for(var t,n=this._iter.reset(e),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext())break;n.next(),t=r.element||t,r=r.mid}}return r&&r.element||t},e.prototype.findSuperstr=function(t){for(var n=this._iter.reset(t),r=this._root;r;){var i=n.cmp(r.str);if(i>0)r=r.left;else if(i<0)r=r.right;else{if(!n.hasNext()){if(!r.mid)return;var o=new e(this._iter);return o._root=r.mid,o}n.next(),r=r.mid}}},e.prototype.forEach=function(e){this._forEach(this._root,[],e)},e.prototype._forEach=function(e,t,n){e&&(this._forEach(e.left,t,n),t.push(e.str),e.element&&n(e.element,this._iter.join(t)),this._forEach(e.mid,t,n),t.pop(),this._forEach(e.right,t,n))},e}(),f=function(){function e(){this.map=new Map,this.ignoreCase=!1}return e.prototype.set=function(e,t){this.map.set(this.toKey(e),t)},e.prototype.get=function(e){return this.map.get(this.toKey(e))},e.prototype.has=function(e){return this.map.has(this.toKey(e))},Object.defineProperty(e.prototype,"size",{get:function(){return this.map.size},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this.map.clear()},e.prototype.delete=function(e){return this.map.delete(this.toKey(e))},e.prototype.forEach=function(e){this.map.forEach(e)},e.prototype.values=function(){return o(this.map)},e.prototype.toKey=function(e){var t=e.toString();return this.ignoreCase&&(t=t.toLowerCase()),t},e.prototype.keys=function(){return a(this.map).map(r.default.parse)},e}();!function(e){e[e.None=0]="None",e[e.AsOld=1]="AsOld",e[e.AsNew=2]="AsNew"}(u||(u={}));var p=function(){function e(){this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0}return e.prototype.clear=function(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0},e.prototype.isEmpty=function(){return!this._head&&!this._tail},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.get=function(e,t){void 0===t&&(t=u.None);var n=this._map.get(e);if(n)return t!==u.None&&this.touch(n,t),n.value},e.prototype.set=function(e,t,n){void 0===n&&(n=u.None);var r=this._map.get(e);if(r)r.value=t,n!==u.None&&this.touch(r,n);else{switch(r={key:e,value:t,next:void 0,previous:void 0},n){case u.None:this.addItemLast(r);break;case u.AsOld:this.addItemFirst(r);break;case u.AsNew:default:this.addItemLast(r)}this._map.set(e,r),this._size++}},e.prototype.delete=function(e){return!!this.remove(e)},e.prototype.remove=function(e){var t=this._map.get(e);if(t)return this._map.delete(e),this.removeItem(t),this._size--,t.value},e.prototype.shift=function(){if(this._head||this._tail){if(!this._head||!this._tail)throw new Error("Invalid list");var e=this._head;return this._map.delete(e.key),this.removeItem(e),this._size--,e.value}},e.prototype.forEach=function(e,t){for(var n=this._head;n;)t?e.bind(t)(n.value,n.key,this):e(n.value,n.key,this),n=n.next},e.prototype.values=function(){for(var e=[],t=this._head;t;)e.push(t.value),t=t.next;return e},e.prototype.keys=function(){for(var e=[],t=this._head;t;)e.push(t.key),t=t.next;return e},e.prototype.trimOld=function(e){if(!(e>=this.size))if(0!==e){for(var t=this._head,n=this.size;t&&n>e;)this._map.delete(t.key),t=t.next,n--;this._head=t,this._size=n,t.previous=void 0}else this.clear()},e.prototype.addItemFirst=function(e){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");e.next=this._head,this._head.previous=e}else this._tail=e;this._head=e},e.prototype.addItemLast=function(e){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");e.previous=this._tail,this._tail.next=e}else this._head=e;this._tail=e},e.prototype.removeItem=function(e){if(e===this._head&&e===this._tail)this._head=void 0,this._tail=void 0;else if(e===this._head)this._head=e.next;else if(e===this._tail)this._tail=e.previous;else{var t=e.next,n=e.previous;if(!t||!n)throw new Error("Invalid list");t.previous=n,n.next=t}},e.prototype.touch=function(e,t){if(!this._head||!this._tail)throw new Error("Invalid list");if(t===u.AsOld||t===u.AsNew)if(t===u.AsOld){if(e===this._head)return;var n=e.next,r=e.previous;e===this._tail?(r.next=void 0,this._tail=r):(n.previous=r,r.next=n),e.previous=void 0,e.next=this._head,this._head.previous=e,this._head=e}else if(t===u.AsNew){if(e===this._tail)return;n=e.next,r=e.previous;e===this._head?(n.previous=void 0,this._head=n):(n.previous=r,r.next=n),e.next=void 0,e.previous=this._tail,this._tail.next=e,this._tail=e}},e.prototype.toJSON=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),e},e.prototype.fromJSON=function(e){this.clear();for(var t=0,n=e;t<n.length;t++){var r=n[t],i=r[0],o=r[1];this.set(i,o)}},e}(),m=function(e){function t(t,n){void 0===n&&(n=1);var r=e.call(this)||this;return r._limit=t,r._ratio=Math.min(Math.max(0,n),1),r}return i(t,e),Object.defineProperty(t.prototype,"limit",{get:function(){return this._limit},set:function(e){this._limit=e,this.checkTrim()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ratio",{get:function(){return this._ratio},set:function(e){this._ratio=Math.min(Math.max(0,e),1),this.checkTrim()},enumerable:!0,configurable:!0}),t.prototype.get=function(t){return e.prototype.get.call(this,t,u.AsNew)},t.prototype.peek=function(t){return e.prototype.get.call(this,t,u.None)},t.prototype.set=function(t,n){e.prototype.set.call(this,t,n,u.AsNew),this.checkTrim()},t.prototype.checkTrim=function(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))},t}(p)},"./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/*! exports provided: LANGUAGE_DEFAULT, Platform, isWindows, isMacintosh, isLinux, isNative, isWeb, platform, isRootUser, language, locale, translationsConfigFile, globals, setImmediate, OS */function(e,t,n){"use strict";n.r(t),function(e,r){n.d(t,"LANGUAGE_DEFAULT",function(){return f}),n.d(t,"Platform",function(){return i}),n.d(t,"isWindows",function(){return b}),n.d(t,"isMacintosh",function(){return y}),n.d(t,"isLinux",function(){return w}),n.d(t,"isNative",function(){return T}),n.d(t,"isWeb",function(){return C}),n.d(t,"platform",function(){return S}),n.d(t,"isRootUser",function(){return E}),n.d(t,"language",function(){return k}),n.d(t,"locale",function(){return x}),n.d(t,"translationsConfigFile",function(){return A}),n.d(t,"globals",function(){return L}),n.d(t,"setImmediate",function(){return O}),n.d(t,"OS",function(){return P});var i,o=!1,a=!1,s=!1,u=!1,c=!1,l=void 0,d=void 0,h=void 0,f="en";if("object"==typeof e&&"function"==typeof e.nextTick&&"string"==typeof e.platform){o="win32"===e.platform,a="darwin"===e.platform,s="linux"===e.platform;var p=e.env.VSCODE_NLS_CONFIG;if(p)try{var m=JSON.parse(p),g=m.availableLanguages["*"];l=m.locale,d=g||f,h=m._translationsConfigFile}catch(e){}u=!0}else if("object"==typeof navigator){var v=navigator.userAgent;o=v.indexOf("Windows")>=0,a=v.indexOf("Macintosh")>=0,s=v.indexOf("Linux")>=0,c=!0,d=l=navigator.language}!function(e){e[e.Web=0]="Web",e[e.Mac=1]="Mac",e[e.Linux=2]="Linux",e[e.Windows=3]="Windows"}(i||(i={}));var _=i.Web;u&&(a?_=i.Mac:o?_=i.Windows:s&&(_=i.Linux));var b=o,y=a,w=s,T=u,C=c,S=_;function E(){return u&&!o&&0===e.getuid()}var k=d,x=l,A=h,L="object"==typeof self?self:"object"==typeof r?r:{},N=null;function O(t){return null===N&&(N=L.setImmediate?L.setImmediate.bind(L):void 0!==e&&"function"==typeof e.nextTick?e.nextTick.bind(e):L.setTimeout.bind(L)),N(t)}var P=a?2:o?1:3}.call(this,n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"),n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/*! exports provided: empty, isFalsyOrWhitespace, pad, format, escape, escapeRegExpCharacters, trim, ltrim, rtrim, convertSimple2RegExpPattern, stripWildcards, startsWith, endsWith, createRegExp, regExpLeadsToEndlessLoop, regExpContainsBackreference, canNormalize, normalizeNFC, normalizeNFD, firstNonWhitespaceIndex, getLeadingWhitespace, lastNonWhitespaceIndex, compare, compareIgnoreCase, equalsIgnoreCase, startsWithIgnoreCase, commonPrefixLength, commonSuffixLength, overlap, isHighSurrogate, isLowSurrogate, containsRTL, containsEmoji, isBasicASCII, containsFullWidthCharacter, isFullWidthCharacter, lcut, removeAnsiEscapeCodes, UTF8_BOM_CHARACTER, startsWithUTF8BOM, stripUTF8BOM, safeBtoa, repeat, fuzzyContains, containsUppercaseCharacter */function(e,t,n){"use strict";n.r(t),n.d(t,"empty",function(){return i}),n.d(t,"isFalsyOrWhitespace",function(){return o}),n.d(t,"pad",function(){return a}),n.d(t,"format",function(){return u}),n.d(t,"escape",function(){return c}),n.d(t,"escapeRegExpCharacters",function(){return l}),n.d(t,"trim",function(){return d}),n.d(t,"ltrim",function(){return h}),n.d(t,"rtrim",function(){return f}),n.d(t,"convertSimple2RegExpPattern",function(){return p}),n.d(t,"stripWildcards",function(){return m}),n.d(t,"startsWith",function(){return g}),n.d(t,"endsWith",function(){return v}),n.d(t,"createRegExp",function(){return _}),n.d(t,"regExpLeadsToEndlessLoop",function(){return b}),n.d(t,"regExpContainsBackreference",function(){return y}),n.d(t,"canNormalize",function(){return w}),n.d(t,"normalizeNFC",function(){return C}),n.d(t,"normalizeNFD",function(){return E}),n.d(t,"firstNonWhitespaceIndex",function(){return A}),n.d(t,"getLeadingWhitespace",function(){return L}),n.d(t,"lastNonWhitespaceIndex",function(){return N}),n.d(t,"compare",function(){return O}),n.d(t,"compareIgnoreCase",function(){return P}),n.d(t,"equalsIgnoreCase",function(){return q}),n.d(t,"startsWithIgnoreCase",function(){return R}),n.d(t,"commonPrefixLength",function(){return U}),n.d(t,"commonSuffixLength",function(){return W}),n.d(t,"overlap",function(){return V}),n.d(t,"isHighSurrogate",function(){return B}),n.d(t,"isLowSurrogate",function(){return K}),n.d(t,"containsRTL",function(){return z}),n.d(t,"containsEmoji",function(){return G}),n.d(t,"isBasicASCII",function(){return $}),n.d(t,"containsFullWidthCharacter",function(){return Q}),n.d(t,"isFullWidthCharacter",function(){return Z}),n.d(t,"lcut",function(){return X}),n.d(t,"removeAnsiEscapeCodes",function(){return re}),n.d(t,"UTF8_BOM_CHARACTER",function(){return ie}),n.d(t,"startsWithUTF8BOM",function(){return oe}),n.d(t,"stripUTF8BOM",function(){return ae}),n.d(t,"safeBtoa",function(){return se}),n.d(t,"repeat",function(){return ue}),n.d(t,"fuzzyContains",function(){return ce}),n.d(t,"containsUppercaseCharacter",function(){return le});var r=n(/*! ./map.js */"./node_modules/monaco-editor/esm/vs/base/common/map.js"),i="";function o(e){return!e||"string"!=typeof e||0===e.trim().length}function a(e,t,n){void 0===n&&(n="0");for(var r=""+e,i=[r],o=r.length;o<t;o++)i.push(n);return i.reverse().join("")}var s=/{(\d+)}/g;function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return 0===t.length?e:e.replace(s,function(e,n){var r=parseInt(n,10);return isNaN(r)||r<0||r>=t.length?e:t[r]})}function c(e){return e.replace(/[<|>|&]/g,function(e){switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";default:return e}})}function l(e){return e.replace(/[\-\\\{\}\*\+\?\|\^\$\.\[\]\(\)\#]/g,"\\$&")}function d(e,t){return void 0===t&&(t=" "),f(h(e,t),t)}function h(e,t){if(!e||!t)return e;var n=t.length;if(0===n||0===e.length)return e;for(var r=0;e.indexOf(t,r)===r;)r+=n;return e.substring(r)}function f(e,t){if(!e||!t)return e;var n=t.length,r=e.length;if(0===n||0===r)return e;for(var i=r,o=-1;-1!==(o=e.lastIndexOf(t,i-1))&&o+n===i;){if(0===o)return"";i=o}return e.substring(0,i)}function p(e){return e.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}function m(e){return e.replace(/\*/g,"")}function g(e,t){if(e.length<t.length)return!1;if(e===t)return!0;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function v(e,t){var n=e.length-t.length;return n>0?e.indexOf(t,n)===n:0===n&&e===t}function _(e,t,n){if(void 0===n&&(n={}),!e)throw new Error("Cannot create regex from empty string");t||(e=l(e)),n.wholeWord&&(/\B/.test(e.charAt(0))||(e="\\b"+e),/\B/.test(e.charAt(e.length-1))||(e+="\\b"));var r="";return n.global&&(r+="g"),n.matchCase||(r+="i"),n.multiline&&(r+="m"),new RegExp(e,r)}function b(e){return"^"!==e.source&&"^$"!==e.source&&"$"!==e.source&&"^\\s*$"!==e.source&&(e.exec("")&&0===e.lastIndex)}function y(e){return!!e.match(/([^\\]|^)(\\\\)*\\\d+/)}var w="function"==typeof"".normalize,T=new r.LRUCache(1e4);function C(e){return x(e,"NFC",T)}var S=new r.LRUCache(1e4);function E(e){return x(e,"NFD",S)}var k=/[^\u0000-\u0080]/;function x(e,t,n){if(!w||!e)return e;var r,i=n.get(e);return i||(r=k.test(e)?e.normalize(t):e,n.set(e,r),r)}function A(e){for(var t=0,n=e.length;t<n;t++){var r=e.charCodeAt(t);if(32!==r&&9!==r)return t}return-1}function L(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);for(var r=t;r<n;r++){var i=e.charCodeAt(r);if(32!==i&&9!==i)return e.substring(t,r)}return e.substring(t,n)}function N(e,t){void 0===t&&(t=e.length-1);for(var n=t;n>=0;n--){var r=e.charCodeAt(n);if(32!==r&&9!==r)return n}return-1}function O(e,t){return e<t?-1:e>t?1:0}function P(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){var i=e.charCodeAt(r),o=t.charCodeAt(r);if(i!==o){j(i)&&(i+=32),j(o)&&(o+=32);var a=i-o;if(0!==a)return D(i)&&D(o)?a:O(e.toLowerCase(),t.toLowerCase())}}return e.length<t.length?-1:e.length>t.length?1:0}function D(e){return e>=97&&e<=122}function j(e){return e>=65&&e<=90}function I(e){return D(e)||j(e)}function q(e,t){return(e?e.length:0)===(t?t.length:0)&&M(e,t)}function M(e,t,n){if(void 0===n&&(n=e.length),"string"!=typeof e||"string"!=typeof t)return!1;for(var r=0;r<n;r++){var i=e.charCodeAt(r),o=t.charCodeAt(r);if(i!==o)if(I(i)&&I(o)){var a=Math.abs(i-o);if(0!==a&&32!==a)return!1}else if(String.fromCharCode(i).toLowerCase()!==String.fromCharCode(o).toLowerCase())return!1}return!0}function R(e,t){var n=t.length;return!(t.length>e.length)&&M(e,t,n)}function U(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n++)if(e.charCodeAt(n)!==t.charCodeAt(n))return n;return r}function W(e,t){var n,r=Math.min(e.length,t.length),i=e.length-1,o=t.length-1;for(n=0;n<r;n++)if(e.charCodeAt(i-n)!==t.charCodeAt(o-n))return n;return r}function F(e,t,n,r,i,o){for(;t<n&&i<o;){if(e[t]!==r[i])return!1;t+=1,i+=1}return!0}function V(e,t){var n=e.length,r=t.length,i=n-r;if(0===i)return e===t?n:0;for(i<0&&(r+=i,i=0);i<n&&r>0;){if(F(e,i,n,t,0,r))return r;r-=1,i+=1}return 0}function B(e){return 55296<=e&&e<=56319}function K(e){return 56320<=e&&e<=57343}var H=/(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u08BD\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE33\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDCFF]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD50-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;function z(e){return H.test(e)}var Y=/(?:[\u231A\u231B\u23F0\u23F3\u2600-\u27BF\u2B50\u2B55]|\uD83C[\uDDE6-\uDDFF\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F\uDE80-\uDEF8]|\uD83E[\uDD00-\uDDE6])/;function G(e){return Y.test(e)}var J=/^[\t\n\r\x20-\x7E]*$/;function $(e){return J.test(e)}function Q(e){for(var t=0,n=e.length;t<n;t++)if(Z(e.charCodeAt(t)))return!0;return!1}function Z(e){return(e=+e)>=11904&&e<=55215||e>=63744&&e<=64255||e>=65281&&e<=65374}function X(e,t){if(e.length<t)return e;for(var n=/\b/g,r=0;n.test(e)&&!(e.length-n.lastIndex<t);)r=n.lastIndex,n.lastIndex+=1;return e.substring(r).replace(/^\s/,i)}var ee=/\x1B\x5B[12]?K/g,te=/\x1b\[\d+m/g,ne=/\x1b\[0?m/g;function re(e){return e&&(e=(e=(e=e.replace(ee,"")).replace(te,"")).replace(ne,"")),e}var ie=String.fromCharCode(65279);function oe(e){return e&&e.length>0&&65279===e.charCodeAt(0)}function ae(e){return oe(e)?e.substr(1):e}function se(e){return btoa(encodeURIComponent(e))}function ue(e,t){for(var n="",r=0;r<t;r++)n+=e;return n}function ce(e,t){if(!e||!t)return!1;if(e.length<t.length)return!1;for(var n=t.length,r=e.toLowerCase(),i=0,o=-1;i<n;){var a=r.indexOf(t[i],o+1);if(a<0)return!1;o=a,i++}return!0}function le(e,t){return void 0===t&&(t=!1),!!e&&(t&&(e=e.replace(/\\./g,"")),e.toLowerCase()!==e)}},"./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function o(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function a(e){return encodeURIComponent(e).replace(/[!'()*]/g,o)}function s(e){return e.replace(/[#?]/,o)}var u=/^\w[\w\d+.-]*$/,c=/^\//,l=/^\/\//;var d="",h="/",f=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,p=/^\/[a-zA-Z]:/,m=/^(\/)?([A-Z]:)/,g=/^[a-zA-Z]:/,v=function(){function e(e,t,n,r,i){"object"==typeof e?(this.scheme=e.scheme||d,this.authority=e.authority||d,this.path=e.path||d,this.query=e.query||d,this.fragment=e.fragment||d):(this.scheme=e||d,this.authority=t||d,this.path=n||d,this.query=r||d,this.fragment=i||d,function(e){if(e.scheme&&!u.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!c.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(l.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this))}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"fsPath",{get:function(){return b(this)},enumerable:!0,configurable:!0}),e.prototype.with=function(e){if(!e)return this;var t=e.scheme,n=e.authority,r=e.path,i=e.query,o=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=d),void 0===n?n=this.authority:null===n&&(n=d),void 0===r?r=this.path:null===r&&(r=d),void 0===i?i=this.query:null===i&&(i=d),void 0===o?o=this.fragment:null===o&&(o=d),t===this.scheme&&n===this.authority&&r===this.path&&i===this.query&&o===this.fragment?this:new _(t,n,r,i,o)},e.parse=function(e){var t=f.exec(e);return t?new _(t[2]||d,decodeURIComponent(t[4]||d),decodeURIComponent(t[5]||d),decodeURIComponent(t[7]||d),decodeURIComponent(t[9]||d)):new _(d,d,d,d,d)},e.file=function(e){var t=d;if(r.isWindows&&(e=e.replace(/\\/g,h)),e[0]===h&&e[1]===h){var n=e.indexOf(h,2);-1===n?(t=e.substring(2),e=h):(t=e.substring(2,n),e=e.substring(n)||h)}return g.test(e)?e=h+e:e[0]!==h&&(e=h+e),new _("file",t,e,d,d)},e.from=function(e){return new _(e.scheme,e.authority,e.path,e.query,e.fragment)},e.prototype.toString=function(e){return void 0===e&&(e=!1),y(this,e)},e.prototype.toJSON=function(){var e={$mid:1,fsPath:this.fsPath,external:this.toString()};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){if(t){if(t instanceof e)return t;var n=new _(t);return n._fsPath=t.fsPath,n._formatted=t.external,n}return t},e}();t.default=v;var _=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return i(t,e),Object.defineProperty(t.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=b(this)),this._fsPath},enumerable:!0,configurable:!0}),t.prototype.toString=function(e){return void 0===e&&(e=!1),e?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)},t}(v);function b(e){var t;return t=e.authority&&e.path&&"file"===e.scheme?"//"+e.authority+e.path:p.test(e.path)?e.path[1].toLowerCase()+e.path.substr(2):e.path,r.isWindows&&(t=t.replace(/\//g,"\\")),t}function y(e,t){var n=t?s:a,r=[],i=e.scheme,o=e.authority,u=e.path,c=e.query,l=e.fragment;if(i&&r.push(i,":"),(o||"file"===i)&&r.push("//"),o){if(-1!==(v=o.indexOf("@"))){var f=o.substr(0,v);o=o.substr(v+1),-1===(v=f.indexOf(":"))?r.push(n(f)):r.push(n(f.substr(0,v)),":",n(f.substr(v+1))),r.push("@")}-1===(v=(o=o.toLowerCase()).indexOf(":"))?r.push(n(o)):r.push(n(o.substr(0,v)),o.substr(v))}if(u){var p=m.exec(u);p&&(u=p[1]?"/"+p[2].toLowerCase()+u.substr(3):p[2].toLowerCase()+u.substr(2));for(var g=0;;){var v;if(-1===(v=u.indexOf(h,g))){r.push(n(u.substring(g)));break}r.push(n(u.substring(g,v)),h),g=v+1}}return c&&r.push("?",n(c)),l&&r.push("#",n(l)),r.join(d)}},"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js ***!
  \*********************************************************************/
/*! exports provided: Promise, TPromise, PPromise */function(e,t,n){"use strict";n.r(t),function(e,r){var i;n.d(t,"Promise",function(){return o}),n.d(t,"TPromise",function(){return a}),n.d(t,"PPromise",function(){return s}),function(){var t=Object.create(null);t["WinJS/Core/_WinJS"]={};var n=function(e,n,r){var i={},o=!1,a=n.map(function(e){return"exports"===e?(o=!0,i):t[e]}),s=r.apply({},a);t[e]=o?i:s};n("WinJS/Core/_Global",[],function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:void 0!==e?e:{}}),n("WinJS/Core/_BaseCoreUtils",["WinJS/Core/_Global"],function(e){var t=null;return{hasWinRT:!!e.Windows,markSupportedForProcessing:function(e){return e.supportedForProcessing=!0,e},_setImmediate:function(n){null===t&&(t=e.setImmediate?e.setImmediate.bind(e):void 0!==r&&"function"==typeof r.nextTick?r.nextTick.bind(r):e.setTimeout.bind(e)),t(n)}}}),n("WinJS/Core/_WriteProfilerMark",["WinJS/Core/_Global"],function(e){return e.msWriteProfilerMark||function(){}}),n("WinJS/Core/_Base",["WinJS/Core/_WinJS","WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_WriteProfilerMark"],function(e,t,n,r){function i(e,t,n){var r,i,o,a=Object.keys(t),s=Array.isArray(e);for(i=0,o=a.length;i<o;i++){var u=a[i],c=95!==u.charCodeAt(0),l=t[u];!l||"object"!=typeof l||void 0===l.value&&"function"!=typeof l.get&&"function"!=typeof l.set?c?s?e.forEach(function(e){e[u]=l}):e[u]=l:(r=r||{})[u]={value:l,enumerable:c,configurable:!0,writable:!0}:(void 0===l.enumerable&&(l.enumerable=c),n&&l.setName&&"function"==typeof l.setName&&l.setName(n+"."+u),(r=r||{})[u]=l)}r&&(s?e.forEach(function(e){Object.defineProperties(e,r)}):Object.defineProperties(e,r))}return function(){var n=e;function o(n,r){var i=n||{};if(r){var o=r.split(".");i===t&&"WinJS"===o[0]&&(i=e,o.splice(0,1));for(var a=0,s=o.length;a<s;a++){var u=o[a];i[u]||Object.defineProperty(i,u,{value:{},writable:!1,enumerable:!0,configurable:!0}),i=i[u]}}return i}function a(e,t,n){var r=o(e,t);return n&&i(r,n,t||"<ANONYMOUS>"),r}n.Namespace||(n.Namespace=Object.create(Object.prototype));var s={uninitialized:1,working:2,initialized:3};Object.defineProperties(n.Namespace,{defineWithParent:{value:a,writable:!0,enumerable:!0,configurable:!0},define:{value:function(e,n){return a(t,e,n)},writable:!0,enumerable:!0,configurable:!0},_lazy:{value:function(e){var t,n,i=s.uninitialized;return{setName:function(e){t=e},get:function(){switch(i){case s.initialized:return n;case s.uninitialized:i=s.working;try{r("WinJS.Namespace._lazy:"+t+",StartTM"),n=e()}finally{r("WinJS.Namespace._lazy:"+t+",StopTM"),i=s.uninitialized}return e=null,i=s.initialized,n;case s.working:throw"Illegal: reentrancy on initialization";default:throw"Illegal"}},set:function(e){switch(i){case s.working:throw"Illegal: reentrancy on initialization";default:i=s.initialized,n=e}},enumerable:!0,configurable:!0}},writable:!0,enumerable:!0,configurable:!0},_moduleDefine:{value:function(e,n,r){var a=[e],s=null;return n&&(s=o(t,n),a.push(s)),i(a,r,n||"<ANONYMOUS>"),s},writable:!0,enumerable:!0,configurable:!0}})}(),function(){function t(e,t,r){return e=e||function(){},n.markSupportedForProcessing(e),t&&i(e.prototype,t),r&&i(e,r),e}e.Namespace.define("WinJS.Class",{define:t,derive:function(e,r,o,a){if(e){r=r||function(){};var s=e.prototype;return r.prototype=Object.create(s),n.markSupportedForProcessing(r),Object.defineProperty(r.prototype,"constructor",{value:r,writable:!0,configurable:!0,enumerable:!0}),o&&i(r.prototype,o),a&&i(r,a),r}return t(r,o,a)},mix:function(e){var t,n;for(e=e||function(){},t=1,n=arguments.length;t<n;t++)i(e.prototype,arguments[t]);return e}})}(),{Namespace:e.Namespace,Class:e.Class}}),n("WinJS/Core/_ErrorFromName",["WinJS/Core/_Base"],function(e){var t=e.Class.derive(Error,function(e,t){this.name=e,this.message=t||e},{},{supportedForProcessing:!1});return e.Namespace.define("WinJS",{ErrorFromName:t}),t}),n("WinJS/Core/_Events",["exports","WinJS/Core/_Base"],function(e,t){function n(e){var t="_on"+e+"state";return{get:function(){var e=this[t];return e&&e.userHandler},set:function(n){var r=this[t];n?(r||(r={wrapper:function(e){return r.userHandler(e)},userHandler:n},Object.defineProperty(this,t,{value:r,enumerable:!1,writable:!0,configurable:!0}),this.addEventListener(e,r.wrapper,!1)),r.userHandler=n):r&&(this.removeEventListener(e,r.wrapper,!1),this[t]=null)},enumerable:!0}}var r=t.Class.define(function(e,t,n){this.detail=t,this.target=n,this.timeStamp=Date.now(),this.type=e},{bubbles:{value:!1,writable:!1},cancelable:{value:!1,writable:!1},currentTarget:{get:function(){return this.target}},defaultPrevented:{get:function(){return this._preventDefaultCalled}},trusted:{value:!1,writable:!1},eventPhase:{value:0,writable:!1},target:null,timeStamp:null,type:null,preventDefault:function(){this._preventDefaultCalled=!0},stopImmediatePropagation:function(){this._stopImmediatePropagationCalled=!0},stopPropagation:function(){}},{supportedForProcessing:!1}),i={_listeners:null,addEventListener:function(e,t,n){n=n||!1,this._listeners=this._listeners||{};for(var r=this._listeners[e]=this._listeners[e]||[],i=0,o=r.length;i<o;i++){var a=r[i];if(a.useCapture===n&&a.listener===t)return}r.push({listener:t,useCapture:n})},dispatchEvent:function(e,t){var n=this._listeners&&this._listeners[e];if(n){for(var i=new r(e,t,this),o=0,a=(n=n.slice(0,n.length)).length;o<a&&!i._stopImmediatePropagationCalled;o++)n[o].listener(i);return i.defaultPrevented||!1}return!1},removeEventListener:function(e,t,n){n=n||!1;var r=this._listeners&&this._listeners[e];if(r)for(var i=0,o=r.length;i<o;i++){var a=r[i];if(a.listener===t&&a.useCapture===n){r.splice(i,1),0===r.length&&delete this._listeners[e];break}}}};t.Namespace._moduleDefine(e,"WinJS.Utilities",{_createEventProperty:n,createEventProperties:function(){for(var e={},t=0,r=arguments.length;t<r;t++){var i=arguments[t];e["on"+i]=n(i)}return e},eventMixin:i})}),n("WinJS/Core/_Trace",["WinJS/Core/_Global"],function(e){function t(e){return e}return{_traceAsyncOperationStarting:e.Debug&&e.Debug.msTraceAsyncOperationStarting&&e.Debug.msTraceAsyncOperationStarting.bind(e.Debug)||t,_traceAsyncOperationCompleted:e.Debug&&e.Debug.msTraceAsyncOperationCompleted&&e.Debug.msTraceAsyncOperationCompleted.bind(e.Debug)||t,_traceAsyncCallbackStarting:e.Debug&&e.Debug.msTraceAsyncCallbackStarting&&e.Debug.msTraceAsyncCallbackStarting.bind(e.Debug)||t,_traceAsyncCallbackCompleted:e.Debug&&e.Debug.msTraceAsyncCallbackCompleted&&e.Debug.msTraceAsyncCallbackCompleted.bind(e.Debug)||t}}),n("WinJS/Promise/_StateMachine",["WinJS/Core/_Global","WinJS/Core/_BaseCoreUtils","WinJS/Core/_Base","WinJS/Core/_ErrorFromName","WinJS/Core/_Events","WinJS/Core/_Trace"],function(e,t,n,r,i,o){e.Debug&&(e.Debug.setNonUserCodeExceptions=!0);var a=new(n.Class.mix(n.Class.define(null,{},{supportedForProcessing:!1}),i.eventMixin));a._listeners={};var s="error",u="Canceled",c=!1,l={promise:1,thenPromise:2,errorPromise:4,exceptionPromise:8,completePromise:16};l.all=l.promise|l.thenPromise|l.errorPromise|l.exceptionPromise|l.completePromise;var d,h,f,p,m,g,v,_,b,y,w=1;function T(){}d={name:"created",enter:function(e){e._setState(h)},cancel:T,done:T,then:T,_completed:T,_error:T,_notify:T,_progress:T,_setCompleteValue:T,_setErrorValue:T},h={name:"working",enter:T,cancel:function(e){e._setState(m)},done:N,then:W,_completed:S,_error:O,_notify:T,_progress:I,_setCompleteValue:U,_setErrorValue:R},f={name:"waiting",enter:function(e){var t=e._value;if(t instanceof V&&t._state!==y&&t._state!==_)q(t,{promise:e});else{var n=function(r){t._errorId?e._chainedError(r,t):(j(e,r,k,t,n),e._error(r))};n.handlesOnError=!0,t.then(e._completed.bind(e),n,e._progress.bind(e))}},cancel:function(e){e._setState(p)},done:N,then:W,_completed:S,_error:O,_notify:T,_progress:I,_setCompleteValue:U,_setErrorValue:R},p={name:"waiting_canceled",enter:function(e){e._setState(g);var t=e._value;t.cancel&&t.cancel()},cancel:T,done:N,then:W,_completed:S,_error:O,_notify:T,_progress:I,_setCompleteValue:U,_setErrorValue:R},m={name:"canceled",enter:function(e){e._setState(g),e._cancelAction()},cancel:T,done:N,then:W,_completed:S,_error:O,_notify:T,_progress:I,_setCompleteValue:U,_setErrorValue:R},g={name:"canceling",enter:function(e){var t=new Error(u);t.name=t.message,e._value=t,e._setState(b)},cancel:T,done:T,then:T,_completed:T,_error:T,_notify:T,_progress:T,_setCompleteValue:T,_setErrorValue:T},v={name:"complete_notify",enter:function(e){if(e.done=H.prototype.done,e.then=H.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(_)},cancel:T,done:null,then:null,_completed:T,_error:T,_notify:P,_progress:T,_setCompleteValue:T,_setErrorValue:T},_={name:"success",enter:function(e){e.done=H.prototype.done,e.then=H.prototype.then,e._cleanupAction()},cancel:T,done:null,then:null,_completed:T,_error:T,_notify:P,_progress:T,_setCompleteValue:T,_setErrorValue:T},b={name:"error_notify",enter:function(e){if(e.done=B.prototype.done,e.then=B.prototype.then,e._listeners)for(var t,n=[e];n.length;)(t=n.shift())._state._notify(t,n);e._setState(y)},cancel:T,done:null,then:null,_completed:T,_error:T,_notify:D,_progress:T,_setCompleteValue:T,_setErrorValue:T},y={name:"error",enter:function(e){e.done=B.prototype.done,e.then=B.prototype.then,e._cleanupAction()},cancel:T,done:null,then:null,_completed:T,_error:T,_notify:D,_progress:T,_setCompleteValue:T,_setErrorValue:T};var C=n.Class.define(null,{_listeners:null,_nextState:null,_state:null,_value:null,cancel:function(){this._state.cancel(this),this._run()},done:function(e,t,n){this._state.done(this,e,t,n)},then:function(e,t,n){return this._state.then(this,e,t,n)},_chainedError:function(e,t){var n=this._state._error(this,e,x,t);return this._run(),n},_completed:function(e){var t=this._state._completed(this,e);return this._run(),t},_error:function(e){var t=this._state._error(this,e,A);return this._run(),t},_progress:function(e){this._state._progress(this,e)},_setState:function(e){this._nextState=e},_setCompleteValue:function(e){this._state._setCompleteValue(this,e),this._run()},_setChainedErrorValue:function(e,t){var n=this._state._setErrorValue(this,e,x,t);return this._run(),n},_setExceptionValue:function(e){var t=this._state._setErrorValue(this,e,L);return this._run(),t},_run:function(){for(;this._nextState;)this._state=this._nextState,this._nextState=null,this._state.enter(this)}},{supportedForProcessing:!1});function S(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?f:v,e._value=t,e._setState(n)}function E(e,t,n,r,i,o){return{exception:e,error:t,promise:n,handler:o,id:r,parent:i}}function k(e,t,n,r){var i=n._isException,o=n._errorId;return E(i?t:null,i?null:t,e,o,n,r)}function x(e,t,n){var r=n._isException,i=n._errorId;return M(e,i,r),E(r?t:null,r?null:t,e,i,n)}function A(e,t){var n=++w;return M(e,n),E(null,t,e,n)}function L(e,t){var n=++w;return M(e,n,!0),E(t,null,e,n)}function N(e,t,n,r){q(e,{c:t,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.done")})}function O(e,t,n,r){e._value=t,j(e,t,n,r),e._setState(b)}function P(t,n){var r,i,a=t._value,s=t._listeners;if(s)for(t._listeners=null,r=0,i=Array.isArray(s)?s.length:1;r<i;r++){var u=1===i?s:s[r],c=u.c,l=u.promise;if(o._traceAsyncOperationCompleted(u.asyncOpID,e.Debug&&e.Debug.MS_ASYNC_OP_STATUS_SUCCESS),l){o._traceAsyncCallbackStarting(u.asyncOpID);try{l._setCompleteValue(c?c(a):a)}catch(e){l._setExceptionValue(e)}finally{o._traceAsyncCallbackCompleted()}l._state!==f&&l._listeners&&n.push(l)}else H.prototype.done.call(t,c)}}function D(t,n){var r,i,a=t._value,s=t._listeners;if(s)for(t._listeners=null,r=0,i=Array.isArray(s)?s.length:1;r<i;r++){var c=1===i?s:s[r],l=c.e,d=c.promise,h=e.Debug&&(a&&a.name===u?e.Debug.MS_ASYNC_OP_STATUS_CANCELED:e.Debug.MS_ASYNC_OP_STATUS_ERROR);if(o._traceAsyncOperationCompleted(c.asyncOpID,h),d){var p=!1;try{l?(o._traceAsyncCallbackStarting(c.asyncOpID),p=!0,l.handlesOnError||j(d,a,k,t,l),d._setCompleteValue(l(a))):d._setChainedErrorValue(a,t)}catch(e){d._setExceptionValue(e)}finally{p&&o._traceAsyncCallbackCompleted()}d._state!==f&&d._listeners&&n.push(d)}else B.prototype.done.call(t,null,l)}}function j(e,t,n,r,i){if(a._listeners[s]){if(t instanceof Error&&t.message===u)return;a.dispatchEvent(s,n(e,t,r,i))}}function I(e,t){var n,r,i=e._listeners;if(i)for(n=0,r=Array.isArray(i)?i.length:1;n<r;n++){var o=1===r?i:i[n],a=o.p;if(a)try{a(t)}catch(e){}o.c||o.e||!o.promise||o.promise._progress(t)}}function q(e,t){var n=e._listeners;n?(n=Array.isArray(n)?n:[n]).push(t):n=t,e._listeners=n}function M(e,t,n){e._isException=n||!1,e._errorId=t}function R(e,t,n,r){e._value=t,j(e,t,n,r),e._setState(y)}function U(e,t){var n;n=t&&"object"==typeof t&&"function"==typeof t.then?f:_,e._value=t,e._setState(n)}function W(e,t,n,r){var i=new V(e);return q(e,{promise:i,c:t,e:n,p:r,asyncOpID:o._traceAsyncOperationStarting("WinJS.Promise.then")}),i}var F,V=n.Class.derive(C,function(e){c&&(!0===c||c&l.thenPromise)&&(this._stack=z._getStack()),this._creator=e,this._setState(d),this._run()},{_creator:null,_cancelAction:function(){this._creator&&this._creator.cancel()},_cleanupAction:function(){this._creator=null}},{supportedForProcessing:!1}),B=n.Class.define(function(e){c&&(!0===c||c&l.errorPromise)&&(this._stack=z._getStack()),this._value=e,j(this,e,A)},{cancel:function(){},done:function(e,t){var n=this._value;if(t)try{t.handlesOnError||j(null,n,k,this,t);var r=t(n);return void(r&&"object"==typeof r&&"function"==typeof r.done&&r.done())}catch(e){n=e}n instanceof Error&&n.message===u||z._doneHandler(n)},then:function(e,t){if(!t)return this;var n,r=this._value;try{t.handlesOnError||j(null,r,k,this,t),n=new H(t(r))}catch(e){n=e===r?this:new K(e)}return n}},{supportedForProcessing:!1}),K=n.Class.derive(B,function(e){c&&(!0===c||c&l.exceptionPromise)&&(this._stack=z._getStack()),this._value=e,j(this,e,L)},{},{supportedForProcessing:!1}),H=n.Class.define(function(e){if(c&&(!0===c||c&l.completePromise)&&(this._stack=z._getStack()),e&&"object"==typeof e&&"function"==typeof e.then){var t=new V(null);return t._setCompleteValue(e),t}this._value=e},{cancel:function(){},done:function(e){if(e)try{var t=e(this._value);t&&"object"==typeof t&&"function"==typeof t.done&&t.done()}catch(e){z._doneHandler(e)}},then:function(e){try{var t=e?e(this._value):this._value;return t===this._value?this:new H(t)}catch(e){return new K(e)}}},{supportedForProcessing:!1});var z=n.Class.derive(C,function(e,t){c&&(!0===c||c&l.promise)&&(this._stack=z._getStack()),this._oncancel=t,this._setState(d),this._run();try{e(this._completed.bind(this),this._error.bind(this),this._progress.bind(this))}catch(e){this._setExceptionValue(e)}},{_oncancel:null,_cancelAction:function(){try{if(!this._oncancel)throw new Error("Promise did not implement oncancel");this._oncancel()}catch(e){e.message,e.stack;a.dispatchEvent("error",e)}},_cleanupAction:function(){this._oncancel=null}},{addEventListener:function(e,t,n){a.addEventListener(e,t,n)},any:function(e){return new z(function(t,n){var r=Object.keys(e);0===r.length&&t();var i=0;r.forEach(function(o){z.as(e[o]).then(function(){t({key:o,value:e[o]})},function(a){a instanceof Error&&a.name===u?++i===r.length&&t(z.cancel):n({key:o,value:e[o]})})})},function(){Object.keys(e).forEach(function(t){var n=z.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},as:function(e){return e&&"object"==typeof e&&"function"==typeof e.then?e:new H(e)},cancel:{get:function(){return F=F||new B(new r(u))}},dispatchEvent:function(e,t){return a.dispatchEvent(e,t)},is:function(e){return e&&"object"==typeof e&&"function"==typeof e.then},join:function(e){return new z(function(t,n,r){var i=Object.keys(e),o=Array.isArray(e)?[]:{},a=Array.isArray(e)?[]:{},s=0,c=i.length,l=function(e){if(0==--c){var s=Object.keys(o).length;if(0===s)t(a);else{var l=0;i.forEach(function(e){var t=o[e];t instanceof Error&&t.name===u&&l++}),l===s?t(z.cancel):n(o)}}else r({Key:e,Done:!0})};i.forEach(function(t){var n=e[t];void 0===n?s++:z.then(n,function(e){a[t]=e,l(t)},function(e){o[t]=e,l(t)})}),0!==(c-=s)||t(a)},function(){Object.keys(e).forEach(function(t){var n=z.as(e[t]);"function"==typeof n.cancel&&n.cancel()})})},removeEventListener:function(e,t,n){a.removeEventListener(e,t,n)},supportedForProcessing:!1,then:function(e,t,n,r){return z.as(e).then(t,n,r)},thenEach:function(e,t,n,r){var i=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(o){i[o]=z.as(e[o]).then(t,n,r)}),z.join(i)},timeout:function(n,r){var i=function(n){var r;return new z(function(i){n?r=e.setTimeout(i,n):t._setImmediate(i)},function(){r&&e.clearTimeout(r)})}(n);return r?function(e,t){var n=function(){e.cancel()};return e.then(function(){t.cancel()}),t.then(n,n),t}(i,r):i},wrap:function(e){return new H(e)},wrapError:function(e){return new B(e)},_veryExpensiveTagWithStack:{get:function(){return c},set:function(e){c=e}},_veryExpensiveTagWithStack_tag:l,_getStack:function(){if(e.Debug&&e.Debug.debuggerEnabled)try{throw new Error}catch(e){return e.stack}},_cancelBlocker:function(e,t){if(!z.is(e))return z.wrap(e);var n,r,i=new z(function(e,t){n=e,r=t},function(){n=null,r=null,t&&t()});return e.then(function(e){n&&n(e)},function(e){r&&r(e)}),i}});return Object.defineProperties(z,i.createEventProperties(s)),z._doneHandler=function(e){t._setImmediate(function(){throw e})},{PromiseStateMachine:C,Promise:z,state_created:d}}),n("WinJS/Promise",["WinJS/Core/_Base","WinJS/Promise/_StateMachine"],function(e,t){return e.Namespace.define("WinJS",{Promise:t.Promise}),t.Promise}),(i=t["WinJS/Core/_WinJS"]).TPromise=i.Promise,i.PPromise=i.Promise}();var o=i.Promise,a=i.TPromise,s=i.PPromise}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/*! exports provided: logOnceWebWorkerWarning, SimpleWorkerClient, SimpleWorkerServer, create */function(e,t,n){"use strict";n.r(t),n.d(t,"logOnceWebWorkerWarning",function(){return d}),n.d(t,"SimpleWorkerClient",function(){return f}),n.d(t,"SimpleWorkerServer",function(){return p}),n.d(t,"create",function(){return m});var r=n(/*! ../errors.js */"./node_modules/monaco-editor/esm/vs/base/common/errors.js"),i=n(/*! ../lifecycle.js */"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js"),o=n(/*! ../winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),a=n(/*! ../async.js */"./node_modules/monaco-editor/esm/vs/base/common/async.js"),s=n(/*! ../platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),u=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),c="$initialize",l=!1;function d(e){s.isWeb&&(l||(l=!0,console.warn("Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/Microsoft/monaco-editor#faq")),console.warn(e.message))}var h=function(){function e(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}return e.prototype.setWorkerId=function(e){this._workerId=e},e.prototype.sendMessage=function(e,t){var n=String(++this._lastSentReq),r={c:null,e:null},i=new o.TPromise(function(e,t,n){r.c=e,r.e=t},function(){});return this._pendingReplies[n]=r,this._send({vsWorker:this._workerId,req:n,method:e,args:t}),i},e.prototype.handleMessage=function(e){var t;try{t=JSON.parse(e)}catch(e){}t&&t.vsWorker&&(-1!==this._workerId&&t.vsWorker!==this._workerId||this._handleMessage(t))},e.prototype._handleMessage=function(e){var t=this;if(e.seq){var n=e;if(!this._pendingReplies[n.seq])return void console.warn("Got reply to unknown seq");var i=this._pendingReplies[n.seq];if(delete this._pendingReplies[n.seq],n.err){var o=n.err;return n.err.$isError&&((o=new Error).name=n.err.name,o.message=n.err.message,o.stack=n.err.stack),void i.e(o)}i.c(n.res)}else{var a=e,s=a.req;this._handler.handleMessage(a.method,a.args).then(function(e){t._send({vsWorker:t._workerId,seq:s,res:e,err:void 0})},function(e){e.detail instanceof Error&&(e.detail=Object(r.transformErrorForSerialization)(e.detail)),t._send({vsWorker:t._workerId,seq:s,res:void 0,err:Object(r.transformErrorForSerialization)(e)})})}},e.prototype._send=function(e){var t=JSON.stringify(e);this._handler.sendMessage(t)},e}(),f=function(e){function t(t,n){var r=e.call(this)||this,i=null,a=null;r._worker=r._register(t.create("vs/base/common/worker/simpleWorker",function(e){r._protocol.handleMessage(e)},function(e){a(e)})),r._protocol=new h({sendMessage:function(e){r._worker.postMessage(e)},handleMessage:function(e,t){return o.TPromise.as(null)}}),r._protocol.setWorkerId(r._worker.getId());var s=null;void 0!==self.require&&"function"==typeof self.require.getConfig?s=self.require.getConfig():void 0!==self.requirejs&&(s=self.requirejs.s.contexts._.config),r._lazyProxy=new o.TPromise(function(e,t,n){i=e,a=t},function(){}),r._onModuleLoaded=r._protocol.sendMessage(c,[r._worker.getId(),n,s]),r._onModuleLoaded.then(function(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=l(e[n],u);i(t)},function(e){a(e),r._onError("Worker failed to load "+n,e)});var u=function(e,t){return r._request(e,t)},l=function(e,t){return function(){var n=Array.prototype.slice.call(arguments,0);return t(e,n)}};return r}return u(t,e),t.prototype.getProxyObject=function(){return new a.ShallowCancelThenPromise(this._lazyProxy)},t.prototype._request=function(e,t){var n=this;return new o.TPromise(function(r,i,o){n._onModuleLoaded.then(function(){n._protocol.sendMessage(e,t).then(r,i)},i)},function(){})},t.prototype._onError=function(e,t){console.error(e),console.info(t)},t}(i.Disposable),p=function(){function e(e,t){var n=this;this._requestHandler=t,this._protocol=new h({sendMessage:function(t){e(t)},handleMessage:function(e,t){return n._handleMessage(e,t)}})}return e.prototype.onmessage=function(e){this._protocol.handleMessage(e)},e.prototype._handleMessage=function(e,t){if(e===c)return this.initialize(t[0],t[1],t[2]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return o.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return o.TPromise.as(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return o.TPromise.wrapError(e)}},e.prototype.initialize=function(e,t,n){var r,i,a=this;if(this._protocol.setWorkerId(e),this._requestHandler){var s=[];for(var u in this._requestHandler)"function"==typeof this._requestHandler[u]&&s.push(u);return o.TPromise.as(s)}n&&(void 0!==n.baseUrl&&delete n.baseUrl,void 0!==n.paths&&void 0!==n.paths.vs&&delete n.paths.vs,n.catchError=!0,self.require.config(n));var c=new o.TPromise(function(e,t,n){r=e,i=t});return self.require([t],function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0];a._requestHandler=n.create();var i=[];for(var o in a._requestHandler)"function"==typeof a._requestHandler[o]&&i.push(o);r(i)},i),c},e}();function m(e){return new p(e,null)}},"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/*! exports provided: CharacterClassifier, CharacterSet */function(e,t,n){"use strict";n.r(t),n.d(t,"CharacterClassifier",function(){return i}),n.d(t,"CharacterSet",function(){return o});var r=n(/*! ./uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),i=function(){function e(t){var n=Object(r.toUint8)(t);this._defaultValue=n,this._asciiMap=e._createAsciiMap(n),this._map=new Map}return e._createAsciiMap=function(e){for(var t=new Uint8Array(256),n=0;n<256;n++)t[n]=e;return t},e.prototype.set=function(e,t){var n=Object(r.toUint8)(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)},e.prototype.get=function(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue},e}(),o=function(){function e(){this._actual=new i(0)}return e.prototype.add=function(e){this._actual.set(e,1)},e.prototype.has=function(e){return 1===this._actual.get(e)},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/*! exports provided: Position */function(e,t,n){"use strict";n.r(t),n.d(t,"Position",function(){return r});var r=function(){function e(e,t){this.lineNumber=e,this.column=t}return e.prototype.equals=function(t){return e.equals(this,t)},e.equals=function(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column},e.prototype.isBefore=function(t){return e.isBefore(this,t)},e.isBefore=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column},e.prototype.isBeforeOrEqual=function(t){return e.isBeforeOrEqual(this,t)},e.isBeforeOrEqual=function(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column},e.compare=function(e,t){var n=0|e.lineNumber,r=0|t.lineNumber;return n===r?(0|e.column)-(0|t.column):n-r},e.prototype.clone=function(){return new e(this.lineNumber,this.column)},e.prototype.toString=function(){return"("+this.lineNumber+","+this.column+")"},e.lift=function(t){return new e(t.lineNumber,t.column)},e.isIPosition=function(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/*! exports provided: Range */function(e,t,n){"use strict";n.r(t),n.d(t,"Range",function(){return i});var r=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),i=function(){function e(e,t,n,r){e>n||e===n&&t>r?(this.startLineNumber=n,this.startColumn=r,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=r)}return e.prototype.isEmpty=function(){return e.isEmpty(this)},e.isEmpty=function(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn},e.prototype.containsPosition=function(t){return e.containsPosition(this,t)},e.containsPosition=function(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))},e.prototype.containsRange=function(t){return e.containsRange(this,t)},e.containsRange=function(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))},e.prototype.plusRange=function(t){return e.plusRange(this,t)},e.plusRange=function(t,n){var r,i,o,a;return n.startLineNumber<t.startLineNumber?(r=n.startLineNumber,i=n.startColumn):n.startLineNumber===t.startLineNumber?(r=n.startLineNumber,i=Math.min(n.startColumn,t.startColumn)):(r=t.startLineNumber,i=t.startColumn),n.endLineNumber>t.endLineNumber?(o=n.endLineNumber,a=n.endColumn):n.endLineNumber===t.endLineNumber?(o=n.endLineNumber,a=Math.max(n.endColumn,t.endColumn)):(o=t.endLineNumber,a=t.endColumn),new e(r,i,o,a)},e.prototype.intersectRanges=function(t){return e.intersectRanges(this,t)},e.intersectRanges=function(t,n){var r=t.startLineNumber,i=t.startColumn,o=t.endLineNumber,a=t.endColumn,s=n.startLineNumber,u=n.startColumn,c=n.endLineNumber,l=n.endColumn;return r<s?(r=s,i=u):r===s&&(i=Math.max(i,u)),o>c?(o=c,a=l):o===c&&(a=Math.min(a,l)),r>o?null:r===o&&i>a?null:new e(r,i,o,a)},e.prototype.equalsRange=function(t){return e.equalsRange(this,t)},e.equalsRange=function(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn},e.prototype.getEndPosition=function(){return new r.Position(this.endLineNumber,this.endColumn)},e.prototype.getStartPosition=function(){return new r.Position(this.startLineNumber,this.startColumn)},e.prototype.toString=function(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"},e.prototype.setEndPosition=function(t,n){return new e(this.startLineNumber,this.startColumn,t,n)},e.prototype.setStartPosition=function(t,n){return new e(t,n,this.endLineNumber,this.endColumn)},e.prototype.collapseToStart=function(){return e.collapseToStart(this)},e.collapseToStart=function(t){return new e(t.startLineNumber,t.startColumn,t.startLineNumber,t.startColumn)},e.fromPositions=function(t,n){return void 0===n&&(n=t),new e(t.lineNumber,t.column,n.lineNumber,n.column)},e.lift=function(t){return t?new e(t.startLineNumber,t.startColumn,t.endLineNumber,t.endColumn):null},e.isIRange=function(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn},e.areIntersectingOrTouching=function(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)},e.compareRangesUsingStarts=function(e,t){var n=0|e.startLineNumber,r=0|t.startLineNumber;if(n===r){var i=0|e.startColumn,o=0|t.startColumn;if(i===o){var a=0|e.endLineNumber,s=0|t.endLineNumber;return a===s?(0|e.endColumn)-(0|t.endColumn):a-s}return i-o}return n-r},e.compareRangesUsingEnds=function(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber},e.spansMultipleLines=function(e){return e.endLineNumber>e.startLineNumber},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/*! exports provided: SelectionDirection, Selection */function(e,t,n){"use strict";n.r(t),n.d(t,"SelectionDirection",function(){return r}),n.d(t,"Selection",function(){return s});var r,i=n(/*! ./range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),o=n(/*! ./position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),a=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(r||(r={}));var s=function(e){function t(t,n,r,i){var o=e.call(this,t,n,r,i)||this;return o.selectionStartLineNumber=t,o.selectionStartColumn=n,o.positionLineNumber=r,o.positionColumn=i,o}return a(t,e),t.prototype.clone=function(){return new t(this.selectionStartLineNumber,this.selectionStartColumn,this.positionLineNumber,this.positionColumn)},t.prototype.toString=function(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"},t.prototype.equalsSelection=function(e){return t.selectionsEqual(this,e)},t.selectionsEqual=function(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn},t.prototype.getDirection=function(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?r.LTR:r.RTL},t.prototype.setEndPosition=function(e,n){return this.getDirection()===r.LTR?new t(this.startLineNumber,this.startColumn,e,n):new t(e,n,this.startLineNumber,this.startColumn)},t.prototype.getPosition=function(){return new o.Position(this.positionLineNumber,this.positionColumn)},t.prototype.setStartPosition=function(e,n){return this.getDirection()===r.LTR?new t(e,n,this.endLineNumber,this.endColumn):new t(this.endLineNumber,this.endColumn,e,n)},t.fromPositions=function(e,n){return void 0===n&&(n=e),new t(e.lineNumber,e.column,n.lineNumber,n.column)},t.liftSelection=function(e){return new t(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)},t.selectionsArrEqual=function(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0},t.isISelection=function(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn},t.createWithDirection=function(e,n,i,o,a){return a===r.LTR?new t(e,n,i,o):new t(i,o,e,n)},t}(i.Range)},"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/token.js ***!
  \***********************************************************************/
/*! exports provided: Token, TokenizationResult, TokenizationResult2 */function(e,t,n){"use strict";n.r(t),n.d(t,"Token",function(){return r}),n.d(t,"TokenizationResult",function(){return i}),n.d(t,"TokenizationResult2",function(){return o});var r=function(){function e(e,t,n){this.offset=0|e,this.type=t,this.language=n}return e.prototype.toString=function(){return"("+this.offset+", "+this.type+")"},e}(),i=function(){return function(e,t){this.tokens=e,this.endState=t}}(),o=function(){return function(e,t){this.tokens=e,this.endState=t}}()},"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js ***!
  \**********************************************************************/
/*! exports provided: Uint8Matrix, toUint8, toUint32, toUint32Array */function(e,t,n){"use strict";n.r(t),n.d(t,"Uint8Matrix",function(){return r}),n.d(t,"toUint8",function(){return i}),n.d(t,"toUint32",function(){return o}),n.d(t,"toUint32Array",function(){return a});var r=function(){function e(e,t,n){for(var r=new Uint8Array(e*t),i=0,o=e*t;i<o;i++)r[i]=n;this._data=r,this.rows=e,this.cols=t}return e.prototype.get=function(e,t){return this._data[e*this.cols+t]},e.prototype.set=function(e,t,n){this._data[e*this.cols+t]=n},e}();function i(e){return e<0?0:e>255?255:0|e}function o(e){return e<0?0:e>4294967295?4294967295:0|e}function a(e){for(var t=e.length,n=new Uint32Array(t),r=0;r<t;r++)n[r]=o(e[r]);return n}},"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js ***!
  \******************************************************************************/
/*! exports provided: DiffComputer */function(e,t,n){"use strict";n.r(t),n.d(t,"DiffComputer",function(){return f});var r=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),i=n(/*! ../../../base/common/strings.js */"./node_modules/monaco-editor/esm/vs/base/common/strings.js"),o=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a=5e3,s=3;function u(e,t,n,i){return new r.LcsDiff(e,t,n).ComputeDiff(i)}var c=function(){function e(e,t,n){this.buffer=e,this.startMarkers=t,this.endMarkers=n}return e.prototype.getLength=function(){return this.startMarkers.length},e.prototype.getElementHash=function(e){return this.buffer.substring(this.startMarkers[e].offset,this.endMarkers[e].offset)},e.prototype.getStartLineNumber=function(e){return e===this.startMarkers.length?this.startMarkers[e-1].lineNumber+1:this.startMarkers[e].lineNumber},e.prototype.getStartColumn=function(e){return this.startMarkers[e].column},e.prototype.getEndLineNumber=function(e){return this.endMarkers[e].lineNumber},e.prototype.getEndColumn=function(e){return this.endMarkers[e].column},e}(),l=function(e){function t(n){for(var r="",i=[],o=[],a=0,s=0,u=n.length;s<u;s++){r+=n[s];var c=t._getFirstNonBlankColumn(n[s],1),l=t._getLastNonBlankColumn(n[s],1);i.push({offset:a+c-1,lineNumber:s+1,column:c}),o.push({offset:a+l-1,lineNumber:s+1,column:l}),a+=n[s].length}return e.call(this,r,i,o)||this}return o(t,e),t._getFirstNonBlankColumn=function(e,t){var n=i.firstNonWhitespaceIndex(e);return-1===n?t:n+1},t._getLastNonBlankColumn=function(e,t){var n=i.lastNonWhitespaceIndex(e);return-1===n?t:n+2},t.prototype.getCharSequence=function(e,t){for(var n=[],r=[],i=e;i<=t;i++)for(var o=this.startMarkers[i],a=this.endMarkers[i],s=o.offset;s<a.offset;s++)n.push({offset:s,lineNumber:o.lineNumber,column:o.column+(s-o.offset)}),r.push({offset:s+1,lineNumber:o.lineNumber,column:o.column+(s-o.offset)+1});return new c(this.buffer,n,r)},t}(c),d=function(){function e(e,t,n,r,i,o,a,s){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=r,this.modifiedStartLineNumber=i,this.modifiedStartColumn=o,this.modifiedEndLineNumber=a,this.modifiedEndColumn=s}return e.createFromDiffChange=function(t,n,r){var i,o,a,s,u,c,l,d;return 0===t.originalLength?(i=0,o=0,a=0,s=0):(i=n.getStartLineNumber(t.originalStart),o=n.getStartColumn(t.originalStart),a=n.getEndLineNumber(t.originalStart+t.originalLength-1),s=n.getEndColumn(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(u=0,c=0,l=0,d=0):(u=r.getStartLineNumber(t.modifiedStart),c=r.getStartColumn(t.modifiedStart),l=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1),d=r.getEndColumn(t.modifiedStart+t.modifiedLength-1)),new e(i,o,a,s,u,c,l,d)},e}();var h=function(){function e(e,t,n,r,i){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=r,this.charChanges=i}return e.createFromDiffResult=function(t,n,r,i,o){var a,c,l,h,f;if(0===t.originalLength?(a=n.getStartLineNumber(t.originalStart)-1,c=0):(a=n.getStartLineNumber(t.originalStart),c=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(l=r.getStartLineNumber(t.modifiedStart)-1,h=0):(l=r.getStartLineNumber(t.modifiedStart),h=r.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),0!==t.originalLength&&0!==t.modifiedLength&&i()){var p=n.getCharSequence(t.originalStart,t.originalStart+t.originalLength-1),m=r.getCharSequence(t.modifiedStart,t.modifiedStart+t.modifiedLength-1),g=u(p,m,i,!0);o&&(g=function(e){if(e.length<=1)return e;for(var t=[e[0]],n=t[0],r=1,i=e.length;r<i;r++){var o=e[r],a=o.originalStart-(n.originalStart+n.originalLength),u=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(a,u)<s?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(t.push(o),n=o)}return t}(g)),f=[];for(var v=0,_=g.length;v<_;v++)f.push(d.createFromDiffChange(g[v],p,m))}return new e(a,c,l,h,f)},e}(),f=function(){function e(e,t,n){this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.maximumRunTimeMs=a,this.originalLines=e,this.modifiedLines=t,this.original=new l(e),this.modified=new l(t)}return e.prototype.computeDiff=function(){if(1===this.original.getLength()&&0===this.original.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.getLength(),charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];if(1===this.modified.getLength()&&0===this.modified.getElementHash(0).length)return[{originalStartLineNumber:1,originalEndLineNumber:this.original.getLength(),modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}];this.computationStartTime=(new Date).getTime();var e=u(this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldMakePrettyDiff);if(this.shouldIgnoreTrimWhitespace){for(var t=[],n=0,r=e.length;n<r;n++)t.push(h.createFromDiffResult(e[n],this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges));return t}for(var i=[],o=0,a=0,s=(n=-1,e.length);n<s;n++){for(var c=n+1<s?e[n+1]:null,d=c?c.originalStart:this.originalLines.length,f=c?c.modifiedStart:this.modifiedLines.length;o<d&&a<f;){var p=this.originalLines[o],m=this.modifiedLines[a];if(p!==m){for(var g=l._getFirstNonBlankColumn(p,1),v=l._getFirstNonBlankColumn(m,1);g>1&&v>1;){if(p.charCodeAt(g-2)!==m.charCodeAt(v-2))break;g--,v--}(g>1||v>1)&&this._pushTrimWhitespaceCharChange(i,o+1,1,g,a+1,1,v);for(var _=l._getLastNonBlankColumn(p,1),b=l._getLastNonBlankColumn(m,1),y=p.length+1,w=m.length+1;_<y&&b<w;){if(p.charCodeAt(_-1)!==p.charCodeAt(b-1))break;_++,b++}(_<y||b<w)&&this._pushTrimWhitespaceCharChange(i,o+1,_,y,a+1,b,w)}o++,a++}c&&(i.push(h.createFromDiffResult(c,this.original,this.modified,this._continueProcessingPredicate.bind(this),this.shouldPostProcessCharChanges)),o+=c.originalLength,a+=c.modifiedLength)}return i},e.prototype._pushTrimWhitespaceCharChange=function(e,t,n,r,i,o,a){this._mergeTrimWhitespaceCharChange(e,t,n,r,i,o,a)||e.push(new h(t,t,i,i,[new d(t,n,t,r,i,o,i,a)]))},e.prototype._mergeTrimWhitespaceCharChange=function(e,t,n,r,i,o,a){var s=e.length;if(0===s)return!1;var u=e[s-1];return 0!==u.originalEndLineNumber&&0!==u.modifiedEndLineNumber&&(u.originalEndLineNumber+1===t&&u.modifiedEndLineNumber+1===i&&(u.originalEndLineNumber=t,u.modifiedEndLineNumber=i,u.charChanges.push(new d(t,n,t,r,i,o,i,a)),!0))},e.prototype._continueProcessingPredicate=function(){return 0===this.maximumRunTimeMs||(new Date).getTime()-this.computationStartTime<this.maximumRunTimeMs},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/*! exports provided: MirrorTextModel */function(e,t,n){"use strict";n.r(t),n.d(t,"MirrorTextModel",function(){return o});var r=n(/*! ../viewModel/prefixSumComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"),i=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),o=function(){function e(e,t,n,r){this._uri=e,this._lines=t,this._eol=n,this._versionId=r}return e.prototype.dispose=function(){this._lines.length=0},Object.defineProperty(e.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),e.prototype.getText=function(){return this._lines.join(this._eol)},e.prototype.onEvents=function(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);for(var t=e.changes,n=0,r=t.length;n<r;n++){var o=t[n];this._acceptDeleteRange(o.range),this._acceptInsertText(new i.Position(o.range.startLineNumber,o.range.startColumn),o.text)}this._versionId=e.versionId},e.prototype._ensureLineStarts=function(){if(!this._lineStarts){for(var e=this._eol.length,t=this._lines.length,n=new Uint32Array(t),i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new r.PrefixSumComputer(n)}},e.prototype._setLineText=function(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)},e.prototype._acceptDeleteRange=function(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}},e.prototype._acceptInsertText=function(e,t){if(0!==t.length){var n=t.split(/\r\n|\r|\n/);if(1!==n.length){n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);for(var r=new Uint32Array(n.length-1),i=1;i<n.length;i++)this._lines.splice(e.lineNumber+i-1,0,n[i]),r[i-1]=n[i].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,r)}else this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1))}},e}()},"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js ***!
  \*****************************************************************************/
/*! exports provided: USUAL_WORD_SEPARATORS, DEFAULT_WORD_REGEXP, ensureValidWordDefinition, getWordAtText */function(e,t,n){"use strict";n.r(t),n.d(t,"USUAL_WORD_SEPARATORS",function(){return r}),n.d(t,"DEFAULT_WORD_REGEXP",function(){return i}),n.d(t,"ensureValidWordDefinition",function(){return o}),n.d(t,"getWordAtText",function(){return a});var r="`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";var i=function(e){void 0===e&&(e="");for(var t="(-?\\d*\\.\\d\\w*)|([^",n=0;n<r.length;n++)e.indexOf(r[n])>=0||(t+="\\"+r[n]);return t+="\\s]+)",new RegExp(t,"g")}();function o(e){var t=i;if(e&&e instanceof RegExp)if(e.global)t=e;else{var n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}function a(e,t,n,r){t.lastIndex=0;var i=t.exec(n);if(!i)return null;var o=i[0].indexOf(" ")>=0?function(e,t,n,r){var i,o=e-1-r;for(t.lastIndex=0;i=t.exec(n);){if(i.index>o)return null;if(t.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+t.lastIndex}}return null}(e,t,n,r):function(e,t,n,r){var i,o=e-1-r,a=n.lastIndexOf(" ",o-1)+1,s=n.indexOf(" ",o);for(-1===s&&(s=n.length),t.lastIndex=a;i=t.exec(n);)if(i.index<=o&&t.lastIndex>=o)return{word:i[0],startColumn:r+1+i.index,endColumn:r+1+t.lastIndex};return null}(e,t,n,r);return t.lastIndex=0,o}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js ***!
  \*******************************************************************************/
/*! exports provided: computeLinks */function(e,t,n){"use strict";n.r(t),n.d(t,"computeLinks",function(){return c});var r=n(/*! ../core/characterClassifier.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"),i=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),o=function(){function e(e){for(var t=0,n=0,r=0,o=e.length;r<o;r++){var a=e[r],s=a[0],u=a[1],c=a[2];u>t&&(t=u),s>n&&(n=s),c>n&&(n=c)}t++,n++;var l=new i.Uint8Matrix(n,t,0);for(r=0,o=e.length;r<o;r++){var d=e[r];s=d[0],u=d[1],c=d[2];l.set(s,u,c)}this._states=l,this._maxCharCode=t}return e.prototype.nextState=function(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)},e}(),a=null;var s=null;var u=function(){function e(){}return e._createLink=function(e,t,n,r,i){var o=i-1;do{var a=t.charCodeAt(o);if(2!==e.get(a))break;o--}while(o>r);if(r>0){var s=t.charCodeAt(r-1),u=t.charCodeAt(o);(40===s&&41===u||91===s&&93===u||123===s&&125===u)&&o--}return{range:{startLineNumber:n,startColumn:r+1,endLineNumber:n,endColumn:o+2},url:t.substring(r,o+1)}},e.computeLinks=function(t){for(var n=(null===a&&(a=new o([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),a),i=function(){if(null===s){s=new r.CharacterClassifier(0);for(var e=0;e<" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".length;e++)s.set(" \t<>'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…".charCodeAt(e),1);for(e=0;e<".,;".length;e++)s.set(".,;".charCodeAt(e),2)}return s}(),u=[],c=1,l=t.getLineCount();c<=l;c++){for(var d=t.getLineContent(c),h=d.length,f=0,p=0,m=0,g=1,v=!1,_=!1,b=!1;f<h;){var y=!1,w=d.charCodeAt(f);if(13===g){var T=void 0;switch(w){case 40:v=!0,T=0;break;case 41:T=v?0:1;break;case 91:_=!0,T=0;break;case 93:T=_?0:1;break;case 123:b=!0,T=0;break;case 125:T=b?0:1;break;case 39:T=34===m||96===m?0:1;break;case 34:T=39===m||96===m?0:1;break;case 96:T=39===m||34===m?0:1;break;default:T=i.get(w)}1===T&&(u.push(e._createLink(i,d,c,p,f)),y=!0)}else if(12===g){1===(T=i.get(w))?y=!0:g=13}else 0===(g=n.nextState(g,w))&&(y=!0);y&&(g=1,v=!1,_=!1,b=!1,p=f+1,m=w),f++}13===g&&u.push(e._createLink(i,d,c,p,h))}return u},e}();function c(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?u.computeLinks(e):[]}},"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js ***!
  \*************************************************************************************************/
/*! exports provided: BasicInplaceReplace */function(e,t,n){"use strict";n.r(t),n.d(t,"BasicInplaceReplace",function(){return r});var r=function(){function e(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}return e.prototype.navigateValueSet=function(e,t,n,r,i){var o;if(e&&t&&(o=this.doNavigateValueSet(t,i)))return{range:e,value:o};if(n&&r&&(o=this.doNavigateValueSet(r,i)))return{range:n,value:o};return null},e.prototype.doNavigateValueSet=function(e,t){var n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)},e.prototype.numberReplace=function(e,t){var n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),r=Number(e),i=parseFloat(e);return isNaN(r)||isNaN(i)||r!==i?null:0!==r||t?(r=Math.floor(r*n),r+=t?n:-n,String(r/n)):null},e.prototype.textReplace=function(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)},e.prototype.valueSetsReplace=function(e,t,n){for(var r=null,i=0,o=e.length;null===r&&i<o;i++)r=this.valueSetReplace(e[i],t,n);return r},e.prototype.valueSetReplace=function(e,t,n){var r=e.indexOf(t);return r>=0?((r+=n?1:-1)<0?r=e.length-1:r%=e.length,e[r]):null},e.INSTANCE=new e,e}()},"./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services sync ***!
  \***********************************************************************/
/*! no static exports found */function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive"},"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/*! exports provided: BaseEditorSimpleWorker, EditorSimpleWorkerImpl, create */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseEditorSimpleWorker",function(){return v}),n.d(t,"EditorSimpleWorkerImpl",function(){return _}),n.d(t,"create",function(){return b});var r=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js"),i=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),o=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),a=n(/*! ../diff/diffComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"),s=n(/*! ../../../base/common/diff/diff.js */"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js"),u=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),c=n(/*! ../model/mirrorTextModel.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js"),l=n(/*! ../modes/linkComputer.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"),d=n(/*! ../modes/supports/inplaceReplaceSupport.js */"./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js"),h=n(/*! ../model/wordHelper.js */"./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js"),f=n(/*! ../standalone/standaloneBase.js */"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js"),p=n(/*! ../../../base/common/platform.js */"./node_modules/monaco-editor/esm/vs/base/common/platform.js"),m=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return m(t,e),Object.defineProperty(t.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"version",{get:function(){return this._versionId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"eol",{get:function(){return this._eol},enumerable:!0,configurable:!0}),t.prototype.getValue=function(){return this.getText()},t.prototype.getLinesContent=function(){return this._lines.slice(0)},t.prototype.getLineCount=function(){return this._lines.length},t.prototype.getLineContent=function(e){return this._lines[e-1]},t.prototype.getWordAtPosition=function(e,t){var n=Object(h.getWordAtText)(e.column,Object(h.ensureValidWordDefinition)(t),this._lines[e.lineNumber-1],0);return n?new o.Range(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null},t.prototype.getWordUntilPosition=function(e,t){var n=this.getWordAtPosition(e,t);return n?{word:this._lines[e.lineNumber-1].substring(n.startColumn-1,e.column-1),startColumn:n.startColumn,endColumn:e.column}:{word:"",startColumn:e.column,endColumn:e.column}},t.prototype.createWordIterator=function(e){var t,n=this,r={done:!1,value:""},i=0,o=0,a=[],s=function(){if(o<a.length)r.done=!1,r.value=t.substring(a[o].start,a[o].end),o+=1;else{if(!(i>=n._lines.length))return t=n._lines[i],a=n._wordenize(t,e),o=0,i+=1,s();r.done=!0,r.value=void 0}return r};return{next:s}},t.prototype._wordenize=function(e,t){var n,r=[];for(t.lastIndex=0;(n=t.exec(e))&&0!==n[0].length;)r.push({start:n.index,end:n.index+n[0].length});return r},t.prototype.getValueInRange=function(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);var t=this._eol,n=e.startLineNumber-1,r=e.endLineNumber-1,i=[];i.push(this._lines[n].substring(e.startColumn-1));for(var o=n+1;o<r;o++)i.push(this._lines[o]);return i.push(this._lines[r].substring(0,e.endColumn-1)),i.join(t)},t.prototype.offsetAt=function(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)},t.prototype.positionAt=function(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();var t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}},t.prototype._validateRange=function(e){var t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e},t.prototype._validatePosition=function(e){if(!u.Position.isIPosition(e))throw new Error("bad position");var t=e.lineNumber,n=e.column,r=!1;if(t<1)t=1,n=1,r=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,r=!0;else{var i=this._lines[t-1].length+1;n<1?(n=1,r=!0):n>i&&(n=i,r=!0)}return r?{lineNumber:t,column:n}:e},t}(c.MirrorTextModel),v=function(){function e(e){this._foreignModuleFactory=e,this._foreignModule=null}return e.prototype.computeDiff=function(e,t,n){var r=this._getModel(e),o=this._getModel(t);if(!r||!o)return null;var s=r.getLinesContent(),u=o.getLinesContent(),c=new a.DiffComputer(s,u,{shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return i.TPromise.as(c.computeDiff())},e.prototype.computeDirtyDiff=function(e,t,n){var r=this._getModel(e),o=this._getModel(t);if(!r||!o)return null;var s=r.getLinesContent(),u=o.getLinesContent(),c=new a.DiffComputer(s,u,{shouldPostProcessCharChanges:!1,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0});return i.TPromise.as(c.computeDiff())},e.prototype.computeMoreMinimalEdits=function(t,n){var r=this._getModel(t);if(!r)return i.TPromise.as(n);for(var a,u=[],c=0,l=n;c<l.length;c++){var d=l[c],h=d.range,f=d.text,p=d.eol;if("number"==typeof p&&(a=p),h){var m=r.getValueInRange(h);if(m!==(f=f.replace(/\r\n|\n|\r/g,r.eol)))if(Math.max(f.length,m.length)>e._diffLimit)u.push({range:h,text:f});else for(var g=Object(s.stringDiff)(m,f,!1),v=r.offsetAt(o.Range.lift(h).getStartPosition()),_=0,b=g;_<b.length;_++){var y=b[_],w=r.positionAt(v+y.originalStart),T=r.positionAt(v+y.originalStart+y.originalLength),C={text:f.substr(y.modifiedStart,y.modifiedLength),range:{startLineNumber:w.lineNumber,startColumn:w.column,endLineNumber:T.lineNumber,endColumn:T.column}};r.getValueInRange(C.range)!==C.text&&u.push(C)}}}return"number"==typeof a&&u.push({eol:a,text:void 0,range:void 0}),i.TPromise.as(u)},e.prototype.computeLinks=function(e){var t=this._getModel(e);return t?i.TPromise.as(Object(l.computeLinks)(t)):null},e.prototype.textualSuggest=function(t,n,r,o){var a=this._getModel(t);if(a){var s=[],u=new RegExp(r,o),c=a.getWordUntilPosition(n,u).word,l=Object.create(null);l[c]=!0;for(var d=a.createWordIterator(u),h=d.next();!h.done&&s.length<=e._suggestionsLimit;h=d.next()){var f=h.value;l[f]||(l[f]=!0,isNaN(Number(f))&&s.push({type:"text",label:f,insertText:f,noAutoAccept:!0,overwriteBefore:c.length}))}return i.TPromise.as({suggestions:s})}},e.prototype.navigateValueSet=function(e,t,n,r,o){var a=this._getModel(e);if(!a)return null;var s=new RegExp(r,o);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});var u=a.getValueInRange(t),c=a.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},s),l=null;null!==c&&(l=a.getValueInRange(c));var h=d.BasicInplaceReplace.INSTANCE.navigateValueSet(t,u,c,l,n);return i.TPromise.as(h)},e.prototype.loadForeignModule=function(e,t){var r=this,o={getMirrorModels:function(){return r._getModels()}};if(this._foreignModuleFactory){this._foreignModule=this._foreignModuleFactory(o,t);var a=[];for(var s in this._foreignModule)"function"==typeof this._foreignModule[s]&&a.push(s);return i.TPromise.as(a)}return new i.TPromise(function(i,a){Promise.resolve().then(function(){var a=[n("./node_modules/monaco-editor/esm/vs/editor/common/services sync recursive")(e)];(function(e){r._foreignModule=e.create(o,t);var n=[];for(var a in r._foreignModule)"function"==typeof r._foreignModule[a]&&n.push(a);i(n)}).apply(null,a)}).catch(a.bind(this))})},e.prototype.fmr=function(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return i.TPromise.wrapError(new Error("Missing requestHandler or method: "+e));try{return i.TPromise.as(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return i.TPromise.wrapError(e)}},e._diffLimit=1e4,e._suggestionsLimit=1e4,e}(),_=function(e){function t(t){var n=e.call(this,t)||this;return n._models=Object.create(null),n}return m(t,e),t.prototype.dispose=function(){this._models=Object.create(null)},t.prototype._getModel=function(e){return this._models[e]},t.prototype._getModels=function(){var e=this,t=[];return Object.keys(this._models).forEach(function(n){return t.push(e._models[n])}),t},t.prototype.acceptNewModel=function(e){this._models[e.url]=new g(r.default.parse(e.url),e.lines,e.EOL,e.versionId)},t.prototype.acceptModelChanged=function(e,t){this._models[e]&&this._models[e].onEvents(t)},t.prototype.acceptRemovedModel=function(e){this._models[e]&&delete this._models[e]},t}(v);function b(){return new _(null)}"function"==typeof importScripts&&(p.globals.monaco=Object(f.createMonacoBaseAPI)())},"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js ***!
  \**************************************************************************************/
/*! exports provided: Severity, MarkerSeverity, KeyMod, KeyCode, createMonacoBaseAPI */function(e,t,n){"use strict";n.r(t),n.d(t,"Severity",function(){return r}),n.d(t,"MarkerSeverity",function(){return i}),n.d(t,"KeyMod",function(){return m}),n.d(t,"KeyCode",function(){return p}),n.d(t,"createMonacoBaseAPI",function(){return g});var r,i,o=n(/*! ../../../base/common/event.js */"./node_modules/monaco-editor/esm/vs/base/common/event.js"),a=n(/*! ../../../base/common/keyCodes.js */"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js"),s=n(/*! ../core/position.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js"),u=n(/*! ../core/range.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js"),c=n(/*! ../core/selection.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"),l=n(/*! ../../../base/common/winjs.base.js */"./node_modules/monaco-editor/esm/vs/base/common/winjs.base.js"),d=n(/*! ../../../base/common/cancellation.js */"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js"),h=n(/*! ../core/token.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/token.js"),f=n(/*! ../../../base/common/uri.js */"./node_modules/monaco-editor/esm/vs/base/common/uri.js");!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(r||(r={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(i||(i={}));var p,m=function(){function e(){}return e.chord=function(e,t){return Object(a.KeyChord)(e,t)},e.CtrlCmd=2048,e.Shift=1024,e.Alt=512,e.WinCtrl=256,e}();function g(){return{editor:void 0,languages:void 0,CancellationTokenSource:d.CancellationTokenSource,Emitter:o.Emitter,KeyCode:p,KeyMod:m,Position:s.Position,Range:u.Range,Selection:c.Selection,SelectionDirection:c.SelectionDirection,Severity:r,MarkerSeverity:i,Promise:l.TPromise,Uri:f.default,Token:h.Token}}!function(e){e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(p||(p={}))},"./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js ***!
  \****************************************************************************************/
/*! exports provided: PrefixSumIndexOfResult, PrefixSumComputer, PrefixSumComputerWithCache */function(e,t,n){"use strict";n.r(t),n.d(t,"PrefixSumIndexOfResult",function(){return i}),n.d(t,"PrefixSumComputer",function(){return o}),n.d(t,"PrefixSumComputerWithCache",function(){return a});var r=n(/*! ../core/uint.js */"./node_modules/monaco-editor/esm/vs/editor/common/core/uint.js"),i=function(){return function(e,t){this.index=e,this.remainder=t}}(),o=function(){function e(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}return e.prototype.getCount=function(){return this.values.length},e.prototype.insertValues=function(e,t){e=Object(r.toUint32)(e);var n=this.values,i=this.prefixSum,o=t.length;return 0!==o&&(this.values=new Uint32Array(n.length+o),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+o),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.changeValue=function(e,t){return e=Object(r.toUint32)(e),t=Object(r.toUint32)(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)},e.prototype.removeValues=function(e,t){e=Object(r.toUint32)(e),t=Object(r.toUint32)(t);var n=this.values,i=this.prefixSum;if(e>=n.length)return!1;var o=n.length-e;return t>=o&&(t=o),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)},e.prototype.getTotalValue=function(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)},e.prototype.getAccumulatedValue=function(e){return e<0?0:(e=Object(r.toUint32)(e),this._getAccumulatedValue(e))},e.prototype._getAccumulatedValue=function(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];var t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(var n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]},e.prototype.getIndexOf=function(e){e=Math.floor(e),this.getTotalValue();for(var t,n,r,o=0,a=this.values.length-1;o<=a;)if(t=o+(a-o)/2|0,e<(r=(n=this.prefixSum[t])-this.values[t]))a=t-1;else{if(!(e>=n))break;o=t+1}return new i(t,e-r)},e}(),a=function(){function e(e){this._cacheAccumulatedValueStart=0,this._cache=null,this._actual=new o(e),this._bustCache()}return e.prototype._bustCache=function(){this._cacheAccumulatedValueStart=0,this._cache=null},e.prototype.insertValues=function(e,t){this._actual.insertValues(e,t)&&this._bustCache()},e.prototype.changeValue=function(e,t){this._actual.changeValue(e,t)&&this._bustCache()},e.prototype.removeValues=function(e,t){this._actual.removeValues(e,t)&&this._bustCache()},e.prototype.getTotalValue=function(){return this._actual.getTotalValue()},e.prototype.getAccumulatedValue=function(e){return this._actual.getAccumulatedValue(e)},e.prototype.getIndexOf=function(e){if(e=Math.floor(e),null!==this._cache){var t=e-this._cacheAccumulatedValueStart;if(t>=0&&t<this._cache.length)return this._cache[t]}return this._actual.getIndexOf(e)},e.prototype.warmUpCache=function(e,t){for(var n=[],r=e;r<=t;r++)n[r-e]=this.getIndexOf(r);this._cache=n,this._cacheAccumulatedValueStart=e},e}()},"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/*! exports provided: initialize */function(e,t,n){"use strict";n.r(t),n.d(t,"initialize",function(){return a});var r=n(/*! ./common/services/editorSimpleWorker.js */"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"),i=n(/*! ../base/common/worker/simpleWorker.js */"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"),o=!1;function a(e){if(!o){o=!0;var t=new r.EditorSimpleWorkerImpl(e),n=new i.SimpleWorkerServer(function(e){self.postMessage(e)},t);self.onmessage=function(e){n.onmessage(e.data)}}}self.onmessage=function(e){o||a(null)}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js ***!
  \********************************************************************************************************************/
/*! no static exports found */function(e,t,n){var r;!function(){var n=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var r=n(2).mergeOpts,i=n(1),o=n(3).Output,a=i.lineBreak,s=i.allLineBreaks;e.exports.Beautifier=function(e,t){t=r(t=t||{},"css"),e=e||"";var n=0,i=t.indent_size?parseInt(t.indent_size,10):4,u=t.indent_char||" ",c=void 0!==t.preserve_newlines&&t.preserve_newlines,l=void 0===t.selector_separator_newline||t.selector_separator_newline,d=void 0!==t.end_with_newline&&t.end_with_newline,h=void 0===t.newline_between_rules||t.newline_between_rules,f=void 0!==t.space_around_combinator&&t.space_around_combinator;f=f||void 0!==t.space_around_selector_separator&&t.space_around_selector_separator;var p=t.eol?t.eol:"auto";t.indent_with_tabs&&(u="\t",i=1),"auto"===p&&(p="\n",e&&a.test(e||"")&&(p=e.match(a)[0])),p=p.replace(/\\r/,"\r").replace(/\\n/,"\n");var m,g=/^\s+$/,v=-1,_=0;function b(){return(m=e.charAt(++v))||""}function y(t){var n,r=v;return t&&C(),n=e.charAt(v+1)||"",v=r-1,b(),n}function w(t){for(var n=v;b();)if("\\"===m)b();else{if(-1!==t.indexOf(m))break;if("\n"===m)break}return e.substring(n,v+1)}function T(e){var t=v,n=w(e);return v=t-1,b(),n}function C(e){for(var t=0;g.test(y());)b(),"\n"===m&&e&&c&&(P.add_new_line(!0),t++);return n=t,t}function S(){var e="";for(m&&g.test(m)&&(e=m);g.test(b());)e+=m;return e}function E(){var t=v,n="/"===y();for(b();b();){if(!n&&"*"===m&&"/"===y()){b();break}if(n&&"\n"===m)return e.substring(t,v)}return e.substring(t,v)+m}function k(t){return e.substring(v-t.length,v).toLowerCase()===t}function x(){for(var t=0,n=v+1;n<e.length;n++){var r=e.charAt(n);if("{"===r)return!0;if("("===r)t+=1;else if(")"===r){if(0===t)return!1;t-=1}else if(";"===r||"}"===r)return!1}return!1}var A="",L=0;if((e=e.replace(s,"\n"))&&e.length){for(;" "===e.charAt(L)||"\t"===e.charAt(L);)L+=1;A=e.substring(0,L),js_source_text=e.substring(L)}var N,O,P,D=new Array(i+1).join(u);function j(e){P.just_added_newline()&&P.set_indent(N),P.add_token(e)}function I(e){e&&(P.space_before_token=!0)}this.beautify=function(){P=new o(D,A),N=0,O=0,v=-1,m=null,_=0;for(var e=!1,t=!1,r=!1,i="",a="";;){var s=S(),u=""!==s,c=-1!==s.indexOf("\n");if(a=i,i=m,!m)break;if("/"===m&&"*"===y()){var L=0===N;(c||L)&&P.add_new_line(),j(E()),P.add_new_line(),L&&P.add_new_line(!0)}else if("/"===m&&"/"===y())c||"{"===a||P.trim(!0),P.space_before_token=!0,j(E()),P.add_new_line();else if("@"===m)if(I(u),"{"===y())j(w("}"));else{j(m);var q=T(": ,;{}()[]/='\"");q.match(/[ :]$/)&&(b(),j(q=w(": ").replace(/\s$/,"")),P.space_before_token=!0),(q=q.replace(/\s$/,""))in this.NESTED_AT_RULE&&(O+=1,q in this.CONDITIONAL_GROUP_RULE&&(r=!0))}else"#"===m&&"{"===y()?(I(u),j(w("}"))):"{"===m?"}"===y(!0)?(C(),b(),P.space_before_token=!0,j("{}"),C(!0)||P.add_new_line(),n<2&&h&&0===N&&P.add_new_line(!0)):(N++,P.space_before_token=!0,j(m),C(!0)||P.add_new_line(),r?(r=!1,e=N>O):e=N>=O):"}"===m?(N>0&&N--,P.add_new_line(),j(m),e=!1,t=!1,O&&O--,C(!0)||P.add_new_line(),n<2&&h&&0===N&&P.add_new_line(!0)):":"===m?(C(),!e&&!r||k("&")||x()||k("(")?(k(" ")&&(P.space_before_token=!0),":"===y()?(b(),j("::")):j(":")):(j(":"),t||(t=!0,P.space_before_token=!0))):'"'===m||"'"===m?(I(u),j(w(m))):";"===m?(t=!1,j(m),C(!0)||P.add_new_line()):"("===m?k("url")?(j(m),C(),b()&&(")"!==m&&'"'!==m&&"'"!==m?j(w(")")):v--)):(_++,I(u),j(m),C()):")"===m?(j(m),_--):","===m?(j(m),!C(!0)&&l&&!t&&_<1?P.add_new_line():P.space_before_token=!0):(">"===m||"+"===m||"~"===m)&&!t&&_<1?f?(P.space_before_token=!0,j(m),P.space_before_token=!0):(j(m),C(),m&&g.test(m)&&(m="")):"]"===m?j(m):"["===m?(I(u),j(m)):"="===m?(C(),j("="),g.test(m)&&(m="")):(I(u),j(m))}return P.get_code(d,p)},this.NESTED_AT_RULE={"@page":!0,"@font-face":!0,"@keyframes":!0,"@media":!0,"@supports":!0,"@document":!0},this.CONDITIONAL_GROUP_RULE={"@media":!0,"@supports":!0,"@document":!0}}},function(e,t){var n="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",r=new RegExp("["+n+"]"),i=new RegExp("["+n+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]");t.newline=/[\n\r\u2028\u2029]/,t.lineBreak=new RegExp("\r\n|"+t.newline.source),t.allLineBreaks=new RegExp(t.lineBreak.source,"g"),t.isIdentifierStart=function(e){return e<65?36===e||64===e:e<91||(e<97?95===e:e<123||e>=170&&r.test(String.fromCharCode(e)))},t.isIdentifierChar=function(e){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||e>=170&&i.test(String.fromCharCode(e))))}},function(e,t){e.exports.mergeOpts=function(e,t){var n,r={};for(n in e)n!==t&&(r[n]=e[n]);if(t in e)for(n in e[t])r[n]=e[t][n];return r}},function(e,t){e.exports.Output=function(e,t){t=t||"",this.indent_cache=[t],this.baseIndentLength=t.length,this.indent_length=e.length,this.raw=!1;var n=[];this.baseIndentString=t,this.indent_string=e,this.previous_line=null,this.current_line=null,this.space_before_token=!1,this.add_outputline=function(){this.previous_line=this.current_line,this.current_line=new function(e){var t=0,n=-1,r=[],i=!0;this.set_indent=function(r){t=e.baseIndentLength+r*e.indent_length,n=r},this.get_character_count=function(){return t},this.is_empty=function(){return i},this.last=function(){return this._empty?null:r[r.length-1]},this.push=function(e){r.push(e),t+=e.length,i=!1},this.pop=function(){var e=null;return i||(e=r.pop(),t-=e.length,i=0===r.length),e},this.remove_indent=function(){n>0&&(n-=1,t-=e.indent_length)},this.trim=function(){for(;" "===this.last();)r.pop(),t-=1;i=0===r.length},this.toString=function(){var t="";return this._empty||(n>=0&&(t=e.indent_cache[n]),t+=r.join("")),t}}(this),n.push(this.current_line)},this.add_outputline(),this.get_line_number=function(){return n.length},this.add_new_line=function(e){return!(1===this.get_line_number()&&this.just_added_newline()||!e&&this.just_added_newline()||(this.raw||this.add_outputline(),0))},this.get_code=function(e,t){var r=n.join("\n").replace(/[\r\n\t ]+$/,"");return e&&(r+="\n"),"\n"!==t&&(r=r.replace(/[\n]/g,t)),r},this.set_indent=function(e){if(n.length>1){for(;e>=this.indent_cache.length;)this.indent_cache.push(this.indent_cache[this.indent_cache.length-1]+this.indent_string);return this.current_line.set_indent(e),!0}return this.current_line.set_indent(0),!1},this.add_raw_token=function(e){for(var t=0;t<e.newlines;t++)this.add_outputline();this.current_line.push(e.whitespace_before),this.current_line.push(e.text),this.space_before_token=!1},this.add_token=function(e){this.add_space_before_token(),this.current_line.push(e)},this.add_space_before_token=function(){this.space_before_token&&!this.just_added_newline()&&this.current_line.push(" "),this.space_before_token=!1},this.remove_indent=function(e){for(var t=n.length;e<t;)n[e].remove_indent(),e++},this.trim=function(r){for(r=void 0!==r&&r,this.current_line.trim(e,t);r&&n.length>1&&this.current_line.is_empty();)n.pop(),this.current_line=n[n.length-1],this.current_line.trim();this.previous_line=n.length>1?n[n.length-2]:null},this.just_added_newline=function(){return this.current_line.is_empty()},this.just_added_blankline=function(){return!!this.just_added_newline()&&(1===n.length||n[n.length-2].is_empty())}}},function(e,t,n){var r=n(0).Beautifier;e.exports=function(e,t){return new r(e,t).beautify()}}]);void 0===(r=function(){return{css_beautify:n}}.apply(t,[]))||(e.exports=r)}()},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-html.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-html.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */function(e,t,n){var r,i;!function(){var o=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){var r=n(2).mergeOpts,i=n(1),o=i.lineBreak,a=i.allLineBreaks;function s(e){return e.replace(/\s+$/g,"")}e.exports.Beautifier=function(e,t,n,i){var u,c,l,d,h,f,p,m,g,v,_,b,y,w,T,C,S,E,k,x,A;e=e||"",void 0!==(t=r(t=t||{},"html")).wrap_line_length&&0!==parseInt(t.wrap_line_length,10)||void 0===t.max_char||0===parseInt(t.max_char,10)||(t.wrap_line_length=t.max_char),c=void 0!==t.indent_inner_html&&t.indent_inner_html,l=void 0===t.indent_body_inner_html||t.indent_body_inner_html,d=void 0===t.indent_head_inner_html||t.indent_head_inner_html,h=void 0===t.indent_size?4:parseInt(t.indent_size,10),f=void 0===t.indent_char?" ":t.indent_char,m=void 0===t.brace_style?"collapse":t.brace_style,p=0===parseInt(t.wrap_line_length,10)?32786:parseInt(t.wrap_line_length||250,10),g=t.unformatted||["a","abbr","area","audio","b","bdi","bdo","br","button","canvas","cite","code","data","datalist","del","dfn","em","embed","i","iframe","img","input","ins","kbd","keygen","label","map","mark","math","meter","noscript","object","output","progress","q","ruby","s","samp","select","small","span","strong","sub","sup","svg","template","textarea","time","u","var","video","wbr","text","acronym","address","big","dt","ins","strike","tt"],v=t.content_unformatted||["pre"],_=void 0===t.preserve_newlines||t.preserve_newlines,b=_?isNaN(parseInt(t.max_preserve_newlines,10))?32786:parseInt(t.max_preserve_newlines,10):0,y=void 0!==t.indent_handlebars&&t.indent_handlebars,w=void 0===t.wrap_attributes?"auto":t.wrap_attributes,T=isNaN(parseInt(t.wrap_attributes_indent_size,10))?h:parseInt(t.wrap_attributes_indent_size,10),C="force"===w.substr(0,"force".length),S="force-expand-multiline"===w,E="force-aligned"===w,k=void 0!==t.end_with_newline&&t.end_with_newline,x="object"==typeof t.extra_liners&&t.extra_liners?t.extra_liners.concat():"string"==typeof t.extra_liners?t.extra_liners.split(","):"head,body,/html".split(","),A=t.eol?t.eol:"auto",t.indent_with_tabs&&(f="\t",h=1),"auto"===A&&(A="\n",e&&o.test(e||"")&&(A=e.match(o)[0])),A=A.replace(/\\r/,"\r").replace(/\\n/,"\n"),e=e.replace(a,"\n"),this.beautify=function(){for((u=new function(){return this.pos=0,this.token="",this.current_mode="CONTENT",this.tags={parent:"parent1",parentcount:1,parent1:""},this.tag_type="",this.token_text=this.last_token=this.last_text=this.token_type="",this.newlines=0,this.indent_content=c,this.indent_body_inner_html=l,this.indent_head_inner_html=d,this.Utils={whitespace:"\n\r\t ".split(""),single_token:t.void_elements||["area","base","br","col","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr","!doctype","?xml","?php","basefont","isindex"],extra_liners:x,in_array:function(e,t){for(var n=0;n<t.length;n++)if(e===t[n])return!0;return!1}},this.is_whitespace=function(e){for(var t=0;t<e.length;t++)if(!this.Utils.in_array(e.charAt(t),this.Utils.whitespace))return!1;return!0},this.traverse_whitespace=function(){var e="";if(e=this.input.charAt(this.pos),this.Utils.in_array(e,this.Utils.whitespace)){for(this.newlines=0;this.Utils.in_array(e,this.Utils.whitespace);)_&&"\n"===e&&this.newlines<=b&&(this.newlines+=1),this.pos++,e=this.input.charAt(this.pos);return!0}return!1},this.space_or_wrap=function(e){return this.line_char_count>=this.wrap_line_length?(this.print_newline(!1,e),this.print_indentation(e),!0):(this.line_char_count++,e.push(" "),!1)},this.get_content=function(){for(var e="",t=[],n=0;"<"!==this.input.charAt(this.pos)||2===n;){if(this.pos>=this.input.length)return t.length?t.join(""):["","TK_EOF"];if(n<2&&this.traverse_whitespace())this.space_or_wrap(t);else{if(e=this.input.charAt(this.pos),y){if("{"===e?n+=1:n<2&&(n=0),"}"===e&&n>0&&0==n--)break;var r=this.input.substr(this.pos,3);if("{{#"===r||"{{/"===r)break;if("{{!"===r)return[this.get_tag(),"TK_TAG_HANDLEBARS_COMMENT"];if("{{"===this.input.substr(this.pos,2)&&"{{else}}"===this.get_tag(!0))break}this.pos++,this.line_char_count++,t.push(e)}}return t.length?t.join(""):""},this.get_contents_to=function(e){if(this.pos===this.input.length)return["","TK_EOF"];var t="",n=new RegExp("</"+e+"\\s*>","igm");n.lastIndex=this.pos;var r=n.exec(this.input),i=r?r.index:this.input.length;return this.pos<i&&(t=this.input.substring(this.pos,i),this.pos=i),t},this.record_tag=function(e){this.tags[e+"count"]?(this.tags[e+"count"]++,this.tags[e+this.tags[e+"count"]]=this.indent_level):(this.tags[e+"count"]=1,this.tags[e+this.tags[e+"count"]]=this.indent_level),this.tags[e+this.tags[e+"count"]+"parent"]=this.tags.parent,this.tags.parent=e+this.tags[e+"count"]},this.retrieve_tag=function(e){if(this.tags[e+"count"]){for(var t=this.tags.parent;t&&e+this.tags[e+"count"]!==t;)t=this.tags[t+"parent"];t&&(this.indent_level=this.tags[e+this.tags[e+"count"]],this.tags.parent=this.tags[t+"parent"]),delete this.tags[e+this.tags[e+"count"]+"parent"],delete this.tags[e+this.tags[e+"count"]],1===this.tags[e+"count"]?delete this.tags[e+"count"]:this.tags[e+"count"]--}},this.indent_to_tag=function(e){if(this.tags[e+"count"]){for(var t=this.tags.parent;t&&e+this.tags[e+"count"]!==t;)t=this.tags[t+"parent"];t&&(this.indent_level=this.tags[e+this.tags[e+"count"]])}},this.get_tag=function(e){var t,n,r,i="",o=[],a="",s=!1,u=!0,c=!1,l=this.pos,d=this.line_char_count,h=!1;e=void 0!==e&&e;do{if(this.pos>=this.input.length)return e&&(this.pos=l,this.line_char_count=d),o.length?o.join(""):["","TK_EOF"];if(i=this.input.charAt(this.pos),this.pos++,this.Utils.in_array(i,this.Utils.whitespace))s=!0;else{if("'"!==i&&'"'!==i||(i+=this.get_unformatted(i),s=!0),"="===i&&(s=!1),r=this.input.substr(this.pos-1),!S||!c||h||">"!==i&&"/"!==i||r.match(/^\/?\s*>/)&&(s=!1,h=!0,this.print_newline(!1,o),this.print_indentation(o)),o.length&&"="!==o[o.length-1]&&">"!==i&&s){var f=this.space_or_wrap(o)&&"/"!==i&&!C;if(s=!1,C&&"/"!==i){var p=!1;S&&u&&(p=!(null!==r.match(/^\S*(="([^"]|\\")*")?\s*\/?\s*>/))),u&&!p||(this.print_newline(!1,o),this.print_indentation(o),f=!0)}if(f){c=!0;var m=T;E&&(m=o.indexOf(" ")+1);for(var _=0;_<m;_++)o.push(" ")}if(u)for(var b=0;b<o.length;b++)if(" "===o[b]){u=!1;break}}if(y&&"<"===n&&i+this.input.charAt(this.pos)==="{{"&&(i+=this.get_unformatted("}}"),o.length&&" "!==o[o.length-1]&&"<"!==o[o.length-1]&&(i=" "+i),s=!0),"<"!==i||n||(t=this.pos-1,n="<"),y&&!n&&o.length>=2&&"{"===o[o.length-1]&&"{"===o[o.length-2]&&(t="#"===i||"/"===i||"!"===i?this.pos-3:this.pos-2,n="{"),this.line_char_count++,o.push(i),o[1]&&("!"===o[1]||"?"===o[1]||"%"===o[1])){o=[this.get_comment(t)];break}if(y&&o[1]&&"{"===o[1]&&o[2]&&"!"===o[2]){o=[this.get_comment(t)];break}if(y&&"{"===n&&o.length>2&&"}"===o[o.length-2]&&"}"===o[o.length-1])break}}while(">"!==i);var w,k,x=o.join("");w=-1!==x.indexOf(" ")?x.indexOf(" "):-1!==x.indexOf("\n")?x.indexOf("\n"):"{"===x.charAt(0)?x.indexOf("}"):x.indexOf(">"),k="<"!==x.charAt(0)&&y?"#"===x.charAt(2)?3:2:1;var A=x.substring(k,w).toLowerCase();return"/"===x.charAt(x.length-2)||this.Utils.in_array(A,this.Utils.single_token)?e||(this.tag_type="SINGLE"):y&&"{"===x.charAt(0)&&"else"===A?e||(this.indent_to_tag("if"),this.tag_type="HANDLEBARS_ELSE",this.indent_content=!0,this.traverse_whitespace()):this.is_unformatted(A,g)||this.is_unformatted(A,v)?(a=this.get_unformatted("</"+A+">",x),o.push(a),this.pos,this.tag_type="SINGLE"):"script"===A&&(-1===x.search("type")||x.search("type")>-1&&x.search(/\b(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/)>-1)?e||(this.record_tag(A),this.tag_type="SCRIPT"):"style"===A&&(-1===x.search("type")||x.search("type")>-1&&x.search("text/css")>-1)?e||(this.record_tag(A),this.tag_type="STYLE"):"!"===A.charAt(0)?e||(this.tag_type="SINGLE",this.traverse_whitespace()):e||("/"===A.charAt(0)?(this.retrieve_tag(A.substring(1)),this.tag_type="END"):(this.record_tag(A),"html"!==A.toLowerCase()&&(this.indent_content=!0),this.tag_type="START"),this.traverse_whitespace()&&this.space_or_wrap(o),this.Utils.in_array(A,this.Utils.extra_liners)&&(this.print_newline(!1,this.output),this.output.length&&"\n"!==this.output[this.output.length-2]&&this.print_newline(!0,this.output))),e&&(this.pos=l,this.line_char_count=d),o.join("")},this.get_comment=function(e){var t="",n=">",r=!1;this.pos=e;var i=this.input.charAt(this.pos);for(this.pos++;this.pos<=this.input.length&&((t+=i).charAt(t.length-1)!==n.charAt(n.length-1)||-1===t.indexOf(n));)!r&&t.length<10&&(0===t.indexOf("<![if")?(n="<![endif]>",r=!0):0===t.indexOf("<![cdata[")?(n="]]>",r=!0):0===t.indexOf("<![")?(n="]>",r=!0):0===t.indexOf("\x3c!--")?(n="--\x3e",r=!0):0===t.indexOf("{{!--")?(n="--}}",r=!0):0===t.indexOf("{{!")?5===t.length&&-1===t.indexOf("{{!--")&&(n="}}",r=!0):0===t.indexOf("<?")?(n="?>",r=!0):0===t.indexOf("<%")&&(n="%>",r=!0)),i=this.input.charAt(this.pos),this.pos++;return t},this.get_unformatted=function(e,t){if(t&&-1!==t.toLowerCase().indexOf(e))return"";var n="",r="",i=!0,o=function(e){var t="";return{add:function(n){var r=t+n.toLowerCase();t=r.length<=e.length?r:r.substr(r.length-e.length,e.length)},doesNotMatch:function(){return-1===t.indexOf(e)}}}(e);do{if(this.pos>=this.input.length)return r;if(n=this.input.charAt(this.pos),this.pos++,this.Utils.in_array(n,this.Utils.whitespace)){if(!i){this.line_char_count--;continue}if("\n"===n||"\r"===n){r+="\n",this.line_char_count=0;continue}}r+=n,o.add(n),this.line_char_count++,i=!0,y&&"{"===n&&r.length&&"{"===r.charAt(r.length-2)&&(r+=this.get_unformatted("}}"))}while(o.doesNotMatch());return r},this.get_token=function(){var e;if("TK_TAG_SCRIPT"===this.last_token||"TK_TAG_STYLE"===this.last_token){var t=this.last_token.substr(7);return"string"!=typeof(e=this.get_contents_to(t))?e:[e,"TK_"+t]}return"CONTENT"===this.current_mode?"string"!=typeof(e=this.get_content())?e:[e,"TK_CONTENT"]:"TAG"===this.current_mode?"string"!=typeof(e=this.get_tag())?e:[e,"TK_TAG_"+this.tag_type]:void 0},this.get_full_indent=function(e){return(e=this.indent_level+e||0)<1?"":Array(e+1).join(this.indent_string)},this.is_unformatted=function(e,t){if(!this.Utils.in_array(e,t))return!1;if("a"!==e.toLowerCase()||!this.Utils.in_array("a",t))return!0;var n=(this.get_tag(!0)||"").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);return!(n&&!this.Utils.in_array(n[1],t))},this.printer=function(e,t,n,r,i){this.input=e||"",this.input=this.input.replace(/\r\n|[\r\u2028\u2029]/g,"\n"),this.output=[],this.indent_character=t,this.indent_string="",this.indent_size=n,this.brace_style=i,this.indent_level=0,this.wrap_line_length=r,this.line_char_count=0;for(var o=0;o<this.indent_size;o++)this.indent_string+=this.indent_character;this.print_newline=function(e,t){this.line_char_count=0,t&&t.length&&(e||"\n"!==t[t.length-1])&&("\n"!==t[t.length-1]&&(t[t.length-1]=s(t[t.length-1])),t.push("\n"))},this.print_indentation=function(e){for(var t=0;t<this.indent_level;t++)e.push(this.indent_string),this.line_char_count+=this.indent_string.length},this.print_token=function(e){this.is_whitespace(e)&&!this.output.length||((e||""!==e)&&this.output.length&&"\n"===this.output[this.output.length-1]&&(this.print_indentation(this.output),e=function(e){return e.replace(/^\s+/g,"")}(e)),this.print_token_raw(e))},this.print_token_raw=function(e){this.newlines>0&&(e=s(e)),e&&""!==e&&(e.length>1&&"\n"===e.charAt(e.length-1)?(this.output.push(e.slice(0,-1)),this.print_newline(!1,this.output)):this.output.push(e));for(var t=0;t<this.newlines;t++)this.print_newline(t>0,this.output);this.newlines=0},this.indent=function(){this.indent_level++},this.unindent=function(){this.indent_level>0&&this.indent_level--}},this}).printer(e,f,h,p,m);;){var r=u.get_token();if(u.token_text=r[0],u.token_type=r[1],"TK_EOF"===u.token_type)break;switch(u.token_type){case"TK_TAG_START":u.print_newline(!1,u.output),u.print_token(u.token_text),u.indent_content&&(!u.indent_body_inner_html&&u.token_text.match(/<body(?:.*)>/)||!u.indent_head_inner_html&&u.token_text.match(/<head(?:.*)>/)||u.indent(),u.indent_content=!1),u.current_mode="CONTENT";break;case"TK_TAG_STYLE":case"TK_TAG_SCRIPT":u.print_newline(!1,u.output),u.print_token(u.token_text),u.current_mode="CONTENT";break;case"TK_TAG_END":if("TK_CONTENT"===u.last_token&&""===u.last_text){var o=(u.token_text.match(/\w+/)||[])[0],a=null;u.output.length&&(a=u.output[u.output.length-1].match(/(?:<|{{#)\s*(\w+)/)),(null===a||a[1]!==o&&!u.Utils.in_array(a[1],g))&&u.print_newline(!1,u.output)}u.print_token(u.token_text),u.current_mode="CONTENT";break;case"TK_TAG_SINGLE":var w=u.token_text.match(/^\s*<([a-z-]+)/i);w&&u.Utils.in_array(w[1],g)||u.print_newline(!1,u.output),u.print_token(u.token_text),u.current_mode="CONTENT";break;case"TK_TAG_HANDLEBARS_ELSE":for(var L=!1,N=u.output.length-1;N>=0&&"\n"!==u.output[N];N--)if(u.output[N].match(/{{#if/)){L=!0;break}L||u.print_newline(!1,u.output),u.print_token(u.token_text),u.indent_content&&(u.indent(),u.indent_content=!1),u.current_mode="CONTENT";break;case"TK_TAG_HANDLEBARS_COMMENT":case"TK_CONTENT":u.print_token(u.token_text),u.current_mode="TAG";break;case"TK_STYLE":case"TK_SCRIPT":if(""!==u.token_text){u.print_newline(!1,u.output);var O,P=u.token_text,D=1;"TK_SCRIPT"===u.token_type?O="function"==typeof n&&n:"TK_STYLE"===u.token_type&&(O="function"==typeof i&&i),"keep"===t.indent_scripts?D=0:"separate"===t.indent_scripts&&(D=-u.indent_level);var j=u.get_full_indent(D);if(O){var I=function(){this.eol="\n"};I.prototype=t;var q=new I;P=O(P.replace(/^\s*/,j),q)}else{var M=P.match(/^\s*/)[0].match(/[^\n\r]*$/)[0].split(u.indent_string).length-1,R=u.get_full_indent(D-M);P=P.replace(/^\s*/,j).replace(/\r\n|\r|\n/g,"\n"+R).replace(/\s+$/,"")}P&&(u.print_token_raw(P),u.print_newline(!0,u.output))}u.current_mode="TAG";break;default:""!==u.token_text&&u.print_token(u.token_text)}u.last_token=u.token_type,u.last_text=u.token_text}var U=u.output.join("").replace(/[\r\n\t ]+$/,"");return k&&(U+="\n"),"\n"!==A&&(U=U.replace(/[\n]/g,A)),U}}},function(e,t){var n="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",r=new RegExp("["+n+"]"),i=new RegExp("["+n+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]");t.newline=/[\n\r\u2028\u2029]/,t.lineBreak=new RegExp("\r\n|"+t.newline.source),t.allLineBreaks=new RegExp(t.lineBreak.source,"g"),t.isIdentifierStart=function(e){return e<65?36===e||64===e:e<91||(e<97?95===e:e<123||e>=170&&r.test(String.fromCharCode(e)))},t.isIdentifierChar=function(e){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||e>=170&&i.test(String.fromCharCode(e))))}},function(e,t){e.exports.mergeOpts=function(e,t){var n,r={};for(n in e)n!==t&&(r[n]=e[n]);if(t in e)for(n in e[t])r[n]=e[t][n];return r}},function(e,t,n){var r=n(0).Beautifier;e.exports=function(e,t,n,i){return new r(e,t,n,i).beautify()}}]);r=[n,n(/*! ./beautify */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify.js"),n(/*! ./beautify-css */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js")],void 0===(i=function(e){var t=n(/*! ./beautify */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify.js"),r=n(/*! ./beautify-css */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js");return{html_beautify:function(e,n){return o(e,n,t.js_beautify,r.css_beautify)}}}.apply(t,r))||(e.exports=i)}()},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify.js ***!
  \****************************************************************************************************************/
/*! exports provided: js_beautify */function(e,t,n){"use strict";function r(e,t){return e}n.r(t),n.d(t,"js_beautify",function(){return r})},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/htmlLanguageService.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/htmlLanguageService.js ***!
  \******************************************************************************************************************/
/*! exports provided: TextDocument, Position, CompletionItem, CompletionList, Range, SymbolInformation, Diagnostic, TextEdit, DocumentHighlight, FormattingOptions, MarkedString, DocumentLink, TokenType, ScannerState, getLanguageService */function(e,t,n){"use strict";n.r(t),n.d(t,"TokenType",function(){return r}),n.d(t,"ScannerState",function(){return i}),n.d(t,"getLanguageService",function(){return p});var r,i,o=n(/*! ./parser/htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),a=n(/*! ./parser/htmlParser.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlParser.js"),s=n(/*! ./services/htmlCompletion.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlCompletion.js"),u=n(/*! ./services/htmlHover.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHover.js"),c=n(/*! ./services/htmlFormatter.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlFormatter.js"),l=n(/*! ./services/htmlLinks.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlLinks.js"),d=n(/*! ./services/htmlHighlighting.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHighlighting.js"),h=n(/*! ./services/htmlSymbolsProvider.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlSymbolsProvider.js"),f=n(/*! ../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js");function p(){var e=new s.HTMLCompletion;return{createScanner:o.createScanner,parseHTMLDocument:function(e){return Object(a.parse)(e.getText())},doComplete:e.doComplete.bind(e),setCompletionParticipants:e.setCompletionParticipants.bind(e),doHover:u.doHover,format:c.format,findDocumentHighlights:d.findDocumentHighlights,findDocumentLinks:l.findDocumentLinks,findDocumentSymbols:h.findDocumentSymbols,doTagComplete:e.doTagComplete.bind(e)}}n.d(t,"TextDocument",function(){return f.TextDocument}),n.d(t,"Position",function(){return f.Position}),n.d(t,"CompletionItem",function(){return f.CompletionItem}),n.d(t,"CompletionList",function(){return f.CompletionList}),n.d(t,"Range",function(){return f.Range}),n.d(t,"SymbolInformation",function(){return f.SymbolInformation}),n.d(t,"Diagnostic",function(){return f.Diagnostic}),n.d(t,"TextEdit",function(){return f.TextEdit}),n.d(t,"DocumentHighlight",function(){return f.DocumentHighlight}),n.d(t,"FormattingOptions",function(){return f.FormattingOptions}),n.d(t,"MarkedString",function(){return f.MarkedString}),n.d(t,"DocumentLink",function(){return f.DocumentLink}),function(e){e[e.StartCommentTag=0]="StartCommentTag",e[e.Comment=1]="Comment",e[e.EndCommentTag=2]="EndCommentTag",e[e.StartTagOpen=3]="StartTagOpen",e[e.StartTagClose=4]="StartTagClose",e[e.StartTagSelfClose=5]="StartTagSelfClose",e[e.StartTag=6]="StartTag",e[e.EndTagOpen=7]="EndTagOpen",e[e.EndTagClose=8]="EndTagClose",e[e.EndTag=9]="EndTag",e[e.DelimiterAssign=10]="DelimiterAssign",e[e.AttributeName=11]="AttributeName",e[e.AttributeValue=12]="AttributeValue",e[e.StartDoctypeTag=13]="StartDoctypeTag",e[e.Doctype=14]="Doctype",e[e.EndDoctypeTag=15]="EndDoctypeTag",e[e.Content=16]="Content",e[e.Whitespace=17]="Whitespace",e[e.Unknown=18]="Unknown",e[e.Script=19]="Script",e[e.Styles=20]="Styles",e[e.EOS=21]="EOS"}(r||(r={})),function(e){e[e.WithinContent=0]="WithinContent",e[e.AfterOpeningStartTag=1]="AfterOpeningStartTag",e[e.AfterOpeningEndTag=2]="AfterOpeningEndTag",e[e.WithinDoctype=3]="WithinDoctype",e[e.WithinTag=4]="WithinTag",e[e.WithinEndTag=5]="WithinEndTag",e[e.WithinComment=6]="WithinComment",e[e.WithinScriptContent=7]="WithinScriptContent",e[e.WithinStyleContent=8]="WithinStyleContent",e[e.AfterAttributeName=9]="AfterAttributeName",e[e.BeforeAttributeValue=10]="BeforeAttributeValue"}(i||(i={}))},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlEntities.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlEntities.js ***!
  \******************************************************************************************************************/
/*! exports provided: entities */function(e,t,n){"use strict";n.r(t),n.d(t,"entities",function(){return r});var r={"Aacute;":"Á",Aacute:"Á","aacute;":"á",aacute:"á","Abreve;":"Ă","abreve;":"ă","ac;":"∾","acd;":"∿","acE;":"∾̳","Acirc;":"Â",Acirc:"Â","acirc;":"â",acirc:"â","acute;":"´",acute:"´","Acy;":"А","acy;":"а","AElig;":"Æ",AElig:"Æ","aelig;":"æ",aelig:"æ","af;":"⁡","Afr;":"𝔄","afr;":"𝔞","Agrave;":"À",Agrave:"À","agrave;":"à",agrave:"à","alefsym;":"ℵ","aleph;":"ℵ","Alpha;":"Α","alpha;":"α","Amacr;":"Ā","amacr;":"ā","amalg;":"⨿","AMP;":"&",AMP:"&","amp;":"&",amp:"&","And;":"⩓","and;":"∧","andand;":"⩕","andd;":"⩜","andslope;":"⩘","andv;":"⩚","ang;":"∠","ange;":"⦤","angle;":"∠","angmsd;":"∡","angmsdaa;":"⦨","angmsdab;":"⦩","angmsdac;":"⦪","angmsdad;":"⦫","angmsdae;":"⦬","angmsdaf;":"⦭","angmsdag;":"⦮","angmsdah;":"⦯","angrt;":"∟","angrtvb;":"⊾","angrtvbd;":"⦝","angsph;":"∢","angst;":"Å","angzarr;":"⍼","Aogon;":"Ą","aogon;":"ą","Aopf;":"𝔸","aopf;":"𝕒","ap;":"≈","apacir;":"⩯","apE;":"⩰","ape;":"≊","apid;":"≋","apos;":"'","ApplyFunction;":"⁡","approx;":"≈","approxeq;":"≊","Aring;":"Å",Aring:"Å","aring;":"å",aring:"å","Ascr;":"𝒜","ascr;":"𝒶","Assign;":"≔","ast;":"*","asymp;":"≈","asympeq;":"≍","Atilde;":"Ã",Atilde:"Ã","atilde;":"ã",atilde:"ã","Auml;":"Ä",Auml:"Ä","auml;":"ä",auml:"ä","awconint;":"∳","awint;":"⨑","backcong;":"≌","backepsilon;":"϶","backprime;":"‵","backsim;":"∽","backsimeq;":"⋍","Backslash;":"∖","Barv;":"⫧","barvee;":"⊽","Barwed;":"⌆","barwed;":"⌅","barwedge;":"⌅","bbrk;":"⎵","bbrktbrk;":"⎶","bcong;":"≌","Bcy;":"Б","bcy;":"б","bdquo;":"„","becaus;":"∵","Because;":"∵","because;":"∵","bemptyv;":"⦰","bepsi;":"϶","bernou;":"ℬ","Bernoullis;":"ℬ","Beta;":"Β","beta;":"β","beth;":"ℶ","between;":"≬","Bfr;":"𝔅","bfr;":"𝔟","bigcap;":"⋂","bigcirc;":"◯","bigcup;":"⋃","bigodot;":"⨀","bigoplus;":"⨁","bigotimes;":"⨂","bigsqcup;":"⨆","bigstar;":"★","bigtriangledown;":"▽","bigtriangleup;":"△","biguplus;":"⨄","bigvee;":"⋁","bigwedge;":"⋀","bkarow;":"⤍","blacklozenge;":"⧫","blacksquare;":"▪","blacktriangle;":"▴","blacktriangledown;":"▾","blacktriangleleft;":"◂","blacktriangleright;":"▸","blank;":"␣","blk12;":"▒","blk14;":"░","blk34;":"▓","block;":"█","bne;":"=⃥","bnequiv;":"≡⃥","bNot;":"⫭","bnot;":"⌐","Bopf;":"𝔹","bopf;":"𝕓","bot;":"⊥","bottom;":"⊥","bowtie;":"⋈","boxbox;":"⧉","boxDL;":"╗","boxDl;":"╖","boxdL;":"╕","boxdl;":"┐","boxDR;":"╔","boxDr;":"╓","boxdR;":"╒","boxdr;":"┌","boxH;":"═","boxh;":"─","boxHD;":"╦","boxHd;":"╤","boxhD;":"╥","boxhd;":"┬","boxHU;":"╩","boxHu;":"╧","boxhU;":"╨","boxhu;":"┴","boxminus;":"⊟","boxplus;":"⊞","boxtimes;":"⊠","boxUL;":"╝","boxUl;":"╜","boxuL;":"╛","boxul;":"┘","boxUR;":"╚","boxUr;":"╙","boxuR;":"╘","boxur;":"└","boxV;":"║","boxv;":"│","boxVH;":"╬","boxVh;":"╫","boxvH;":"╪","boxvh;":"┼","boxVL;":"╣","boxVl;":"╢","boxvL;":"╡","boxvl;":"┤","boxVR;":"╠","boxVr;":"╟","boxvR;":"╞","boxvr;":"├","bprime;":"‵","Breve;":"˘","breve;":"˘","brvbar;":"¦",brvbar:"¦","Bscr;":"ℬ","bscr;":"𝒷","bsemi;":"⁏","bsim;":"∽","bsime;":"⋍","bsol;":"\\","bsolb;":"⧅","bsolhsub;":"⟈","bull;":"•","bullet;":"•","bump;":"≎","bumpE;":"⪮","bumpe;":"≏","Bumpeq;":"≎","bumpeq;":"≏","Cacute;":"Ć","cacute;":"ć","Cap;":"⋒","cap;":"∩","capand;":"⩄","capbrcup;":"⩉","capcap;":"⩋","capcup;":"⩇","capdot;":"⩀","CapitalDifferentialD;":"ⅅ","caps;":"∩︀","caret;":"⁁","caron;":"ˇ","Cayleys;":"ℭ","ccaps;":"⩍","Ccaron;":"Č","ccaron;":"č","Ccedil;":"Ç",Ccedil:"Ç","ccedil;":"ç",ccedil:"ç","Ccirc;":"Ĉ","ccirc;":"ĉ","Cconint;":"∰","ccups;":"⩌","ccupssm;":"⩐","Cdot;":"Ċ","cdot;":"ċ","cedil;":"¸",cedil:"¸","Cedilla;":"¸","cemptyv;":"⦲","cent;":"¢",cent:"¢","CenterDot;":"·","centerdot;":"·","Cfr;":"ℭ","cfr;":"𝔠","CHcy;":"Ч","chcy;":"ч","check;":"✓","checkmark;":"✓","Chi;":"Χ","chi;":"χ","cir;":"○","circ;":"ˆ","circeq;":"≗","circlearrowleft;":"↺","circlearrowright;":"↻","circledast;":"⊛","circledcirc;":"⊚","circleddash;":"⊝","CircleDot;":"⊙","circledR;":"®","circledS;":"Ⓢ","CircleMinus;":"⊖","CirclePlus;":"⊕","CircleTimes;":"⊗","cirE;":"⧃","cire;":"≗","cirfnint;":"⨐","cirmid;":"⫯","cirscir;":"⧂","ClockwiseContourIntegral;":"∲","CloseCurlyDoubleQuote;":"”","CloseCurlyQuote;":"’","clubs;":"♣","clubsuit;":"♣","Colon;":"∷","colon;":":","Colone;":"⩴","colone;":"≔","coloneq;":"≔","comma;":",","commat;":"@","comp;":"∁","compfn;":"∘","complement;":"∁","complexes;":"ℂ","cong;":"≅","congdot;":"⩭","Congruent;":"≡","Conint;":"∯","conint;":"∮","ContourIntegral;":"∮","Copf;":"ℂ","copf;":"𝕔","coprod;":"∐","Coproduct;":"∐","COPY;":"©",COPY:"©","copy;":"©",copy:"©","copysr;":"℗","CounterClockwiseContourIntegral;":"∳","crarr;":"↵","Cross;":"⨯","cross;":"✗","Cscr;":"𝒞","cscr;":"𝒸","csub;":"⫏","csube;":"⫑","csup;":"⫐","csupe;":"⫒","ctdot;":"⋯","cudarrl;":"⤸","cudarrr;":"⤵","cuepr;":"⋞","cuesc;":"⋟","cularr;":"↶","cularrp;":"⤽","Cup;":"⋓","cup;":"∪","cupbrcap;":"⩈","CupCap;":"≍","cupcap;":"⩆","cupcup;":"⩊","cupdot;":"⊍","cupor;":"⩅","cups;":"∪︀","curarr;":"↷","curarrm;":"⤼","curlyeqprec;":"⋞","curlyeqsucc;":"⋟","curlyvee;":"⋎","curlywedge;":"⋏","curren;":"¤",curren:"¤","curvearrowleft;":"↶","curvearrowright;":"↷","cuvee;":"⋎","cuwed;":"⋏","cwconint;":"∲","cwint;":"∱","cylcty;":"⌭","Dagger;":"‡","dagger;":"†","daleth;":"ℸ","Darr;":"↡","dArr;":"⇓","darr;":"↓","dash;":"‐","Dashv;":"⫤","dashv;":"⊣","dbkarow;":"⤏","dblac;":"˝","Dcaron;":"Ď","dcaron;":"ď","Dcy;":"Д","dcy;":"д","DD;":"ⅅ","dd;":"ⅆ","ddagger;":"‡","ddarr;":"⇊","DDotrahd;":"⤑","ddotseq;":"⩷","deg;":"°",deg:"°","Del;":"∇","Delta;":"Δ","delta;":"δ","demptyv;":"⦱","dfisht;":"⥿","Dfr;":"𝔇","dfr;":"𝔡","dHar;":"⥥","dharl;":"⇃","dharr;":"⇂","DiacriticalAcute;":"´","DiacriticalDot;":"˙","DiacriticalDoubleAcute;":"˝","DiacriticalGrave;":"`","DiacriticalTilde;":"˜","diam;":"⋄","Diamond;":"⋄","diamond;":"⋄","diamondsuit;":"♦","diams;":"♦","die;":"¨","DifferentialD;":"ⅆ","digamma;":"ϝ","disin;":"⋲","div;":"÷","divide;":"÷",divide:"÷","divideontimes;":"⋇","divonx;":"⋇","DJcy;":"Ђ","djcy;":"ђ","dlcorn;":"⌞","dlcrop;":"⌍","dollar;":"$","Dopf;":"𝔻","dopf;":"𝕕","Dot;":"¨","dot;":"˙","DotDot;":"⃜","doteq;":"≐","doteqdot;":"≑","DotEqual;":"≐","dotminus;":"∸","dotplus;":"∔","dotsquare;":"⊡","doublebarwedge;":"⌆","DoubleContourIntegral;":"∯","DoubleDot;":"¨","DoubleDownArrow;":"⇓","DoubleLeftArrow;":"⇐","DoubleLeftRightArrow;":"⇔","DoubleLeftTee;":"⫤","DoubleLongLeftArrow;":"⟸","DoubleLongLeftRightArrow;":"⟺","DoubleLongRightArrow;":"⟹","DoubleRightArrow;":"⇒","DoubleRightTee;":"⊨","DoubleUpArrow;":"⇑","DoubleUpDownArrow;":"⇕","DoubleVerticalBar;":"∥","DownArrow;":"↓","Downarrow;":"⇓","downarrow;":"↓","DownArrowBar;":"⤓","DownArrowUpArrow;":"⇵","DownBreve;":"̑","downdownarrows;":"⇊","downharpoonleft;":"⇃","downharpoonright;":"⇂","DownLeftRightVector;":"⥐","DownLeftTeeVector;":"⥞","DownLeftVector;":"↽","DownLeftVectorBar;":"⥖","DownRightTeeVector;":"⥟","DownRightVector;":"⇁","DownRightVectorBar;":"⥗","DownTee;":"⊤","DownTeeArrow;":"↧","drbkarow;":"⤐","drcorn;":"⌟","drcrop;":"⌌","Dscr;":"𝒟","dscr;":"𝒹","DScy;":"Ѕ","dscy;":"ѕ","dsol;":"⧶","Dstrok;":"Đ","dstrok;":"đ","dtdot;":"⋱","dtri;":"▿","dtrif;":"▾","duarr;":"⇵","duhar;":"⥯","dwangle;":"⦦","DZcy;":"Џ","dzcy;":"џ","dzigrarr;":"⟿","Eacute;":"É",Eacute:"É","eacute;":"é",eacute:"é","easter;":"⩮","Ecaron;":"Ě","ecaron;":"ě","ecir;":"≖","Ecirc;":"Ê",Ecirc:"Ê","ecirc;":"ê",ecirc:"ê","ecolon;":"≕","Ecy;":"Э","ecy;":"э","eDDot;":"⩷","Edot;":"Ė","eDot;":"≑","edot;":"ė","ee;":"ⅇ","efDot;":"≒","Efr;":"𝔈","efr;":"𝔢","eg;":"⪚","Egrave;":"È",Egrave:"È","egrave;":"è",egrave:"è","egs;":"⪖","egsdot;":"⪘","el;":"⪙","Element;":"∈","elinters;":"⏧","ell;":"ℓ","els;":"⪕","elsdot;":"⪗","Emacr;":"Ē","emacr;":"ē","empty;":"∅","emptyset;":"∅","EmptySmallSquare;":"◻","emptyv;":"∅","EmptyVerySmallSquare;":"▫","emsp;":" ","emsp13;":" ","emsp14;":" ","ENG;":"Ŋ","eng;":"ŋ","ensp;":" ","Eogon;":"Ę","eogon;":"ę","Eopf;":"𝔼","eopf;":"𝕖","epar;":"⋕","eparsl;":"⧣","eplus;":"⩱","epsi;":"ε","Epsilon;":"Ε","epsilon;":"ε","epsiv;":"ϵ","eqcirc;":"≖","eqcolon;":"≕","eqsim;":"≂","eqslantgtr;":"⪖","eqslantless;":"⪕","Equal;":"⩵","equals;":"=","EqualTilde;":"≂","equest;":"≟","Equilibrium;":"⇌","equiv;":"≡","equivDD;":"⩸","eqvparsl;":"⧥","erarr;":"⥱","erDot;":"≓","Escr;":"ℰ","escr;":"ℯ","esdot;":"≐","Esim;":"⩳","esim;":"≂","Eta;":"Η","eta;":"η","ETH;":"Ð",ETH:"Ð","eth;":"ð",eth:"ð","Euml;":"Ë",Euml:"Ë","euml;":"ë",euml:"ë","euro;":"€","excl;":"!","exist;":"∃","Exists;":"∃","expectation;":"ℰ","ExponentialE;":"ⅇ","exponentiale;":"ⅇ","fallingdotseq;":"≒","Fcy;":"Ф","fcy;":"ф","female;":"♀","ffilig;":"ﬃ","fflig;":"ﬀ","ffllig;":"ﬄ","Ffr;":"𝔉","ffr;":"𝔣","filig;":"ﬁ","FilledSmallSquare;":"◼","FilledVerySmallSquare;":"▪","fjlig;":"fj","flat;":"♭","fllig;":"ﬂ","fltns;":"▱","fnof;":"ƒ","Fopf;":"𝔽","fopf;":"𝕗","ForAll;":"∀","forall;":"∀","fork;":"⋔","forkv;":"⫙","Fouriertrf;":"ℱ","fpartint;":"⨍","frac12;":"½",frac12:"½","frac13;":"⅓","frac14;":"¼",frac14:"¼","frac15;":"⅕","frac16;":"⅙","frac18;":"⅛","frac23;":"⅔","frac25;":"⅖","frac34;":"¾",frac34:"¾","frac35;":"⅗","frac38;":"⅜","frac45;":"⅘","frac56;":"⅚","frac58;":"⅝","frac78;":"⅞","frasl;":"⁄","frown;":"⌢","Fscr;":"ℱ","fscr;":"𝒻","gacute;":"ǵ","Gamma;":"Γ","gamma;":"γ","Gammad;":"Ϝ","gammad;":"ϝ","gap;":"⪆","Gbreve;":"Ğ","gbreve;":"ğ","Gcedil;":"Ģ","Gcirc;":"Ĝ","gcirc;":"ĝ","Gcy;":"Г","gcy;":"г","Gdot;":"Ġ","gdot;":"ġ","gE;":"≧","ge;":"≥","gEl;":"⪌","gel;":"⋛","geq;":"≥","geqq;":"≧","geqslant;":"⩾","ges;":"⩾","gescc;":"⪩","gesdot;":"⪀","gesdoto;":"⪂","gesdotol;":"⪄","gesl;":"⋛︀","gesles;":"⪔","Gfr;":"𝔊","gfr;":"𝔤","Gg;":"⋙","gg;":"≫","ggg;":"⋙","gimel;":"ℷ","GJcy;":"Ѓ","gjcy;":"ѓ","gl;":"≷","gla;":"⪥","glE;":"⪒","glj;":"⪤","gnap;":"⪊","gnapprox;":"⪊","gnE;":"≩","gne;":"⪈","gneq;":"⪈","gneqq;":"≩","gnsim;":"⋧","Gopf;":"𝔾","gopf;":"𝕘","grave;":"`","GreaterEqual;":"≥","GreaterEqualLess;":"⋛","GreaterFullEqual;":"≧","GreaterGreater;":"⪢","GreaterLess;":"≷","GreaterSlantEqual;":"⩾","GreaterTilde;":"≳","Gscr;":"𝒢","gscr;":"ℊ","gsim;":"≳","gsime;":"⪎","gsiml;":"⪐","GT;":">",GT:">","Gt;":"≫","gt;":">",gt:">","gtcc;":"⪧","gtcir;":"⩺","gtdot;":"⋗","gtlPar;":"⦕","gtquest;":"⩼","gtrapprox;":"⪆","gtrarr;":"⥸","gtrdot;":"⋗","gtreqless;":"⋛","gtreqqless;":"⪌","gtrless;":"≷","gtrsim;":"≳","gvertneqq;":"≩︀","gvnE;":"≩︀","Hacek;":"ˇ","hairsp;":" ","half;":"½","hamilt;":"ℋ","HARDcy;":"Ъ","hardcy;":"ъ","hArr;":"⇔","harr;":"↔","harrcir;":"⥈","harrw;":"↭","Hat;":"^","hbar;":"ℏ","Hcirc;":"Ĥ","hcirc;":"ĥ","hearts;":"♥","heartsuit;":"♥","hellip;":"…","hercon;":"⊹","Hfr;":"ℌ","hfr;":"𝔥","HilbertSpace;":"ℋ","hksearow;":"⤥","hkswarow;":"⤦","hoarr;":"⇿","homtht;":"∻","hookleftarrow;":"↩","hookrightarrow;":"↪","Hopf;":"ℍ","hopf;":"𝕙","horbar;":"―","HorizontalLine;":"─","Hscr;":"ℋ","hscr;":"𝒽","hslash;":"ℏ","Hstrok;":"Ħ","hstrok;":"ħ","HumpDownHump;":"≎","HumpEqual;":"≏","hybull;":"⁃","hyphen;":"‐","Iacute;":"Í",Iacute:"Í","iacute;":"í",iacute:"í","ic;":"⁣","Icirc;":"Î",Icirc:"Î","icirc;":"î",icirc:"î","Icy;":"И","icy;":"и","Idot;":"İ","IEcy;":"Е","iecy;":"е","iexcl;":"¡",iexcl:"¡","iff;":"⇔","Ifr;":"ℑ","ifr;":"𝔦","Igrave;":"Ì",Igrave:"Ì","igrave;":"ì",igrave:"ì","ii;":"ⅈ","iiiint;":"⨌","iiint;":"∭","iinfin;":"⧜","iiota;":"℩","IJlig;":"Ĳ","ijlig;":"ĳ","Im;":"ℑ","Imacr;":"Ī","imacr;":"ī","image;":"ℑ","ImaginaryI;":"ⅈ","imagline;":"ℐ","imagpart;":"ℑ","imath;":"ı","imof;":"⊷","imped;":"Ƶ","Implies;":"⇒","in;":"∈","incare;":"℅","infin;":"∞","infintie;":"⧝","inodot;":"ı","Int;":"∬","int;":"∫","intcal;":"⊺","integers;":"ℤ","Integral;":"∫","intercal;":"⊺","Intersection;":"⋂","intlarhk;":"⨗","intprod;":"⨼","InvisibleComma;":"⁣","InvisibleTimes;":"⁢","IOcy;":"Ё","iocy;":"ё","Iogon;":"Į","iogon;":"į","Iopf;":"𝕀","iopf;":"𝕚","Iota;":"Ι","iota;":"ι","iprod;":"⨼","iquest;":"¿",iquest:"¿","Iscr;":"ℐ","iscr;":"𝒾","isin;":"∈","isindot;":"⋵","isinE;":"⋹","isins;":"⋴","isinsv;":"⋳","isinv;":"∈","it;":"⁢","Itilde;":"Ĩ","itilde;":"ĩ","Iukcy;":"І","iukcy;":"і","Iuml;":"Ï",Iuml:"Ï","iuml;":"ï",iuml:"ï","Jcirc;":"Ĵ","jcirc;":"ĵ","Jcy;":"Й","jcy;":"й","Jfr;":"𝔍","jfr;":"𝔧","jmath;":"ȷ","Jopf;":"𝕁","jopf;":"𝕛","Jscr;":"𝒥","jscr;":"𝒿","Jsercy;":"Ј","jsercy;":"ј","Jukcy;":"Є","jukcy;":"є","Kappa;":"Κ","kappa;":"κ","kappav;":"ϰ","Kcedil;":"Ķ","kcedil;":"ķ","Kcy;":"К","kcy;":"к","Kfr;":"𝔎","kfr;":"𝔨","kgreen;":"ĸ","KHcy;":"Х","khcy;":"х","KJcy;":"Ќ","kjcy;":"ќ","Kopf;":"𝕂","kopf;":"𝕜","Kscr;":"𝒦","kscr;":"𝓀","lAarr;":"⇚","Lacute;":"Ĺ","lacute;":"ĺ","laemptyv;":"⦴","lagran;":"ℒ","Lambda;":"Λ","lambda;":"λ","Lang;":"⟪","lang;":"⟨","langd;":"⦑","langle;":"⟨","lap;":"⪅","Laplacetrf;":"ℒ","laquo;":"«",laquo:"«","Larr;":"↞","lArr;":"⇐","larr;":"←","larrb;":"⇤","larrbfs;":"⤟","larrfs;":"⤝","larrhk;":"↩","larrlp;":"↫","larrpl;":"⤹","larrsim;":"⥳","larrtl;":"↢","lat;":"⪫","lAtail;":"⤛","latail;":"⤙","late;":"⪭","lates;":"⪭︀","lBarr;":"⤎","lbarr;":"⤌","lbbrk;":"❲","lbrace;":"{","lbrack;":"[","lbrke;":"⦋","lbrksld;":"⦏","lbrkslu;":"⦍","Lcaron;":"Ľ","lcaron;":"ľ","Lcedil;":"Ļ","lcedil;":"ļ","lceil;":"⌈","lcub;":"{","Lcy;":"Л","lcy;":"л","ldca;":"⤶","ldquo;":"“","ldquor;":"„","ldrdhar;":"⥧","ldrushar;":"⥋","ldsh;":"↲","lE;":"≦","le;":"≤","LeftAngleBracket;":"⟨","LeftArrow;":"←","Leftarrow;":"⇐","leftarrow;":"←","LeftArrowBar;":"⇤","LeftArrowRightArrow;":"⇆","leftarrowtail;":"↢","LeftCeiling;":"⌈","LeftDoubleBracket;":"⟦","LeftDownTeeVector;":"⥡","LeftDownVector;":"⇃","LeftDownVectorBar;":"⥙","LeftFloor;":"⌊","leftharpoondown;":"↽","leftharpoonup;":"↼","leftleftarrows;":"⇇","LeftRightArrow;":"↔","Leftrightarrow;":"⇔","leftrightarrow;":"↔","leftrightarrows;":"⇆","leftrightharpoons;":"⇋","leftrightsquigarrow;":"↭","LeftRightVector;":"⥎","LeftTee;":"⊣","LeftTeeArrow;":"↤","LeftTeeVector;":"⥚","leftthreetimes;":"⋋","LeftTriangle;":"⊲","LeftTriangleBar;":"⧏","LeftTriangleEqual;":"⊴","LeftUpDownVector;":"⥑","LeftUpTeeVector;":"⥠","LeftUpVector;":"↿","LeftUpVectorBar;":"⥘","LeftVector;":"↼","LeftVectorBar;":"⥒","lEg;":"⪋","leg;":"⋚","leq;":"≤","leqq;":"≦","leqslant;":"⩽","les;":"⩽","lescc;":"⪨","lesdot;":"⩿","lesdoto;":"⪁","lesdotor;":"⪃","lesg;":"⋚︀","lesges;":"⪓","lessapprox;":"⪅","lessdot;":"⋖","lesseqgtr;":"⋚","lesseqqgtr;":"⪋","LessEqualGreater;":"⋚","LessFullEqual;":"≦","LessGreater;":"≶","lessgtr;":"≶","LessLess;":"⪡","lesssim;":"≲","LessSlantEqual;":"⩽","LessTilde;":"≲","lfisht;":"⥼","lfloor;":"⌊","Lfr;":"𝔏","lfr;":"𝔩","lg;":"≶","lgE;":"⪑","lHar;":"⥢","lhard;":"↽","lharu;":"↼","lharul;":"⥪","lhblk;":"▄","LJcy;":"Љ","ljcy;":"љ","Ll;":"⋘","ll;":"≪","llarr;":"⇇","llcorner;":"⌞","Lleftarrow;":"⇚","llhard;":"⥫","lltri;":"◺","Lmidot;":"Ŀ","lmidot;":"ŀ","lmoust;":"⎰","lmoustache;":"⎰","lnap;":"⪉","lnapprox;":"⪉","lnE;":"≨","lne;":"⪇","lneq;":"⪇","lneqq;":"≨","lnsim;":"⋦","loang;":"⟬","loarr;":"⇽","lobrk;":"⟦","LongLeftArrow;":"⟵","Longleftarrow;":"⟸","longleftarrow;":"⟵","LongLeftRightArrow;":"⟷","Longleftrightarrow;":"⟺","longleftrightarrow;":"⟷","longmapsto;":"⟼","LongRightArrow;":"⟶","Longrightarrow;":"⟹","longrightarrow;":"⟶","looparrowleft;":"↫","looparrowright;":"↬","lopar;":"⦅","Lopf;":"𝕃","lopf;":"𝕝","loplus;":"⨭","lotimes;":"⨴","lowast;":"∗","lowbar;":"_","LowerLeftArrow;":"↙","LowerRightArrow;":"↘","loz;":"◊","lozenge;":"◊","lozf;":"⧫","lpar;":"(","lparlt;":"⦓","lrarr;":"⇆","lrcorner;":"⌟","lrhar;":"⇋","lrhard;":"⥭","lrm;":"‎","lrtri;":"⊿","lsaquo;":"‹","Lscr;":"ℒ","lscr;":"𝓁","Lsh;":"↰","lsh;":"↰","lsim;":"≲","lsime;":"⪍","lsimg;":"⪏","lsqb;":"[","lsquo;":"‘","lsquor;":"‚","Lstrok;":"Ł","lstrok;":"ł","LT;":"<",LT:"<","Lt;":"≪","lt;":"<",lt:"<","ltcc;":"⪦","ltcir;":"⩹","ltdot;":"⋖","lthree;":"⋋","ltimes;":"⋉","ltlarr;":"⥶","ltquest;":"⩻","ltri;":"◃","ltrie;":"⊴","ltrif;":"◂","ltrPar;":"⦖","lurdshar;":"⥊","luruhar;":"⥦","lvertneqq;":"≨︀","lvnE;":"≨︀","macr;":"¯",macr:"¯","male;":"♂","malt;":"✠","maltese;":"✠","Map;":"⤅","map;":"↦","mapsto;":"↦","mapstodown;":"↧","mapstoleft;":"↤","mapstoup;":"↥","marker;":"▮","mcomma;":"⨩","Mcy;":"М","mcy;":"м","mdash;":"—","mDDot;":"∺","measuredangle;":"∡","MediumSpace;":" ","Mellintrf;":"ℳ","Mfr;":"𝔐","mfr;":"𝔪","mho;":"℧","micro;":"µ",micro:"µ","mid;":"∣","midast;":"*","midcir;":"⫰","middot;":"·",middot:"·","minus;":"−","minusb;":"⊟","minusd;":"∸","minusdu;":"⨪","MinusPlus;":"∓","mlcp;":"⫛","mldr;":"…","mnplus;":"∓","models;":"⊧","Mopf;":"𝕄","mopf;":"𝕞","mp;":"∓","Mscr;":"ℳ","mscr;":"𝓂","mstpos;":"∾","Mu;":"Μ","mu;":"μ","multimap;":"⊸","mumap;":"⊸","nabla;":"∇","Nacute;":"Ń","nacute;":"ń","nang;":"∠⃒","nap;":"≉","napE;":"⩰̸","napid;":"≋̸","napos;":"ŉ","napprox;":"≉","natur;":"♮","natural;":"♮","naturals;":"ℕ","nbsp;":" ",nbsp:" ","nbump;":"≎̸","nbumpe;":"≏̸","ncap;":"⩃","Ncaron;":"Ň","ncaron;":"ň","Ncedil;":"Ņ","ncedil;":"ņ","ncong;":"≇","ncongdot;":"⩭̸","ncup;":"⩂","Ncy;":"Н","ncy;":"н","ndash;":"–","ne;":"≠","nearhk;":"⤤","neArr;":"⇗","nearr;":"↗","nearrow;":"↗","nedot;":"≐̸","NegativeMediumSpace;":"​","NegativeThickSpace;":"​","NegativeThinSpace;":"​","NegativeVeryThinSpace;":"​","nequiv;":"≢","nesear;":"⤨","nesim;":"≂̸","NestedGreaterGreater;":"≫","NestedLessLess;":"≪","NewLine;":"\n","nexist;":"∄","nexists;":"∄","Nfr;":"𝔑","nfr;":"𝔫","ngE;":"≧̸","nge;":"≱","ngeq;":"≱","ngeqq;":"≧̸","ngeqslant;":"⩾̸","nges;":"⩾̸","nGg;":"⋙̸","ngsim;":"≵","nGt;":"≫⃒","ngt;":"≯","ngtr;":"≯","nGtv;":"≫̸","nhArr;":"⇎","nharr;":"↮","nhpar;":"⫲","ni;":"∋","nis;":"⋼","nisd;":"⋺","niv;":"∋","NJcy;":"Њ","njcy;":"њ","nlArr;":"⇍","nlarr;":"↚","nldr;":"‥","nlE;":"≦̸","nle;":"≰","nLeftarrow;":"⇍","nleftarrow;":"↚","nLeftrightarrow;":"⇎","nleftrightarrow;":"↮","nleq;":"≰","nleqq;":"≦̸","nleqslant;":"⩽̸","nles;":"⩽̸","nless;":"≮","nLl;":"⋘̸","nlsim;":"≴","nLt;":"≪⃒","nlt;":"≮","nltri;":"⋪","nltrie;":"⋬","nLtv;":"≪̸","nmid;":"∤","NoBreak;":"⁠","NonBreakingSpace;":" ","Nopf;":"ℕ","nopf;":"𝕟","Not;":"⫬","not;":"¬",not:"¬","NotCongruent;":"≢","NotCupCap;":"≭","NotDoubleVerticalBar;":"∦","NotElement;":"∉","NotEqual;":"≠","NotEqualTilde;":"≂̸","NotExists;":"∄","NotGreater;":"≯","NotGreaterEqual;":"≱","NotGreaterFullEqual;":"≧̸","NotGreaterGreater;":"≫̸","NotGreaterLess;":"≹","NotGreaterSlantEqual;":"⩾̸","NotGreaterTilde;":"≵","NotHumpDownHump;":"≎̸","NotHumpEqual;":"≏̸","notin;":"∉","notindot;":"⋵̸","notinE;":"⋹̸","notinva;":"∉","notinvb;":"⋷","notinvc;":"⋶","NotLeftTriangle;":"⋪","NotLeftTriangleBar;":"⧏̸","NotLeftTriangleEqual;":"⋬","NotLess;":"≮","NotLessEqual;":"≰","NotLessGreater;":"≸","NotLessLess;":"≪̸","NotLessSlantEqual;":"⩽̸","NotLessTilde;":"≴","NotNestedGreaterGreater;":"⪢̸","NotNestedLessLess;":"⪡̸","notni;":"∌","notniva;":"∌","notnivb;":"⋾","notnivc;":"⋽","NotPrecedes;":"⊀","NotPrecedesEqual;":"⪯̸","NotPrecedesSlantEqual;":"⋠","NotReverseElement;":"∌","NotRightTriangle;":"⋫","NotRightTriangleBar;":"⧐̸","NotRightTriangleEqual;":"⋭","NotSquareSubset;":"⊏̸","NotSquareSubsetEqual;":"⋢","NotSquareSuperset;":"⊐̸","NotSquareSupersetEqual;":"⋣","NotSubset;":"⊂⃒","NotSubsetEqual;":"⊈","NotSucceeds;":"⊁","NotSucceedsEqual;":"⪰̸","NotSucceedsSlantEqual;":"⋡","NotSucceedsTilde;":"≿̸","NotSuperset;":"⊃⃒","NotSupersetEqual;":"⊉","NotTilde;":"≁","NotTildeEqual;":"≄","NotTildeFullEqual;":"≇","NotTildeTilde;":"≉","NotVerticalBar;":"∤","npar;":"∦","nparallel;":"∦","nparsl;":"⫽⃥","npart;":"∂̸","npolint;":"⨔","npr;":"⊀","nprcue;":"⋠","npre;":"⪯̸","nprec;":"⊀","npreceq;":"⪯̸","nrArr;":"⇏","nrarr;":"↛","nrarrc;":"⤳̸","nrarrw;":"↝̸","nRightarrow;":"⇏","nrightarrow;":"↛","nrtri;":"⋫","nrtrie;":"⋭","nsc;":"⊁","nsccue;":"⋡","nsce;":"⪰̸","Nscr;":"𝒩","nscr;":"𝓃","nshortmid;":"∤","nshortparallel;":"∦","nsim;":"≁","nsime;":"≄","nsimeq;":"≄","nsmid;":"∤","nspar;":"∦","nsqsube;":"⋢","nsqsupe;":"⋣","nsub;":"⊄","nsubE;":"⫅̸","nsube;":"⊈","nsubset;":"⊂⃒","nsubseteq;":"⊈","nsubseteqq;":"⫅̸","nsucc;":"⊁","nsucceq;":"⪰̸","nsup;":"⊅","nsupE;":"⫆̸","nsupe;":"⊉","nsupset;":"⊃⃒","nsupseteq;":"⊉","nsupseteqq;":"⫆̸","ntgl;":"≹","Ntilde;":"Ñ",Ntilde:"Ñ","ntilde;":"ñ",ntilde:"ñ","ntlg;":"≸","ntriangleleft;":"⋪","ntrianglelefteq;":"⋬","ntriangleright;":"⋫","ntrianglerighteq;":"⋭","Nu;":"Ν","nu;":"ν","num;":"#","numero;":"№","numsp;":" ","nvap;":"≍⃒","nVDash;":"⊯","nVdash;":"⊮","nvDash;":"⊭","nvdash;":"⊬","nvge;":"≥⃒","nvgt;":">⃒","nvHarr;":"⤄","nvinfin;":"⧞","nvlArr;":"⤂","nvle;":"≤⃒","nvlt;":"<⃒","nvltrie;":"⊴⃒","nvrArr;":"⤃","nvrtrie;":"⊵⃒","nvsim;":"∼⃒","nwarhk;":"⤣","nwArr;":"⇖","nwarr;":"↖","nwarrow;":"↖","nwnear;":"⤧","Oacute;":"Ó",Oacute:"Ó","oacute;":"ó",oacute:"ó","oast;":"⊛","ocir;":"⊚","Ocirc;":"Ô",Ocirc:"Ô","ocirc;":"ô",ocirc:"ô","Ocy;":"О","ocy;":"о","odash;":"⊝","Odblac;":"Ő","odblac;":"ő","odiv;":"⨸","odot;":"⊙","odsold;":"⦼","OElig;":"Œ","oelig;":"œ","ofcir;":"⦿","Ofr;":"𝔒","ofr;":"𝔬","ogon;":"˛","Ograve;":"Ò",Ograve:"Ò","ograve;":"ò",ograve:"ò","ogt;":"⧁","ohbar;":"⦵","ohm;":"Ω","oint;":"∮","olarr;":"↺","olcir;":"⦾","olcross;":"⦻","oline;":"‾","olt;":"⧀","Omacr;":"Ō","omacr;":"ō","Omega;":"Ω","omega;":"ω","Omicron;":"Ο","omicron;":"ο","omid;":"⦶","ominus;":"⊖","Oopf;":"𝕆","oopf;":"𝕠","opar;":"⦷","OpenCurlyDoubleQuote;":"“","OpenCurlyQuote;":"‘","operp;":"⦹","oplus;":"⊕","Or;":"⩔","or;":"∨","orarr;":"↻","ord;":"⩝","order;":"ℴ","orderof;":"ℴ","ordf;":"ª",ordf:"ª","ordm;":"º",ordm:"º","origof;":"⊶","oror;":"⩖","orslope;":"⩗","orv;":"⩛","oS;":"Ⓢ","Oscr;":"𝒪","oscr;":"ℴ","Oslash;":"Ø",Oslash:"Ø","oslash;":"ø",oslash:"ø","osol;":"⊘","Otilde;":"Õ",Otilde:"Õ","otilde;":"õ",otilde:"õ","Otimes;":"⨷","otimes;":"⊗","otimesas;":"⨶","Ouml;":"Ö",Ouml:"Ö","ouml;":"ö",ouml:"ö","ovbar;":"⌽","OverBar;":"‾","OverBrace;":"⏞","OverBracket;":"⎴","OverParenthesis;":"⏜","par;":"∥","para;":"¶",para:"¶","parallel;":"∥","parsim;":"⫳","parsl;":"⫽","part;":"∂","PartialD;":"∂","Pcy;":"П","pcy;":"п","percnt;":"%","period;":".","permil;":"‰","perp;":"⊥","pertenk;":"‱","Pfr;":"𝔓","pfr;":"𝔭","Phi;":"Φ","phi;":"φ","phiv;":"ϕ","phmmat;":"ℳ","phone;":"☎","Pi;":"Π","pi;":"π","pitchfork;":"⋔","piv;":"ϖ","planck;":"ℏ","planckh;":"ℎ","plankv;":"ℏ","plus;":"+","plusacir;":"⨣","plusb;":"⊞","pluscir;":"⨢","plusdo;":"∔","plusdu;":"⨥","pluse;":"⩲","PlusMinus;":"±","plusmn;":"±",plusmn:"±","plussim;":"⨦","plustwo;":"⨧","pm;":"±","Poincareplane;":"ℌ","pointint;":"⨕","Popf;":"ℙ","popf;":"𝕡","pound;":"£",pound:"£","Pr;":"⪻","pr;":"≺","prap;":"⪷","prcue;":"≼","prE;":"⪳","pre;":"⪯","prec;":"≺","precapprox;":"⪷","preccurlyeq;":"≼","Precedes;":"≺","PrecedesEqual;":"⪯","PrecedesSlantEqual;":"≼","PrecedesTilde;":"≾","preceq;":"⪯","precnapprox;":"⪹","precneqq;":"⪵","precnsim;":"⋨","precsim;":"≾","Prime;":"″","prime;":"′","primes;":"ℙ","prnap;":"⪹","prnE;":"⪵","prnsim;":"⋨","prod;":"∏","Product;":"∏","profalar;":"⌮","profline;":"⌒","profsurf;":"⌓","prop;":"∝","Proportion;":"∷","Proportional;":"∝","propto;":"∝","prsim;":"≾","prurel;":"⊰","Pscr;":"𝒫","pscr;":"𝓅","Psi;":"Ψ","psi;":"ψ","puncsp;":" ","Qfr;":"𝔔","qfr;":"𝔮","qint;":"⨌","Qopf;":"ℚ","qopf;":"𝕢","qprime;":"⁗","Qscr;":"𝒬","qscr;":"𝓆","quaternions;":"ℍ","quatint;":"⨖","quest;":"?","questeq;":"≟","QUOT;":'"',QUOT:'"',"quot;":'"',quot:'"',"rAarr;":"⇛","race;":"∽̱","Racute;":"Ŕ","racute;":"ŕ","radic;":"√","raemptyv;":"⦳","Rang;":"⟫","rang;":"⟩","rangd;":"⦒","range;":"⦥","rangle;":"⟩","raquo;":"»",raquo:"»","Rarr;":"↠","rArr;":"⇒","rarr;":"→","rarrap;":"⥵","rarrb;":"⇥","rarrbfs;":"⤠","rarrc;":"⤳","rarrfs;":"⤞","rarrhk;":"↪","rarrlp;":"↬","rarrpl;":"⥅","rarrsim;":"⥴","Rarrtl;":"⤖","rarrtl;":"↣","rarrw;":"↝","rAtail;":"⤜","ratail;":"⤚","ratio;":"∶","rationals;":"ℚ","RBarr;":"⤐","rBarr;":"⤏","rbarr;":"⤍","rbbrk;":"❳","rbrace;":"}","rbrack;":"]","rbrke;":"⦌","rbrksld;":"⦎","rbrkslu;":"⦐","Rcaron;":"Ř","rcaron;":"ř","Rcedil;":"Ŗ","rcedil;":"ŗ","rceil;":"⌉","rcub;":"}","Rcy;":"Р","rcy;":"р","rdca;":"⤷","rdldhar;":"⥩","rdquo;":"”","rdquor;":"”","rdsh;":"↳","Re;":"ℜ","real;":"ℜ","realine;":"ℛ","realpart;":"ℜ","reals;":"ℝ","rect;":"▭","REG;":"®",REG:"®","reg;":"®",reg:"®","ReverseElement;":"∋","ReverseEquilibrium;":"⇋","ReverseUpEquilibrium;":"⥯","rfisht;":"⥽","rfloor;":"⌋","Rfr;":"ℜ","rfr;":"𝔯","rHar;":"⥤","rhard;":"⇁","rharu;":"⇀","rharul;":"⥬","Rho;":"Ρ","rho;":"ρ","rhov;":"ϱ","RightAngleBracket;":"⟩","RightArrow;":"→","Rightarrow;":"⇒","rightarrow;":"→","RightArrowBar;":"⇥","RightArrowLeftArrow;":"⇄","rightarrowtail;":"↣","RightCeiling;":"⌉","RightDoubleBracket;":"⟧","RightDownTeeVector;":"⥝","RightDownVector;":"⇂","RightDownVectorBar;":"⥕","RightFloor;":"⌋","rightharpoondown;":"⇁","rightharpoonup;":"⇀","rightleftarrows;":"⇄","rightleftharpoons;":"⇌","rightrightarrows;":"⇉","rightsquigarrow;":"↝","RightTee;":"⊢","RightTeeArrow;":"↦","RightTeeVector;":"⥛","rightthreetimes;":"⋌","RightTriangle;":"⊳","RightTriangleBar;":"⧐","RightTriangleEqual;":"⊵","RightUpDownVector;":"⥏","RightUpTeeVector;":"⥜","RightUpVector;":"↾","RightUpVectorBar;":"⥔","RightVector;":"⇀","RightVectorBar;":"⥓","ring;":"˚","risingdotseq;":"≓","rlarr;":"⇄","rlhar;":"⇌","rlm;":"‏","rmoust;":"⎱","rmoustache;":"⎱","rnmid;":"⫮","roang;":"⟭","roarr;":"⇾","robrk;":"⟧","ropar;":"⦆","Ropf;":"ℝ","ropf;":"𝕣","roplus;":"⨮","rotimes;":"⨵","RoundImplies;":"⥰","rpar;":")","rpargt;":"⦔","rppolint;":"⨒","rrarr;":"⇉","Rrightarrow;":"⇛","rsaquo;":"›","Rscr;":"ℛ","rscr;":"𝓇","Rsh;":"↱","rsh;":"↱","rsqb;":"]","rsquo;":"’","rsquor;":"’","rthree;":"⋌","rtimes;":"⋊","rtri;":"▹","rtrie;":"⊵","rtrif;":"▸","rtriltri;":"⧎","RuleDelayed;":"⧴","ruluhar;":"⥨","rx;":"℞","Sacute;":"Ś","sacute;":"ś","sbquo;":"‚","Sc;":"⪼","sc;":"≻","scap;":"⪸","Scaron;":"Š","scaron;":"š","sccue;":"≽","scE;":"⪴","sce;":"⪰","Scedil;":"Ş","scedil;":"ş","Scirc;":"Ŝ","scirc;":"ŝ","scnap;":"⪺","scnE;":"⪶","scnsim;":"⋩","scpolint;":"⨓","scsim;":"≿","Scy;":"С","scy;":"с","sdot;":"⋅","sdotb;":"⊡","sdote;":"⩦","searhk;":"⤥","seArr;":"⇘","searr;":"↘","searrow;":"↘","sect;":"§",sect:"§","semi;":";","seswar;":"⤩","setminus;":"∖","setmn;":"∖","sext;":"✶","Sfr;":"𝔖","sfr;":"𝔰","sfrown;":"⌢","sharp;":"♯","SHCHcy;":"Щ","shchcy;":"щ","SHcy;":"Ш","shcy;":"ш","ShortDownArrow;":"↓","ShortLeftArrow;":"←","shortmid;":"∣","shortparallel;":"∥","ShortRightArrow;":"→","ShortUpArrow;":"↑","shy;":"­",shy:"­","Sigma;":"Σ","sigma;":"σ","sigmaf;":"ς","sigmav;":"ς","sim;":"∼","simdot;":"⩪","sime;":"≃","simeq;":"≃","simg;":"⪞","simgE;":"⪠","siml;":"⪝","simlE;":"⪟","simne;":"≆","simplus;":"⨤","simrarr;":"⥲","slarr;":"←","SmallCircle;":"∘","smallsetminus;":"∖","smashp;":"⨳","smeparsl;":"⧤","smid;":"∣","smile;":"⌣","smt;":"⪪","smte;":"⪬","smtes;":"⪬︀","SOFTcy;":"Ь","softcy;":"ь","sol;":"/","solb;":"⧄","solbar;":"⌿","Sopf;":"𝕊","sopf;":"𝕤","spades;":"♠","spadesuit;":"♠","spar;":"∥","sqcap;":"⊓","sqcaps;":"⊓︀","sqcup;":"⊔","sqcups;":"⊔︀","Sqrt;":"√","sqsub;":"⊏","sqsube;":"⊑","sqsubset;":"⊏","sqsubseteq;":"⊑","sqsup;":"⊐","sqsupe;":"⊒","sqsupset;":"⊐","sqsupseteq;":"⊒","squ;":"□","Square;":"□","square;":"□","SquareIntersection;":"⊓","SquareSubset;":"⊏","SquareSubsetEqual;":"⊑","SquareSuperset;":"⊐","SquareSupersetEqual;":"⊒","SquareUnion;":"⊔","squarf;":"▪","squf;":"▪","srarr;":"→","Sscr;":"𝒮","sscr;":"𝓈","ssetmn;":"∖","ssmile;":"⌣","sstarf;":"⋆","Star;":"⋆","star;":"☆","starf;":"★","straightepsilon;":"ϵ","straightphi;":"ϕ","strns;":"¯","Sub;":"⋐","sub;":"⊂","subdot;":"⪽","subE;":"⫅","sube;":"⊆","subedot;":"⫃","submult;":"⫁","subnE;":"⫋","subne;":"⊊","subplus;":"⪿","subrarr;":"⥹","Subset;":"⋐","subset;":"⊂","subseteq;":"⊆","subseteqq;":"⫅","SubsetEqual;":"⊆","subsetneq;":"⊊","subsetneqq;":"⫋","subsim;":"⫇","subsub;":"⫕","subsup;":"⫓","succ;":"≻","succapprox;":"⪸","succcurlyeq;":"≽","Succeeds;":"≻","SucceedsEqual;":"⪰","SucceedsSlantEqual;":"≽","SucceedsTilde;":"≿","succeq;":"⪰","succnapprox;":"⪺","succneqq;":"⪶","succnsim;":"⋩","succsim;":"≿","SuchThat;":"∋","Sum;":"∑","sum;":"∑","sung;":"♪","Sup;":"⋑","sup;":"⊃","sup1;":"¹",sup1:"¹","sup2;":"²",sup2:"²","sup3;":"³",sup3:"³","supdot;":"⪾","supdsub;":"⫘","supE;":"⫆","supe;":"⊇","supedot;":"⫄","Superset;":"⊃","SupersetEqual;":"⊇","suphsol;":"⟉","suphsub;":"⫗","suplarr;":"⥻","supmult;":"⫂","supnE;":"⫌","supne;":"⊋","supplus;":"⫀","Supset;":"⋑","supset;":"⊃","supseteq;":"⊇","supseteqq;":"⫆","supsetneq;":"⊋","supsetneqq;":"⫌","supsim;":"⫈","supsub;":"⫔","supsup;":"⫖","swarhk;":"⤦","swArr;":"⇙","swarr;":"↙","swarrow;":"↙","swnwar;":"⤪","szlig;":"ß",szlig:"ß","Tab;":"\t","target;":"⌖","Tau;":"Τ","tau;":"τ","tbrk;":"⎴","Tcaron;":"Ť","tcaron;":"ť","Tcedil;":"Ţ","tcedil;":"ţ","Tcy;":"Т","tcy;":"т","tdot;":"⃛","telrec;":"⌕","Tfr;":"𝔗","tfr;":"𝔱","there4;":"∴","Therefore;":"∴","therefore;":"∴","Theta;":"Θ","theta;":"θ","thetasym;":"ϑ","thetav;":"ϑ","thickapprox;":"≈","thicksim;":"∼","ThickSpace;":"  ","thinsp;":" ","ThinSpace;":" ","thkap;":"≈","thksim;":"∼","THORN;":"Þ",THORN:"Þ","thorn;":"þ",thorn:"þ","Tilde;":"∼","tilde;":"˜","TildeEqual;":"≃","TildeFullEqual;":"≅","TildeTilde;":"≈","times;":"×",times:"×","timesb;":"⊠","timesbar;":"⨱","timesd;":"⨰","tint;":"∭","toea;":"⤨","top;":"⊤","topbot;":"⌶","topcir;":"⫱","Topf;":"𝕋","topf;":"𝕥","topfork;":"⫚","tosa;":"⤩","tprime;":"‴","TRADE;":"™","trade;":"™","triangle;":"▵","triangledown;":"▿","triangleleft;":"◃","trianglelefteq;":"⊴","triangleq;":"≜","triangleright;":"▹","trianglerighteq;":"⊵","tridot;":"◬","trie;":"≜","triminus;":"⨺","TripleDot;":"⃛","triplus;":"⨹","trisb;":"⧍","tritime;":"⨻","trpezium;":"⏢","Tscr;":"𝒯","tscr;":"𝓉","TScy;":"Ц","tscy;":"ц","TSHcy;":"Ћ","tshcy;":"ћ","Tstrok;":"Ŧ","tstrok;":"ŧ","twixt;":"≬","twoheadleftarrow;":"↞","twoheadrightarrow;":"↠","Uacute;":"Ú",Uacute:"Ú","uacute;":"ú",uacute:"ú","Uarr;":"↟","uArr;":"⇑","uarr;":"↑","Uarrocir;":"⥉","Ubrcy;":"Ў","ubrcy;":"ў","Ubreve;":"Ŭ","ubreve;":"ŭ","Ucirc;":"Û",Ucirc:"Û","ucirc;":"û",ucirc:"û","Ucy;":"У","ucy;":"у","udarr;":"⇅","Udblac;":"Ű","udblac;":"ű","udhar;":"⥮","ufisht;":"⥾","Ufr;":"𝔘","ufr;":"𝔲","Ugrave;":"Ù",Ugrave:"Ù","ugrave;":"ù",ugrave:"ù","uHar;":"⥣","uharl;":"↿","uharr;":"↾","uhblk;":"▀","ulcorn;":"⌜","ulcorner;":"⌜","ulcrop;":"⌏","ultri;":"◸","Umacr;":"Ū","umacr;":"ū","uml;":"¨",uml:"¨","UnderBar;":"_","UnderBrace;":"⏟","UnderBracket;":"⎵","UnderParenthesis;":"⏝","Union;":"⋃","UnionPlus;":"⊎","Uogon;":"Ų","uogon;":"ų","Uopf;":"𝕌","uopf;":"𝕦","UpArrow;":"↑","Uparrow;":"⇑","uparrow;":"↑","UpArrowBar;":"⤒","UpArrowDownArrow;":"⇅","UpDownArrow;":"↕","Updownarrow;":"⇕","updownarrow;":"↕","UpEquilibrium;":"⥮","upharpoonleft;":"↿","upharpoonright;":"↾","uplus;":"⊎","UpperLeftArrow;":"↖","UpperRightArrow;":"↗","Upsi;":"ϒ","upsi;":"υ","upsih;":"ϒ","Upsilon;":"Υ","upsilon;":"υ","UpTee;":"⊥","UpTeeArrow;":"↥","upuparrows;":"⇈","urcorn;":"⌝","urcorner;":"⌝","urcrop;":"⌎","Uring;":"Ů","uring;":"ů","urtri;":"◹","Uscr;":"𝒰","uscr;":"𝓊","utdot;":"⋰","Utilde;":"Ũ","utilde;":"ũ","utri;":"▵","utrif;":"▴","uuarr;":"⇈","Uuml;":"Ü",Uuml:"Ü","uuml;":"ü",uuml:"ü","uwangle;":"⦧","vangrt;":"⦜","varepsilon;":"ϵ","varkappa;":"ϰ","varnothing;":"∅","varphi;":"ϕ","varpi;":"ϖ","varpropto;":"∝","vArr;":"⇕","varr;":"↕","varrho;":"ϱ","varsigma;":"ς","varsubsetneq;":"⊊︀","varsubsetneqq;":"⫋︀","varsupsetneq;":"⊋︀","varsupsetneqq;":"⫌︀","vartheta;":"ϑ","vartriangleleft;":"⊲","vartriangleright;":"⊳","Vbar;":"⫫","vBar;":"⫨","vBarv;":"⫩","Vcy;":"В","vcy;":"в","VDash;":"⊫","Vdash;":"⊩","vDash;":"⊨","vdash;":"⊢","Vdashl;":"⫦","Vee;":"⋁","vee;":"∨","veebar;":"⊻","veeeq;":"≚","vellip;":"⋮","Verbar;":"‖","verbar;":"|","Vert;":"‖","vert;":"|","VerticalBar;":"∣","VerticalLine;":"|","VerticalSeparator;":"❘","VerticalTilde;":"≀","VeryThinSpace;":" ","Vfr;":"𝔙","vfr;":"𝔳","vltri;":"⊲","vnsub;":"⊂⃒","vnsup;":"⊃⃒","Vopf;":"𝕍","vopf;":"𝕧","vprop;":"∝","vrtri;":"⊳","Vscr;":"𝒱","vscr;":"𝓋","vsubnE;":"⫋︀","vsubne;":"⊊︀","vsupnE;":"⫌︀","vsupne;":"⊋︀","Vvdash;":"⊪","vzigzag;":"⦚","Wcirc;":"Ŵ","wcirc;":"ŵ","wedbar;":"⩟","Wedge;":"⋀","wedge;":"∧","wedgeq;":"≙","weierp;":"℘","Wfr;":"𝔚","wfr;":"𝔴","Wopf;":"𝕎","wopf;":"𝕨","wp;":"℘","wr;":"≀","wreath;":"≀","Wscr;":"𝒲","wscr;":"𝓌","xcap;":"⋂","xcirc;":"◯","xcup;":"⋃","xdtri;":"▽","Xfr;":"𝔛","xfr;":"𝔵","xhArr;":"⟺","xharr;":"⟷","Xi;":"Ξ","xi;":"ξ","xlArr;":"⟸","xlarr;":"⟵","xmap;":"⟼","xnis;":"⋻","xodot;":"⨀","Xopf;":"𝕏","xopf;":"𝕩","xoplus;":"⨁","xotime;":"⨂","xrArr;":"⟹","xrarr;":"⟶","Xscr;":"𝒳","xscr;":"𝓍","xsqcup;":"⨆","xuplus;":"⨄","xutri;":"△","xvee;":"⋁","xwedge;":"⋀","Yacute;":"Ý",Yacute:"Ý","yacute;":"ý",yacute:"ý","YAcy;":"Я","yacy;":"я","Ycirc;":"Ŷ","ycirc;":"ŷ","Ycy;":"Ы","ycy;":"ы","yen;":"¥",yen:"¥","Yfr;":"𝔜","yfr;":"𝔶","YIcy;":"Ї","yicy;":"ї","Yopf;":"𝕐","yopf;":"𝕪","Yscr;":"𝒴","yscr;":"𝓎","YUcy;":"Ю","yucy;":"ю","Yuml;":"Ÿ","yuml;":"ÿ",yuml:"ÿ","Zacute;":"Ź","zacute;":"ź","Zcaron;":"Ž","zcaron;":"ž","Zcy;":"З","zcy;":"з","Zdot;":"Ż","zdot;":"ż","zeetrf;":"ℨ","ZeroWidthSpace;":"​","Zeta;":"Ζ","zeta;":"ζ","Zfr;":"ℨ","zfr;":"𝔷","ZHcy;":"Ж","zhcy;":"ж","zigrarr;":"⇝","Zopf;":"ℤ","zopf;":"𝕫","Zscr;":"𝒵","zscr;":"𝓏","zwj;":"‍","zwnj;":"‌"}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlParser.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlParser.js ***!
  \****************************************************************************************************************/
/*! exports provided: Node, parse */function(e,t,n){"use strict";n.r(t),n.d(t,"Node",function(){return a}),n.d(t,"parse",function(){return s});var r=n(/*! ./htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),i=n(/*! ../utils/arrays.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/arrays.js"),o=n(/*! ./htmlTags.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlTags.js"),a=function(){function e(e,t,n,r){this.start=e,this.end=t,this.children=n,this.parent=r,this.closed=!1}return Object.defineProperty(e.prototype,"attributeNames",{get:function(){return this.attributes?Object.keys(this.attributes):[]},enumerable:!0,configurable:!0}),e.prototype.isSameTag=function(e){return this.tag&&e&&this.tag.length===e.length&&this.tag.toLowerCase()===e},Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children.length?this.children[this.children.length-1]:void 0},enumerable:!0,configurable:!0}),e.prototype.findNodeBefore=function(e){var t=Object(i.findFirst)(this.children,function(t){return e<=t.start})-1;if(t>=0){var n=this.children[t];if(e>n.start){if(e<n.end)return n.findNodeBefore(e);var r=n.lastChild;return r&&r.end===n.end?n.findNodeBefore(e):n}}return this},e.prototype.findNodeAt=function(e){var t=Object(i.findFirst)(this.children,function(t){return e<=t.start})-1;if(t>=0){var n=this.children[t];if(e>n.start&&e<=n.end)return n.findNodeAt(e)}return this},e}();function s(e){for(var t=Object(r.createScanner)(e),n=new a(0,e.length,[],void 0),i=n,s=-1,u=null,c=t.scan();c!==r.TokenType.EOS;){switch(c){case r.TokenType.StartTagOpen:var l=new a(t.getTokenOffset(),e.length,[],i);i.children.push(l),i=l;break;case r.TokenType.StartTag:i.tag=t.getTokenText();break;case r.TokenType.StartTagClose:i.end=t.getTokenEnd(),i.tag&&Object(o.isEmptyElement)(i.tag)&&i.parent&&(i.closed=!0,i=i.parent);break;case r.TokenType.EndTagOpen:s=t.getTokenOffset();break;case r.TokenType.EndTag:for(var d=t.getTokenText().toLowerCase();!i.isSameTag(d)&&i.parent;)i.end=s,i.closed=!1,i=i.parent;i!==n&&(i.closed=!0,i.endTagStart=s);break;case r.TokenType.StartTagSelfClose:i.parent&&(i.closed=!0,i.end=t.getTokenEnd(),i=i.parent);break;case r.TokenType.EndTagClose:i.parent&&(i.end=t.getTokenEnd(),i=i.parent);break;case r.TokenType.AttributeName:u=t.getTokenText();(h=i.attributes)||(i.attributes=h={}),h[u]=null;break;case r.TokenType.AttributeValue:var h,f=t.getTokenText();(h=i.attributes)&&u&&(h[u]=f,u=null)}c=t.scan()}for(;i.parent;)i.end=e.length,i.closed=!1,i=i.parent;return{roots:n.children,findNodeBefore:n.findNodeBefore.bind(n),findNodeAt:n.findNodeAt.bind(n)}}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js ***!
  \*****************************************************************************************************************/
/*! exports provided: TokenType, ScannerState, createScanner */function(e,t,n){"use strict";n.r(t),n.d(t,"TokenType",function(){return r}),n.d(t,"ScannerState",function(){return o}),n.d(t,"createScanner",function(){return w});var r,i=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js").loadMessageBundle();!function(e){e[e.StartCommentTag=0]="StartCommentTag",e[e.Comment=1]="Comment",e[e.EndCommentTag=2]="EndCommentTag",e[e.StartTagOpen=3]="StartTagOpen",e[e.StartTagClose=4]="StartTagClose",e[e.StartTagSelfClose=5]="StartTagSelfClose",e[e.StartTag=6]="StartTag",e[e.EndTagOpen=7]="EndTagOpen",e[e.EndTagClose=8]="EndTagClose",e[e.EndTag=9]="EndTag",e[e.DelimiterAssign=10]="DelimiterAssign",e[e.AttributeName=11]="AttributeName",e[e.AttributeValue=12]="AttributeValue",e[e.StartDoctypeTag=13]="StartDoctypeTag",e[e.Doctype=14]="Doctype",e[e.EndDoctypeTag=15]="EndDoctypeTag",e[e.Content=16]="Content",e[e.Whitespace=17]="Whitespace",e[e.Unknown=18]="Unknown",e[e.Script=19]="Script",e[e.Styles=20]="Styles",e[e.EOS=21]="EOS"}(r||(r={}));var o,a=function(){function e(e,t){this.source=e,this.len=e.length,this.position=t}return e.prototype.eos=function(){return this.len<=this.position},e.prototype.getSource=function(){return this.source},e.prototype.pos=function(){return this.position},e.prototype.goBackTo=function(e){this.position=e},e.prototype.goBack=function(e){this.position-=e},e.prototype.advance=function(e){this.position+=e},e.prototype.goToEnd=function(){this.position=this.source.length},e.prototype.nextChar=function(){return this.source.charCodeAt(this.position++)||0},e.prototype.peekChar=function(e){return void 0===e&&(e=0),this.source.charCodeAt(this.position+e)||0},e.prototype.advanceIfChar=function(e){return e===this.source.charCodeAt(this.position)&&(this.position++,!0)},e.prototype.advanceIfChars=function(e){var t;if(this.position+e.length>this.source.length)return!1;for(t=0;t<e.length;t++)if(this.source.charCodeAt(this.position+t)!==e[t])return!1;return this.advance(t),!0},e.prototype.advanceIfRegExp=function(e){var t=this.source.substr(this.position).match(e);return t?(this.position=this.position+t.index+t[0].length,t[0]):""},e.prototype.advanceUntilRegExp=function(e){var t=this.source.substr(this.position).match(e);return t?(this.position=this.position+t.index,t[0]):(this.goToEnd(),"")},e.prototype.advanceUntilChar=function(e){for(;this.position<this.source.length;){if(this.source.charCodeAt(this.position)===e)return!0;this.advance(1)}return!1},e.prototype.advanceUntilChars=function(e){for(;this.position+e.length<=this.source.length;){for(var t=0;t<e.length&&this.source.charCodeAt(this.position+t)===e[t];t++);if(t===e.length)return!0;this.advance(1)}return this.goToEnd(),!1},e.prototype.skipWhitespace=function(){return this.advanceWhileChar(function(e){return e===_||e===b||e===m||e===v||e===g})>0},e.prototype.advanceWhileChar=function(e){for(var t=this.position;this.position<this.len&&e(this.source.charCodeAt(this.position));)this.position++;return this.position-t},e}(),s="!".charCodeAt(0),u="-".charCodeAt(0),c="<".charCodeAt(0),l=">".charCodeAt(0),d="/".charCodeAt(0),h="=".charCodeAt(0),f='"'.charCodeAt(0),p="'".charCodeAt(0),m="\n".charCodeAt(0),g="\r".charCodeAt(0),v="\f".charCodeAt(0),_=" ".charCodeAt(0),b="\t".charCodeAt(0);!function(e){e[e.WithinContent=0]="WithinContent",e[e.AfterOpeningStartTag=1]="AfterOpeningStartTag",e[e.AfterOpeningEndTag=2]="AfterOpeningEndTag",e[e.WithinDoctype=3]="WithinDoctype",e[e.WithinTag=4]="WithinTag",e[e.WithinEndTag=5]="WithinEndTag",e[e.WithinComment=6]="WithinComment",e[e.WithinScriptContent=7]="WithinScriptContent",e[e.WithinStyleContent=8]="WithinStyleContent",e[e.AfterAttributeName=9]="AfterAttributeName",e[e.BeforeAttributeValue=10]="BeforeAttributeValue"}(o||(o={}));var y={"text/x-handlebars-template":!0};function w(e,t,n){void 0===t&&(t=0),void 0===n&&(n=o.WithinContent);var m,g,v,_,b,w=new a(e,t),T=n,C=0,S=r.Unknown;function E(){return w.advanceIfRegExp(/^[_:\w][_:\w-.\d]*/).toLowerCase()}function k(e,t,n){return S=t,C=e,m=n,t}return{scan:function(){var e=w.pos(),t=T,n=function e(){var t,n=w.pos();if(w.eos())return k(n,r.EOS);switch(T){case o.WithinComment:return w.advanceIfChars([u,u,l])?(T=o.WithinContent,k(n,r.EndCommentTag)):(w.advanceUntilChars([u,u,l]),k(n,r.Comment));case o.WithinDoctype:return w.advanceIfChar(l)?(T=o.WithinContent,k(n,r.EndDoctypeTag)):(w.advanceUntilChar(l),k(n,r.Doctype));case o.WithinContent:if(w.advanceIfChar(c)){if(!w.eos()&&w.peekChar()===s){if(w.advanceIfChars([s,u,u]))return T=o.WithinComment,k(n,r.StartCommentTag);if(w.advanceIfRegExp(/^!doctype/i))return T=o.WithinDoctype,k(n,r.StartDoctypeTag)}return w.advanceIfChar(d)?(T=o.AfterOpeningEndTag,k(n,r.EndTagOpen)):(T=o.AfterOpeningStartTag,k(n,r.StartTagOpen))}return w.advanceUntilChar(c),k(n,r.Content);case o.AfterOpeningEndTag:var a=E();return a.length>0?(T=o.WithinEndTag,k(n,r.EndTag)):w.skipWhitespace()?k(n,r.Whitespace,i("error.unexpectedWhitespace","Tag name must directly follow the open bracket.")):(T=o.WithinEndTag,w.advanceUntilChar(l),n<w.pos()?k(n,r.Unknown,i("error.endTagNameExpected","End tag name expected.")):e());case o.WithinEndTag:if(w.skipWhitespace())return k(n,r.Whitespace);if(w.advanceIfChar(l))return T=o.WithinContent,k(n,r.EndTagClose);t=i("error.tagNameExpected","Closing bracket expected.");break;case o.AfterOpeningStartTag:return v=E(),b=void 0,_=void 0,v.length>0?(g=!1,T=o.WithinTag,k(n,r.StartTag)):w.skipWhitespace()?k(n,r.Whitespace,i("error.unexpectedWhitespace","Tag name must directly follow the open bracket.")):(T=o.WithinTag,w.advanceUntilChar(l),n<w.pos()?k(n,r.Unknown,i("error.startTagNameExpected","Start tag name expected.")):e());case o.WithinTag:return w.skipWhitespace()?(g=!0,k(n,r.Whitespace)):g&&(_=w.advanceIfRegExp(/^[^\s"'>/=\x00-\x0F\x7F\x80-\x9F]*/).toLowerCase()).length>0?(T=o.AfterAttributeName,g=!1,k(n,r.AttributeName)):w.advanceIfChars([d,l])?(T=o.WithinContent,k(n,r.StartTagSelfClose)):w.advanceIfChar(l)?(T="script"===v?b&&y[b]?o.WithinContent:o.WithinScriptContent:"style"===v?o.WithinStyleContent:o.WithinContent,k(n,r.StartTagClose)):(w.advance(1),k(n,r.Unknown,i("error.unexpectedCharacterInTag","Unexpected character in tag.")));case o.AfterAttributeName:return w.skipWhitespace()?(g=!0,k(n,r.Whitespace)):w.advanceIfChar(h)?(T=o.BeforeAttributeValue,k(n,r.DelimiterAssign)):(T=o.WithinTag,e());case o.BeforeAttributeValue:if(w.skipWhitespace())return k(n,r.Whitespace);var m=w.advanceIfRegExp(/^[^\s"'`=<>\/]+/);if(m.length>0)return"type"===_&&(b=m),T=o.WithinTag,g=!1,k(n,r.AttributeValue);var C=w.peekChar();return C===p||C===f?(w.advance(1),w.advanceUntilChar(C)&&w.advance(1),"type"===_&&(b=w.getSource().substring(n+1,w.pos()-1)),T=o.WithinTag,g=!1,k(n,r.AttributeValue)):(T=o.WithinTag,g=!1,e());case o.WithinScriptContent:for(var S=1;!w.eos();){var x=w.advanceIfRegExp(/<!--|-->|<\/?script\s*\/?>?/i);if(0===x.length)return w.goToEnd(),k(n,r.Script);if("\x3c!--"===x)1===S&&(S=2);else if("--\x3e"===x)S=1;else if("/"!==x[1])2===S&&(S=3);else{if(3!==S){w.goBack(x.length);break}S=2}}return T=o.WithinContent,n<w.pos()?k(n,r.Script):e();case o.WithinStyleContent:return w.advanceUntilRegExp(/<\/style/i),T=o.WithinContent,n<w.pos()?k(n,r.Styles):e()}return w.advance(1),T=o.WithinContent,k(n,r.Unknown,t)}();return n!==r.EOS&&e===w.pos()?(console.log("Scanner.scan has not advanced at offset "+e+", state before: "+t+" after: "+T),w.advance(1),k(e,r.Unknown)):n},getTokenType:function(){return S},getTokenOffset:function(){return C},getTokenLength:function(){return w.pos()-C},getTokenEnd:function(){return w.pos()},getTokenText:function(){return w.getSource().substring(C,w.pos())},getScannerState:function(){return T},getTokenError:function(){return m}}}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlTags.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlTags.js ***!
  \**************************************************************************************************************/
/*! exports provided: EMPTY_ELEMENTS, isEmptyElement, HTMLTagSpecification, HTML_TAGS, IONIC_TAGS, getHTML5TagProvider, getAngularTagProvider, getIonicTagProvider */function(e,t,n){"use strict";n.r(t),n.d(t,"EMPTY_ELEMENTS",function(){return a}),n.d(t,"isEmptyElement",function(){return s}),n.d(t,"HTMLTagSpecification",function(){return u}),n.d(t,"HTML_TAGS",function(){return c}),n.d(t,"IONIC_TAGS",function(){return l}),n.d(t,"getHTML5TagProvider",function(){return d}),n.d(t,"getAngularTagProvider",function(){return h}),n.d(t,"getIonicTagProvider",function(){return f});var r=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js"),i=n(/*! ../utils/arrays.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/arrays.js"),o=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js").loadMessageBundle(),a=["area","base","br","col","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"];function s(e){return!!e&&i.binarySearch(a,e.toLowerCase(),function(e,t){return e.localeCompare(t)})>=0}var u=function(){return function(e,t){void 0===t&&(t=[]),this.label=e,this.attributes=t}}(),c={html:new u(o("tags.html","The html element represents the root of an HTML document."),["manifest"]),head:new u(o("tags.head","The head element represents a collection of metadata for the Document.")),title:new u(o("tags.title","The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.")),base:new u(o("tags.base","The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information."),["href","target"]),link:new u(o("tags.link","The link element allows authors to link their document to other resources."),["href","crossorigin:xo","rel","media","hreflang","type","sizes"]),meta:new u(o("tags.meta","The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements."),["name","http-equiv","content","charset"]),style:new u(o("tags.style","The style element allows authors to embed style information in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user."),["media","nonce","type","scoped:v"]),body:new u(o("tags.body","The body element represents the content of the document."),["onafterprint","onbeforeprint","onbeforeunload","onhashchange","onlanguagechange","onmessage","onoffline","ononline","onpagehide","onpageshow","onpopstate","onstorage","onunload"]),article:new u(o("tags.article","The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. Each article should be identified, typically by including a heading (h1–h6 element) as a child of the article element.")),section:new u(o("tags.section","The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading ( h1- h6 element) as a child of the section element.")),nav:new u(o("tags.nav","The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.")),aside:new u(o("tags.aside","The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.")),h1:new u(o("tags.h1","The h1 element represents a section heading.")),h2:new u(o("tags.h2","The h2 element represents a section heading.")),h3:new u(o("tags.h3","The h3 element represents a section heading.")),h4:new u(o("tags.h4","The h4 element represents a section heading.")),h5:new u(o("tags.h5","The h5 element represents a section heading.")),h6:new u(o("tags.h6","The h6 element represents a section heading.")),header:new u(o("tags.header","The header element represents introductory content for its nearest ancestor sectioning content or sectioning root element. A header typically contains a group of introductory or navigational aids. When the nearest ancestor sectioning content or sectioning root element is the body element, then it applies to the whole page.")),footer:new u(o("tags.footer","The footer element represents a footer for its nearest ancestor sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.")),address:new u(o("tags.address","The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.")),p:new u(o("tags.p","The p element represents a paragraph.")),hr:new u(o("tags.hr","The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.")),pre:new u(o("tags.pre","The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.")),blockquote:new u(o("tags.blockquote","The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations."),["cite"]),ol:new u(o("tags.ol","The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document."),["reversed:v","start","type:lt"]),ul:new u(o("tags.ul","The ul element represents a list of items, where the order of the items is not important — that is, where changing the order would not materially change the meaning of the document.")),li:new u(o("tags.li","The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element's list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element."),["value"]),dl:new u(o("tags.dl","The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements) followed by one or more values (dd elements), ignoring any nodes other than dt and dd elements. Within a single dl element, there should not be more than one dt element for each name.")),dt:new u(o("tags.dt","The dt element represents the term, or name, part of a term-description group in a description list (dl element).")),dd:new u(o("tags.dd","The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element).")),figure:new u(o("tags.figure","The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.")),figcaption:new u(o("tags.figcaption","The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.")),main:new u(o("tags.main","The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application.")),div:new u(o("tags.div","The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements.")),a:new u(o("tags.a","If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents."),["href","target","download","ping","rel","hreflang","type"]),em:new u(o("tags.em","The em element represents stress emphasis of its contents.")),strong:new u(o("tags.strong","The strong element represents strong importance, seriousness, or urgency for its contents.")),small:new u(o("tags.small","The small element represents side comments such as small print.")),s:new u(o("tags.s","The s element represents contents that are no longer accurate or no longer relevant.")),cite:new u(o("tags.cite","The cite element represents a reference to a creative work. It must include the title of the work or the name of the author(person, people or organization) or an URL reference, or a reference in abbreviated form as per the conventions used for the addition of citation metadata.")),q:new u(o("tags.q","The q element represents some phrasing content quoted from another source."),["cite"]),dfn:new u(o("tags.dfn","The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.")),abbr:new u(o("tags.abbr","The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else.")),ruby:new u(o("tags.ruby","The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana. Ruby text can appear on either side, and sometimes both sides, of the base text, and it is possible to control its position using CSS. A more complete introduction to ruby can be found in the Use Cases & Exploratory Approaches for Ruby Markup document as well as in CSS Ruby Module Level 1. [RUBY-UC] [CSSRUBY]")),rb:new u(o("tags.rb","The rb element marks the base text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but its parent ruby element uses it as part of determining what it represents.")),rt:new u(o("tags.rt","The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element or of an rtc element that is itself the child of a ruby element, it doesn't represent anything itself, but its ancestor ruby element uses it as part of determining what it represents.")),rp:new u(o("tags.rp","The rp element is used to provide fallback text to be shown by user agents that don't support ruby annotations. One widespread convention is to provide parentheses around the ruby text component of a ruby annotation.")),time:new u(o("tags.time","The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below."),["datetime"]),code:new u(o("tags.code","The code element represents a fragment of computer code. This could be an XML element name, a file name, a computer program, or any other string that a computer would recognize.")),var:new u(o("tags.var","The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.")),samp:new u(o("tags.samp","The samp element represents sample or quoted output from another program or computing system.")),kbd:new u(o("tags.kbd","The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).")),sub:new u(o("tags.sub","The sub element represents a subscript.")),sup:new u(o("tags.sup","The sup element represents a superscript.")),i:new u(o("tags.i","The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.")),b:new u(o("tags.b","The b element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede.")),u:new u(o("tags.u","The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.")),mark:new u(o("tags.mark","The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader's attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user's current activity.")),bdi:new u(o("tags.bdi","The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]")),bdo:new u(o("tags.dbo","The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]")),span:new u(o("tags.span","The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.")),br:new u(o("tags.br","The br element represents a line break.")),wbr:new u(o("tags.wbr","The wbr element represents a line break opportunity.")),ins:new u(o("tags.ins","The ins element represents an addition to the document.")),del:new u(o("tags.del","The del element represents a removal from the document."),["cite","datetime"]),picture:new u(o("tags.picture","The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.")),img:new u(o("tags.img","An img element represents an image."),["alt","src","srcset","crossorigin:xo","usemap","ismap:v","width","height"]),iframe:new u(o("tags.iframe","The iframe element represents a nested browsing context."),["src","srcdoc","name","sandbox:sb","seamless:v","allowfullscreen:v","width","height"]),embed:new u(o("tags.embed","The embed element provides an integration point for an external (typically non-HTML) application or interactive content."),["src","type","width","height"]),object:new u(o("tags.object","The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin."),["data","type","typemustmatch:v","name","usemap","form","width","height"]),param:new u(o("tags.param","The param element defines parameters for plugins invoked by object elements. It does not represent anything on its own."),["name","value"]),video:new u(o("tags.video","A video element is used for playing videos or movies, and audio files with captions."),["src","crossorigin:xo","poster","preload:pl","autoplay:v","mediagroup","loop:v","muted:v","controls:v","width","height"]),audio:new u(o("tags.audio","An audio element represents a sound or audio stream."),["src","crossorigin:xo","preload:pl","autoplay:v","mediagroup","loop:v","muted:v","controls:v"]),source:new u(o("tags.source","The source element allows authors to specify multiple alternative media resources for media elements. It does not represent anything on its own."),["src","type"]),track:new u(o("tags.track","The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own."),["default:v","kind:tk","label","src","srclang"]),map:new u(o("tags.map","The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children."),["name"]),area:new u(o("tags.area","The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map."),["alt","coords","shape:sh","href","target","download","ping","rel","hreflang","type"]),table:new u(o("tags.table","The table element represents data with more than one dimension, in the form of a table."),["sortable:v","border"]),caption:new u(o("tags.caption","The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.")),colgroup:new u(o("tags.colgroup","The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element."),["span"]),col:new u(o("tags.col","If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup."),["span"]),tbody:new u(o("tags.tbody","The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.")),thead:new u(o("tags.thead","The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table.")),tfoot:new u(o("tags.tfoot","The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.")),tr:new u(o("tags.tr","The tr element represents a row of cells in a table.")),td:new u(o("tags.td","The td element represents a data cell in a table."),["colspan","rowspan","headers"]),th:new u(o("tags.th","The th element represents a header cell in a table."),["colspan","rowspan","headers","scope:s","sorted","abbr"]),form:new u(o("tags.form","The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing."),["accept-charset","action","autocomplete:o","enctype:et","method:m","name","novalidate:v","target"]),label:new u(o("tags.label","The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element's labeled control, either using the for attribute, or by putting the form control inside the label element itself."),["form","for"]),input:new u(o("tags.input","The input element represents a typed data field, usually with a form control to allow the user to edit the data."),["accept","alt","autocomplete:inputautocomplete","autofocus:v","checked:v","dirname","disabled:v","form","formaction","formenctype:et","formmethod:fm","formnovalidate:v","formtarget","height","inputmode:im","list","max","maxlength","min","minlength","multiple:v","name","pattern","placeholder","readonly:v","required:v","size","src","step","type:t","value","width"]),button:new u(o("tags.button","The button element represents a button labeled by its contents."),["autofocus:v","disabled:v","form","formaction","formenctype:et","formmethod:fm","formnovalidate:v","formtarget","name","type:bt","value"]),select:new u(o("tags.select","The select element represents a control for selecting amongst a set of options."),["autocomplete:inputautocomplete","autofocus:v","disabled:v","form","multiple:v","name","required:v","size"]),datalist:new u(o("tags.datalist","The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.")),optgroup:new u(o("tags.optgroup","The optgroup element represents a group of option elements with a common label."),["disabled:v","label"]),option:new u(o("tags.option","The option element represents an option in a select element or as part of a list of suggestions in a datalist element."),["disabled:v","label","selected:v","value"]),textarea:new u(o("tags.textarea","The textarea element represents a multiline plain text edit control for the element's raw value. The contents of the control represent the control's default value."),["autocomplete:inputautocomplete","autofocus:v","cols","dirname","disabled:v","form","inputmode:im","maxlength","minlength","name","placeholder","readonly:v","required:v","rows","wrap:w"]),output:new u(o("tags.output","The output element represents the result of a calculation performed by the application, or the result of a user action."),["for","form","name"]),progress:new u(o("tags.progress","The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed."),["value","max"]),meter:new u(o("tags.meter","The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate."),["value","min","max","low","high","optimum"]),fieldset:new u(o("tags.fieldset","The fieldset element represents a set of form controls optionally grouped under a common name."),["disabled:v","form","name"]),legend:new u(o("tags.legend","The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any.")),details:new u(o("tags.details","The details element represents a disclosure widget from which the user can obtain additional information or controls."),["open:v"]),summary:new u(o("tags.summary","The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.")),dialog:new u(o("tags.dialog","The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window.")),script:new u(o("tags.script","The script element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user."),["src","type","charset","async:v","defer:v","crossorigin:xo","nonce"]),noscript:new u(o("tags.noscript","The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.")),template:new u(o("tags.template","The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.")),canvas:new u(o("tags.canvas","The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly."),["width","height"])},l={"ion-checkbox":new u(o("tags.ion.checkbox","The checkbox is no different than the HTML checkbox input, except it's styled differently. The checkbox behaves like any AngularJS checkbox."),["name","ng-false-value","ng-model","ng-true-value"]),"ion-content":new u(o("tags.ion.content","The ionContent directive provides an easy to use content area that can be configured to use Ionic's custom Scroll View, or the built-in overflow scrolling of the browser."),["delegate-handle","direction:scrolldir","has-bouncing:b","locking:b","on-scroll","on-scroll-complete","overflow-scroll:b","padding:b","scroll:b","scrollbar-x:b","scrollbar-y:b","start-x","start-y"]),"ion-delete-button":new u(o("tags.ion.deletebutton","Child of ionItem"),[]),"ion-footer-bar":new u(o("tags.ion.footerbar",'Adds a fixed footer bar below some content. Can also be a subfooter (higher up) if the "bar-subfooter" class is applied.'),["align-title:align","keyboard-attach:v"]),"ion-header-bar":new u(o("tags.ion.headerbar",'Adds a fixed header bar above some content. Can also be a subheader (lower down) if the "bar-subheader" class is applied.'),["align-title:align","no-tap-scroll:b"]),"ion-infinite-scroll":new u(o("tags.ion.infinitescroll","Child of ionContent or ionScroll. The ionInfiniteScroll directive allows you to call a function whenever the user gets to the bottom of the page or near the bottom of the page."),["distance","icon","immediate-check:b","on-infinite","spinner"]),"ion-input":new u(o("tags.ion.input",'ionInput is meant for text type inputs only. Ionic uses an actual <input type="text"> HTML element within the component, with Ionic wrapping to better handle the user experience and interactivity.'),["type:inputtype","clearInput:v"]),"ion-item":new u(o("tags.ion.item","Child of ionList."),[]),"ion-list":new u(o("tags.ion.list","The List is a widely used interface element in almost any mobile app, and can include content ranging from basic text all the way to buttons, toggles, icons, and thumbnails."),["can-swipe:b","delegate-handle","show-delete:b","show-reorder:b","type:listtype"]),"ion-modal-view":new u(o("tags.ion.modalview","The Modal is a content pane that can go over the user's main view temporarily. Usually used for making a choice or editing an item."),[]),"ion-nav-back-button":new u(o("tags.ion.navbackbutton","Child of ionNavBar. Creates a back button inside an ionNavBar. The back button will appear when the user is able to go back in the current navigation stack."),[]),"ion-nav-bar":new u(o("tags.ion.navbar","If you have an ionNavView directive, you can also create an <ion-nav-bar>, which will create a topbar that updates as the application state changes."),["align-title:align","delegate-handle","no-tap-scroll:b"]),"ion-nav-buttons":new u(o("tags.ion.navbuttons","Child of ionNavView. Use ionNavButtons to set the buttons on your ionNavBar from within an ionView."),["side:navsides"]),"ion-nav-title":new u(o("tags.ion.navtitle","Child of ionNavView. The ionNavTitle directive replaces an ionNavBar title text with custom HTML from within an ionView template."),[]),"ion-nav-view":new u(o("tags.ion.navview","The ionNavView directive is used to render templates in your application. Each template is part of a state. States are usually mapped to a url, and are defined programatically using angular-ui-router."),["name"]),"ion-option-button":new u(o("tags.ion.optionbutton","Child of ionItem. Creates an option button inside a list item, that is visible when the item is swiped to the left by the user."),[]),"ion-pane":new u(o("tags.ion.pane",'A simple container that fits content, with no side effects. Adds the "pane" class to the element.'),[]),"ion-popover-view":new u(o("tags.ion.popoverview","The Popover is a view that floats above an app's content. Popovers provide an easy way to present or gather information from the user."),[]),"ion-radio":new u(o("tags.ion.radio","The radio ionRirective is no different than the HTML radio input, except it's styled differently. The ionRadio behaves like AngularJS radio input."),["disabled:b","icon","name","ng-disabled:b","ng-model","ng-value","value"]),"ion-refresher":new u(o("tags.ion.refresher","Child of ionContent or ionScroll. Allows you to add pull-to-refresh to a scrollView. Place it as the first child of your ionContent or ionScroll element."),["disable-pulling-rotation:b","on-pulling","on-refresh","pulling-icon","pulling-text","refreshing-icon","spinner"]),"ion-reorder-button":new u(o("tags.ion.reorderbutton","Child of ionItem."),["on-reorder"]),"ion-scroll":new u(o("tags.ion.scroll","Creates a scrollable container for all content inside."),["delegate-handle","direction:scrolldir","has-bouncing:b","locking:b","max-zoom","min-zoom","on-refresh","on-scroll","paging:b","scrollbar-x:b","scrollbar-y:b","zooming:b"]),"ion-side-menu":new u(o("tags.ion.sidemenu","Child of ionSideMenus. A container for a side menu, sibling to an ionSideMenuContent directive."),["is-enabled:b","expose-aside-when","side:navsides","width"]),"ion-side-menu-content":new u(o("tags.ion.sidemenucontent","Child of ionSideMenus. A container for the main visible content, sibling to one or more ionSideMenu directives."),["drag-content:b","edge-drag-threshold"]),"ion-side-menus":new u(o("tags.ion.sidemenus","A container element for side menu(s) and the main content. Allows the left and/or right side menu to be toggled by dragging the main content area side to side."),["delegate-handle","enable-menu-with-back-views:b"]),"ion-slide":new u(o("tags.ion.slide","Child of ionSlideBox. Displays a slide inside of a slidebox."),[]),"ion-slide-box":new u(o("tags.ion.slidebox","The Slide Box is a multi-page container where each page can be swiped or dragged between."),["active-slide","auto-play:b","delegate-handle","does-continue:b","on-slide-changed","pager-click","show-pager:b","slide-interval"]),"ion-spinner":new u(o("tags.ion.spinner","The ionSpinner directive provides a variety of animated spinners."),["icon"]),"ion-tab":new u(o("tags.ion.tab","Child of ionTabs. Contains a tab's content. The content only exists while the given tab is selected."),["badge","badge-style","disabled","hidden","href","icon","icon-off","icon-on","ng-click","on-deselect","on-select","title"]),"ion-tabs":new u(o("tags.ion.tabs",'Powers a multi-tabbed interface with a tab bar and a set of "pages" that can be tabbed through.'),["delegate-handle"]),"ion-title":new u(o("tags.ion.title","ion-title is a component that sets the title of the ionNavbar"),[]),"ion-toggle":new u(o("tags.ion.toggle","A toggle is an animated switch which binds a given model to a boolean. Allows dragging of the switch's nub. The toggle behaves like any AngularJS checkbox otherwise."),["name","ng-false-value","ng-model","ng-true-value","toggle-class"]),"ion-view ":new u(o("tags.ion.view","Child of ionNavView. A container for view content and any navigational and header bar information."),["cache-view:b","can-swipe-back:b","hide-back-button:b","hide-nav-bar:b","view-title"])};function d(){var e=["aria-activedescendant","aria-atomic:b","aria-autocomplete:autocomplete","aria-busy:b","aria-checked:tristate","aria-colcount","aria-colindex","aria-colspan","aria-controls","aria-current:current","aria-describedat","aria-describedby","aria-disabled:b","aria-dropeffect:dropeffect","aria-errormessage","aria-expanded:u","aria-flowto","aria-grabbed:u","aria-haspopup:b","aria-hidden:b","aria-invalid:invalid","aria-kbdshortcuts","aria-label","aria-labelledby","aria-level","aria-live:live","aria-modal:b","aria-multiline:b","aria-multiselectable:b","aria-orientation:orientation","aria-owns","aria-placeholder","aria-posinset","aria-pressed:tristate","aria-readonly:b","aria-relevant:relevant","aria-required:b","aria-roledescription","aria-rowcount","aria-rowindex","aria-rowspan","aria-selected:u","aria-setsize","aria-sort:sort","aria-valuemax","aria-valuemin","aria-valuenow","aria-valuetext","accesskey","class","contenteditable:b","contextmenu","dir:d","draggable:b","dropzone","hidden:v","id","itemid","itemprop","itemref","itemscope:v","itemtype","lang","role:roles","spellcheck:b","style","tabindex","title","translate:y"],t=["onabort","onblur","oncanplay","oncanplaythrough","onchange","onclick","oncontextmenu","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformchange","onforminput","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","onmousewheel","onpause","onplay","onplaying","onprogress","onratechange","onreset","onresize","onreadystatechange","onscroll","onseeked","onseeking","onselect","onshow","onstalled","onsubmit","onsuspend","ontimeupdate","onvolumechange","onwaiting"],n={b:["true","false"],u:["true","false","undefined"],o:["on","off"],y:["yes","no"],w:["soft","hard"],d:["ltr","rtl","auto"],m:["GET","POST","dialog"],fm:["GET","POST"],s:["row","col","rowgroup","colgroup"],t:["hidden","text","search","tel","url","email","password","datetime","date","month","week","time","datetime-local","number","range","color","checkbox","radio","file","submit","image","reset","button"],im:["verbatim","latin","latin-name","latin-prose","full-width-latin","kana","kana-name","katakana","numeric","tel","email","url"],bt:["button","submit","reset","menu"],lt:["1","a","A","i","I"],mt:["context","toolbar"],mit:["command","checkbox","radio"],et:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],tk:["subtitles","captions","descriptions","chapters","metadata"],pl:["none","metadata","auto"],sh:["circle","default","poly","rect"],xo:["anonymous","use-credentials"],sb:["allow-forms","allow-modals","allow-pointer-lock","allow-popups","allow-popups-to-escape-sandbox","allow-same-origin","allow-scripts","allow-top-navigation"],tristate:["true","false","mixed","undefined"],inputautocomplete:["additional-name","address-level1","address-level2","address-level3","address-level4","address-line1","address-line2","address-line3","bday","bday-year","bday-day","bday-month","billing","cc-additional-name","cc-csc","cc-exp","cc-exp-month","cc-exp-year","cc-family-name","cc-given-name","cc-name","cc-number","cc-type","country","country-name","current-password","email","family-name","fax","given-name","home","honorific-prefix","honorific-suffix","impp","language","mobile","name","new-password","nickname","organization","organization-title","pager","photo","postal-code","sex","shipping","street-address","tel-area-code","tel","tel-country-code","tel-extension","tel-local","tel-local-prefix","tel-local-suffix","tel-national","transaction-amount","transaction-currency","url","username","work"],autocomplete:["inline","list","both","none"],current:["page","step","location","date","time","true","false"],dropeffect:["copy","move","link","execute","popup","none"],invalid:["grammar","false","spelling","true"],live:["off","polite","assertive"],orientation:["vertical","horizontal","undefined"],relevant:["additions","removals","text","all","additions text"],sort:["ascending","descending","none","other"],roles:["alert","alertdialog","button","checkbox","dialog","gridcell","link","log","marquee","menuitem","menuitemcheckbox","menuitemradio","option","progressbar","radio","scrollbar","searchbox","slider","spinbutton","status","switch","tab","tabpanel","textbox","timer","tooltip","treeitem","combobox","grid","listbox","menu","menubar","radiogroup","tablist","tree","treegrid","application","article","cell","columnheader","definition","directory","document","feed","figure","group","heading","img","list","listitem","math","none","note","presentation","region","row","rowgroup","rowheader","separator","table","term","text","toolbar","banner","complementary","contentinfo","form","main","navigation","region","search","doc-abstract","doc-acknowledgments","doc-afterword","doc-appendix","doc-backlink","doc-biblioentry","doc-bibliography","doc-biblioref","doc-chapter","doc-colophon","doc-conclusion","doc-cover","doc-credit","doc-credits","doc-dedication","doc-endnote","doc-endnotes","doc-epigraph","doc-epilogue","doc-errata","doc-example","doc-footnote","doc-foreword","doc-glossary","doc-glossref","doc-index","doc-introduction","doc-noteref","doc-notice","doc-pagebreak","doc-pagelist","doc-part","doc-preface","doc-prologue","doc-pullquote","doc-qna","doc-subtitle","doc-tip","doc-toc"]};return{getId:function(){return"html5"},isApplicable:function(){return!0},collectTags:function(e){return p(e,c)},collectAttributes:function(n,r){m(n,r,c,e),t.forEach(function(e){r(e,"event")})},collectValues:function(t,r,i){return g(t,r,i,c,e,n)}}}function h(){var e={input:["ng-model","ng-required","ng-minlength","ng-maxlength","ng-pattern","ng-trim"],select:["ng-model"],textarea:["ng-model","ng-required","ng-minlength","ng-maxlength","ng-pattern","ng-trim"]},t=["ng-app","ng-strict-di","ng-bind","ng-bind-html","ng-bind-template","ng-blur","ng-change","ng-checked","ng-class","ng-class-even","ng-class-odd","ng-click","ng-cloak","ng-controller","ng-copy","ng-csp","ng-cut","ng-dblclick","ng-disabled","ng-focus","ng-form","ng-hide","ng-href","ng-if","ng-include","ng-init","ng-jq","ng-keydown","ng-keypress","ng-keyup","ng-list","ng-model-options","ng-mousedown","ng-mouseenter","ng-mouseleave","ng-mousemove","ng-mouseover","ng-mouseup","ng-non-bindable","ng-open","ng-options","ng-paste","ng-pluralize","ng-readonly","ng-repeat","ng-selected","ng-show","ng-src","ng-srcset","ng-style","ng-submit","ng-switch","ng-transclude","ng-value"];return{getId:function(){return"angular1"},isApplicable:function(e){return"html"===e},collectTags:function(e){},collectAttributes:function(n,r){if(n){var i=e[n];i&&i.forEach(function(e){r(e),r("data-"+e)})}t.forEach(function(e){r(e),r("data-"+e)})},collectValues:function(e,t,n){}}}function f(){var e={a:["nav-direction:navdir","nav-transition:trans"],button:["menu-toggle:menusides"]},t=["collection-repeat","force-refresh-images:b","ion-stop-event","item-height","item-render-buffer","item-width","menu-close:v","on-double-tap","on-drag","on-drag-down","on-drag-left","on-drag-right","on-drag-up","on-hold","on-release","on-swipe","on-swipe-down","on-swipe-left","on-swipe-right","on-swipe-up","on-tap","on-touch"],n={align:["center","left","right"],b:["true","false"],inputtype:["email","number","password","search","tel","text","url"],listtype:["card","list-inset"],menusides:["left","right"],navdir:["back","enter","exit","forward","swap"],navsides:["left","primary","right","secondary"],scrolldir:["x","xy","y"],trans:["android","ios","none"]};return{getId:function(){return"ionic"},isApplicable:function(e){return"html"===e},collectTags:function(e){return p(e,l)},collectAttributes:function(n,r){if(m(n,r,l,t),n){var i=e[n];i&&i.forEach(function(e){var t=e.split(":");r(t[0],t[1])})}},collectValues:function(r,i,o){return g(r,i,o,l,t,n,e)}}}function p(e,t){for(var n in t)e(n,t[n].label)}function m(e,t,n,r){if(r.forEach(function(e){var n=e.split(":");t(n[0],n[1])}),e){var i=n[e];if(i){var o=i.attributes;o&&o.forEach(function(e){var n=e.split(":");t(n[0],n[1])})}}}function g(e,t,n,i,o,a,s){var u=t+":",c=function(e){e.forEach(function(e){if(e.length>u.length&&r.startsWith(e,u)){var i=e.substr(u.length);if("v"===i)n(t);else{var o=a[i];o&&o.forEach(n)}}})};if(e){var l=i[e];if(l){var d=l.attributes;d&&c(d)}}if(c(o),s){var h=s[e];h&&c(h)}}
/*!
END THIRD PARTY
*/},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/razorTags.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/razorTags.js ***!
  \***************************************************************************************************************/
/*! exports provided: getRazorTagProvider */function(e,t,n){"use strict";function r(){var e={a:["asp-action","asp-controller","asp-fragment","asp-host","asp-protocol","asp-route"],div:["asp-validation-summary"],form:["asp-action","asp-controller","asp-anti-forgery"],input:["asp-for","asp-format"],label:["asp-for"],select:["asp-for","asp-items"],span:["asp-validation-for"]};return{getId:function(){return"razor"},isApplicable:function(e){return"razor"===e},collectTags:function(e){},collectAttributes:function(t,n){if(t){var r=e[t];r&&r.forEach(function(e){return n(e)})}},collectValues:function(e,t,n){}}}n.r(t),n.d(t,"getRazorTagProvider",function(){return r})},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlCompletion.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlCompletion.js ***!
  \**********************************************************************************************************************/
/*! exports provided: HTMLCompletion */function(e,t,n){"use strict";n.r(t),n.d(t,"HTMLCompletion",function(){return d});var r=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),i=n(/*! ../parser/htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),o=n(/*! ../parser/htmlTags.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlTags.js"),a=n(/*! ./tagProviders.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/tagProviders.js"),s=n(/*! ../parser/htmlEntities.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlEntities.js"),u=n(/*! ../../../fillers/vscode-nls.js */"./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js"),c=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js"),l=u.loadMessageBundle(),d=function(){function e(){this.completionParticipants=[]}return e.prototype.setCompletionParticipants=function(e){this.completionParticipants=e||[]},e.prototype.doComplete=function(e,t,n,u){var d={isIncomplete:!1,items:[]},p=this.completionParticipants,m=a.allTagProviders.filter(function(t){return t.isApplicable(e.languageId)&&(!u||!1!==u[t.getId()])}),g=e.getText(),v=e.offsetAt(t),_=n.findNodeBefore(v);if(!_)return d;var b,y=Object(i.createScanner)(g,_.start),w="";function T(t,n){return void 0===n&&(n=v),t>v&&(t=v),{start:e.positionAt(t),end:e.positionAt(n)}}function C(e,t){var n=T(e,t);return m.forEach(function(e){e.collectTags(function(e,t){d.items.push({label:e,kind:r.CompletionItemKind.Property,documentation:t,textEdit:r.TextEdit.replace(n,e),insertTextFormat:r.InsertTextFormat.PlainText})})}),d}function S(e){for(var t=e;t>0;){var n=g.charAt(t-1);if("\n\r".indexOf(n)>=0)return g.substring(t,e);if(!h(n))return null;t--}return g.substring(0,e)}function E(e,t,n){void 0===n&&(n=v);var o=T(e,n),a=f(g,n,i.ScannerState.WithinEndTag,i.TokenType.EndTagClose)?"":">",s=_;for(t&&(s=s.parent);s;){var u=s.tag;if(u&&(!s.closed||s.endTagStart&&s.endTagStart>v)){var c={label:"/"+u,kind:r.CompletionItemKind.Property,filterText:"/"+u+a,textEdit:r.TextEdit.replace(o,"/"+u+a),insertTextFormat:r.InsertTextFormat.PlainText},l=S(s.start),h=S(e-1);if(null!==l&&null!==h&&l!==h){var p=l+"</"+u+a;c.textEdit=r.TextEdit.replace(T(e-1-h.length),p),c.filterText=h+"</"+u+a}return d.items.push(c),d}s=s.parent}return t?d:(m.forEach(function(e){e.collectTags(function(e,t){d.items.push({label:"/"+e,kind:r.CompletionItemKind.Property,documentation:t,filterText:"/"+e+a,textEdit:r.TextEdit.replace(o,"/"+e+a),insertTextFormat:r.InsertTextFormat.PlainText})})}),d)}function k(t,n){if(u&&u.hideAutoCompleteProposals)return d;if(!Object(o.isEmptyElement)(n)){var i=e.positionAt(t);d.items.push({label:"</"+n+">",kind:r.CompletionItemKind.Property,filterText:"</"+n+">",textEdit:r.TextEdit.insert(i,"$0</"+n+">"),insertTextFormat:r.InsertTextFormat.Snippet})}return d}function x(e,t){return C(e,t),E(e,!0,t),d}function A(e,t){void 0===t&&(t=v);for(var o=v;o<t&&"<"!==g[o];)o++;var a=T(e,o),s=f(g,t,i.ScannerState.AfterAttributeName,i.TokenType.DelimiterAssign)?"":'="$1"',u=w.toLowerCase(),l=Object.create(null);return m.forEach(function(e){e.collectAttributes(u,function(e,t){if(!l[e]){l[e]=!0;var n,i=e;"v"!==t&&s.length&&(i+=s,t&&(n={title:"Suggest",command:"editor.action.triggerSuggest"})),d.items.push({label:e,kind:"handler"===t?r.CompletionItemKind.Function:r.CompletionItemKind.Value,textEdit:r.TextEdit.replace(a,i),insertTextFormat:r.InsertTextFormat.Snippet,command:n})}})}),function(e,t){var i="data-",o={};o[i]=i+'$1="$2"',n&&n.roots.forEach(function(e){return function e(n){n.attributeNames.forEach(function(e){!Object(c.startsWith)(e,i)||o[e]||t[e]||(o[e]=e+'="$1"')});n.children.forEach(function(t){return e(t)})}(e)});Object.keys(o).forEach(function(t){return d.items.push({label:t,kind:r.CompletionItemKind.Value,textEdit:r.TextEdit.replace(e,o[t]),insertTextFormat:r.InsertTextFormat.Snippet})})}(a,l),d}function L(n,i){var o,a,s;if(void 0===i&&(i=v),v>n&&v<=i&&function(e){return/^["']*$/.test(e)}(g[n])){var u=n+1,c=i;i>n&&g[i-1]===g[n]&&c--;var l=function(e,t,n){for(;t>n&&!h(e[t-1]);)t--;return t}(g,v,u),f=function(e,t,n){for(;t<n&&!h(e[t]);)t++;return t}(g,v,c);o=T(l,f),s=v>=u&&v<=c?g.substring(u,v):"",a=!1}else o=T(n,i),s=g.substring(n,v),a=!0;var _=w.toLowerCase(),C=b.toLowerCase();if(p.length>0)for(var S=T(n,i),E=0,k=p;E<k.length;E++){var x=k[E];x.onHtmlAttributeValue&&x.onHtmlAttributeValue({document:e,position:t,tag:_,attribute:C,value:s,range:S})}y.getTokenText();return m.forEach(function(e){e.collectValues(_,C,function(e){var t=a?'"'+e+'"':e;d.items.push({label:e,filterText:t,kind:r.CompletionItemKind.Unit,textEdit:r.TextEdit.replace(o,t),insertTextFormat:r.InsertTextFormat.PlainText})})}),P(),d}function N(e){return v===y.getTokenEnd()&&(D=y.scan())===e&&y.getTokenOffset()===v?y.getTokenEnd():v}function O(){for(var n=0,r=p;n<r.length;n++){var i=r[n];i.onHtmlContent&&i.onHtmlContent({document:e,position:t})}return P()}function P(){for(var e=v-1,n=t.character;e>=0&&Object(c.isLetterOrDigit)(g,e);)e--,n--;if(e>=0&&"&"===g[e]){var i=r.Range.create(r.Position.create(t.line,n-1),t);for(var o in s.entities)if(Object(c.endsWith)(o,";")){var a="&"+o;d.items.push({label:a,kind:r.CompletionItemKind.Keyword,documentation:l("entity.propose","Character entity representing '"+s.entities[o]+"'"),textEdit:r.TextEdit.replace(i,a),insertTextFormat:r.InsertTextFormat.PlainText})}}return d}for(var D=y.scan();D!==i.TokenType.EOS&&y.getTokenOffset()<=v;){switch(D){case i.TokenType.StartTagOpen:if(y.getTokenEnd()===v){var j=N(i.TokenType.StartTag);return x(v,j)}break;case i.TokenType.StartTag:if(y.getTokenOffset()<=v&&v<=y.getTokenEnd())return C(y.getTokenOffset(),y.getTokenEnd());w=y.getTokenText();break;case i.TokenType.AttributeName:if(y.getTokenOffset()<=v&&v<=y.getTokenEnd())return A(y.getTokenOffset(),y.getTokenEnd());b=y.getTokenText();break;case i.TokenType.DelimiterAssign:if(y.getTokenEnd()===v){j=N(i.TokenType.AttributeValue);return L(v,j)}break;case i.TokenType.AttributeValue:if(y.getTokenOffset()<=v&&v<=y.getTokenEnd())return L(y.getTokenOffset(),y.getTokenEnd());break;case i.TokenType.Whitespace:if(v<=y.getTokenEnd())switch(y.getScannerState()){case i.ScannerState.AfterOpeningStartTag:return x(y.getTokenOffset(),N(i.TokenType.StartTag));case i.ScannerState.WithinTag:case i.ScannerState.AfterAttributeName:return A(y.getTokenEnd());case i.ScannerState.BeforeAttributeValue:return L(y.getTokenEnd());case i.ScannerState.AfterOpeningEndTag:return E(y.getTokenOffset()-1,!1);case i.ScannerState.WithinContent:return O()}break;case i.TokenType.EndTagOpen:if(v<=y.getTokenEnd())return E(y.getTokenOffset()+1,!1,N(i.TokenType.EndTag));break;case i.TokenType.EndTag:if(v<=y.getTokenEnd())for(var I=y.getTokenOffset()-1;I>=0;){var q=g.charAt(I);if("/"===q)return E(I,!1,y.getTokenEnd());if(!h(q))break;I--}break;case i.TokenType.StartTagClose:if(v<=y.getTokenEnd()&&w)return k(y.getTokenEnd(),w);break;case i.TokenType.Content:if(v<=y.getTokenEnd())return O();break;default:if(v<=y.getTokenEnd())return d}D=y.scan()}return d},e.prototype.doTagComplete=function(e,t,n){var r=e.offsetAt(t);if(r<=0)return null;var a=e.getText().charAt(r-1);if(">"===a){if((u=n.findNodeBefore(r))&&u.tag&&!Object(o.isEmptyElement)(u.tag)&&u.start<r&&(!u.endTagStart||u.endTagStart>r))for(var s=(c=Object(i.createScanner)(e.getText(),u.start)).scan();s!==i.TokenType.EOS&&c.getTokenEnd()<=r;){if(s===i.TokenType.StartTagClose&&c.getTokenEnd()===r)return"$0</"+u.tag+">";s=c.scan()}}else if("/"===a){for(var u=n.findNodeBefore(r);u&&u.closed;)u=u.parent;if(u&&u.tag){var c;for(s=(c=Object(i.createScanner)(e.getText(),u.start)).scan();s!==i.TokenType.EOS&&c.getTokenEnd()<=r;){if(s===i.TokenType.EndTagOpen&&c.getTokenEnd()===r)return u.tag+">";s=c.scan()}}}return null},e}();function h(e){return/^\s*$/.test(e)}function f(e,t,n,r){for(var o=Object(i.createScanner)(e,t,n),a=o.scan();a===i.TokenType.Whitespace;)a=o.scan();return a===r}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlFormatter.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlFormatter.js ***!
  \*********************************************************************************************************************/
/*! exports provided: format */function(e,t,n){"use strict";n.r(t),n.d(t,"format",function(){return a});var r=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),i=n(/*! ../beautify/beautify-html.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-html.js"),o=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js");function a(e,t,n){var a=e.getText(),d=!0,h=0,f=n.tabSize||4;if(t){for(var p=e.offsetAt(t.start),m=p;m>0&&l(a,m-1);)m--;0===m||c(a,m-1)?p=m:m<p&&(p=m+1);for(var g=e.offsetAt(t.end),v=g;v<a.length&&l(a,v);)v++;if((v===a.length||c(a,v))&&(g=v),t=r.Range.create(e.positionAt(p),e.positionAt(g)),d=g===a.length,a=a.substring(p,g),0!==p){var _=e.offsetAt(r.Position.create(t.start.line,0));h=function(e,t,n){var r=t,i=0,o=n.tabSize||4;for(;r<e.length;){var a=e.charAt(r);if(" "===a)i++;else{if("\t"!==a)break;i+=o}r++}return Math.floor(i/o)}(e.getText(),_,n)}}else t=r.Range.create(r.Position.create(0,0),e.positionAt(a.length));var b={indent_size:n.insertSpaces?f:1,indent_char:n.insertSpaces?" ":"\t",wrap_line_length:s(n,"wrapLineLength",120),unformatted:u(n,"unformatted",void 0),content_unformatted:u(n,"contentUnformatted",void 0),indent_inner_html:s(n,"indentInnerHtml",!1),preserve_newlines:s(n,"preserveNewLines",!0),max_preserve_newlines:s(n,"maxPreserveNewLines",32786),indent_handlebars:s(n,"indentHandlebars",!1),end_with_newline:d&&s(n,"endWithNewline",!1),extra_liners:u(n,"extraLiners",void 0),wrap_attributes:s(n,"wrapAttributes","auto"),eol:"\n"},y=Object(i.html_beautify)(a,b);if(h>0){var w=n.insertSpaces?Object(o.repeat)(" ",f*h):Object(o.repeat)("\t",h);y=y.split("\n").join("\n"+w),0===t.start.character&&(y=w+y)}return[{range:t,newText:y}]}function s(e,t,n){if(e&&e.hasOwnProperty(t)){var r=e[t];if(null!==r)return r}return n}function u(e,t,n){var r=s(e,t,null);return"string"==typeof r?r.length>0?r.split(",").map(function(e){return e.trim().toLowerCase()}):[]:n}function c(e,t){return-1!=="\r\n".indexOf(e.charAt(t))}function l(e,t){return-1!==" \t".indexOf(e.charAt(t))}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHighlighting.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHighlighting.js ***!
  \************************************************************************************************************************/
/*! exports provided: findDocumentHighlights */function(e,t,n){"use strict";n.r(t),n.d(t,"findDocumentHighlights",function(){return o});var r=n(/*! ../parser/htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),i=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js");function o(e,t,n){var o=e.offsetAt(t),a=n.findNodeAt(o);if(!a.tag)return[];var c=[],l=u(r.TokenType.StartTag,e,a.start),d="number"==typeof a.endTagStart&&u(r.TokenType.EndTag,e,a.endTagStart);return(l&&s(l,t)||d&&s(d,t))&&(l&&c.push({kind:i.DocumentHighlightKind.Read,range:l}),d&&c.push({kind:i.DocumentHighlightKind.Read,range:d})),c}function a(e,t){return e.line<t.line||e.line===t.line&&e.character<=t.character}function s(e,t){return a(e.start,t)&&a(t,e.end)}function u(e,t,n){for(var i=Object(r.createScanner)(t.getText(),n),o=i.scan();o!==r.TokenType.EOS&&o!==e;)o=i.scan();return o!==r.TokenType.EOS?{start:t.positionAt(i.getTokenOffset()),end:t.positionAt(i.getTokenEnd())}:null}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHover.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHover.js ***!
  \*****************************************************************************************************************/
/*! exports provided: doHover */function(e,t,n){"use strict";n.r(t),n.d(t,"doHover",function(){return a});var r=n(/*! ../parser/htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),i=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),o=n(/*! ./tagProviders.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/tagProviders.js");function a(e,t,n){var a=e.offsetAt(t),s=n.findNodeAt(a);if(!s||!s.tag)return null;var u=o.allTagProviders.filter(function(t){return t.isApplicable(e.languageId)});function c(e,t,n){e=e.toLowerCase();for(var r=function(r){var o=null;if(r.collectTags(function(r,a){r===e&&(o={contents:[{language:"html",value:n?"<"+e+">":"</"+e+">"},i.MarkedString.fromPlainText(a)],range:t})}),o)return{value:o}},o=0,a=u;o<a.length;o++){var s=r(a[o]);if("object"==typeof s)return s.value}return null}function l(t,n){for(var i=Object(r.createScanner)(e.getText(),n),o=i.scan();o!==r.TokenType.EOS&&(i.getTokenEnd()<a||i.getTokenEnd()===a&&o!==t);)o=i.scan();return o===t&&a<=i.getTokenEnd()?{start:e.positionAt(i.getTokenOffset()),end:e.positionAt(i.getTokenEnd())}:null}if(s.endTagStart&&a>=s.endTagStart){var d=l(r.TokenType.EndTag,s.endTagStart);return d?c(s.tag,d,!1):null}var h=l(r.TokenType.StartTag,s.start);return h?c(s.tag,h,!0):null}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlLinks.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlLinks.js ***!
  \*****************************************************************************************************************/
/*! exports provided: findDocumentLinks */function(e,t,n){"use strict";n.r(t),n.d(t,"findDocumentLinks",function(){return c});var r=n(/*! ../parser/htmlScanner.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js"),i=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),o=n(/*! ../utils/strings.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js"),a=n(/*! ../../vscode-uri/index.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-uri/index.js");function s(e,t){var n=e[0];return n!==e[e.length-1]||"'"!==n&&'"'!==n||(e=e.substr(1,e.length-2)),"razor"===t&&"~"===e[0]&&(e=e.substr(1)),e}function u(e,t,n,r,u,c){var l=s(n,e.languageId);if(!function(e,t){if(!e.length)return!1;if("handlebars"===t&&/{{.*}}/.test(e))return!1;if("razor"===t&&/@/.test(e))return!1;try{return!!a.default.parse(e)}catch(e){return!1}}(l,e.languageId))return null;l.length<n.length&&(r++,u--);var d=function(e,t,n,r){return/^\s*javascript\:/i.test(t)||/^\s*\#/i.test(t)||/[\n\r]/.test(t)?null:(t=t.replace(/^\s*/g,""),/^https?:\/\//i.test(t)||/^file:\/\//i.test(t)?t:/^\/\//i.test(t)?(o.startsWith(e,"https://")?"https":"http")+":"+t.replace(/^\s*/g,""):n?n.resolveReference(t,r||e):t)}(e.uri,l,t,c);return d&&function(e){try{return a.default.parse(e),!0}catch(e){return!1}}(d)?{range:i.Range.create(e.positionAt(r),e.positionAt(u)),target:d}:null}function c(e,t){for(var n=[],i=Object(r.createScanner)(e.getText(),0),o=i.scan(),a=!1,c=!1,l=void 0;o!==r.TokenType.EOS;){switch(o){case r.TokenType.StartTag:if(!l)c="base"===i.getTokenText().toLowerCase();break;case r.TokenType.AttributeName:var d=i.getTokenText().toLowerCase();a="src"===d||"href"===d;break;case r.TokenType.AttributeValue:if(a){var h=i.getTokenText();if(!c){var f=u(e,t,h,i.getTokenOffset(),i.getTokenEnd(),l);f&&n.push(f)}c&&void 0===l&&(l=s(h,e.languageId))&&t&&(l=t.resolveReference(l,e.uri)),c=!1,a=!1}}o=i.scan()}return n}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlSymbolsProvider.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlSymbolsProvider.js ***!
  \***************************************************************************************************************************/
/*! exports provided: findDocumentSymbols */function(e,t,n){"use strict";n.r(t),n.d(t,"findDocumentSymbols",function(){return i});var r=n(/*! ../../vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js");function i(e,t){var n=[];return t.roots.forEach(function(t){!function e(t,n,i,o){var a=function(e){var t=e.tag;if(e.attributes){var n=e.attributes.id,r=e.attributes.class;n&&(t+="#"+n.replace(/[\"\']/g,"")),r&&(t+=r.replace(/[\"\']/g,"").split(/\s+/).map(function(e){return"."+e}).join(""))}return t||"?"}(n);var s=r.Location.create(t.uri,r.Range.create(t.positionAt(n.start),t.positionAt(n.end)));var u={name:a,location:s,containerName:i,kind:r.SymbolKind.Field};o.push(u);n.children.forEach(function(n){e(t,n,a,o)})}(e,t,"",n)}),n}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/tagProviders.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/tagProviders.js ***!
  \********************************************************************************************************************/
/*! exports provided: allTagProviders */function(e,t,n){"use strict";n.r(t),n.d(t,"allTagProviders",function(){return o});var r=n(/*! ../parser/htmlTags.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlTags.js"),i=n(/*! ../parser/razorTags.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/razorTags.js"),o=[Object(r.getHTML5TagProvider)(),Object(r.getAngularTagProvider)(),Object(r.getIonicTagProvider)(),Object(i.getRazorTagProvider)()]},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/arrays.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/arrays.js ***!
  \***********************************************************************************************************/
/*! exports provided: findFirst, binarySearch */function(e,t,n){"use strict";function r(e,t){var n=0,r=e.length;if(0===r)return 0;for(;n<r;){var i=Math.floor((n+r)/2);t(e[i])?r=i:n=i+1}return n}function i(e,t,n){for(var r=0,i=e.length-1;r<=i;){var o=(r+i)/2|0,a=n(e[o],t);if(a<0)r=o+1;else{if(!(a>0))return o;i=o-1}}return-(r+1)}n.r(t),n.d(t,"findFirst",function(){return r}),n.d(t,"binarySearch",function(){return i})},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js ***!
  \************************************************************************************************************/
/*! exports provided: startsWith, endsWith, commonPrefixLength, repeat, isLetterOrDigit */function(e,t,n){"use strict";function r(e,t){if(e.length<t.length)return!1;for(var n=0;n<t.length;n++)if(e[n]!==t[n])return!1;return!0}function i(e,t){var n=e.length-t.length;return n>0?e.lastIndexOf(t)===n:0===n&&e===t}function o(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n++)if(e.charCodeAt(n)!==t.charCodeAt(n))return n;return r}function a(e,t){for(var n="";t>0;)1==(1&t)&&(n+=e),e+=e,t>>>=1;return n}n.r(t),n.d(t,"startsWith",function(){return r}),n.d(t,"endsWith",function(){return i}),n.d(t,"commonPrefixLength",function(){return o}),n.d(t,"repeat",function(){return a}),n.d(t,"isLetterOrDigit",function(){return f});var s="a".charCodeAt(0),u="z".charCodeAt(0),c="A".charCodeAt(0),l="Z".charCodeAt(0),d="0".charCodeAt(0),h="9".charCodeAt(0);function f(e,t){var n=e.charCodeAt(t);return s<=n&&n<=u||c<=n&&n<=l||d<=n&&n<=h}},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js ***!
  \***************************************************************************************************/
/*! exports provided: Position, Range, Location, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, CodeActionContext, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */function(e,t,n){"use strict";var r,i,o,a,s,u,c,l;n.r(t),n.d(t,"Position",function(){return r}),n.d(t,"Range",function(){return i}),n.d(t,"Location",function(){return o}),n.d(t,"DiagnosticSeverity",function(){return a}),n.d(t,"Diagnostic",function(){return s}),n.d(t,"Command",function(){return u}),n.d(t,"TextEdit",function(){return c}),n.d(t,"TextDocumentEdit",function(){return l}),n.d(t,"WorkspaceChange",function(){return N}),n.d(t,"TextDocumentIdentifier",function(){return d}),n.d(t,"VersionedTextDocumentIdentifier",function(){return h}),n.d(t,"TextDocumentItem",function(){return f}),n.d(t,"MarkupKind",function(){return p}),n.d(t,"CompletionItemKind",function(){return m}),n.d(t,"InsertTextFormat",function(){return g}),n.d(t,"CompletionItem",function(){return v}),n.d(t,"CompletionList",function(){return _}),n.d(t,"MarkedString",function(){return b}),n.d(t,"ParameterInformation",function(){return y}),n.d(t,"SignatureInformation",function(){return w}),n.d(t,"DocumentHighlightKind",function(){return T}),n.d(t,"DocumentHighlight",function(){return C}),n.d(t,"SymbolKind",function(){return S}),n.d(t,"SymbolInformation",function(){return E}),n.d(t,"CodeActionContext",function(){return k}),n.d(t,"CodeLens",function(){return x}),n.d(t,"FormattingOptions",function(){return A}),n.d(t,"DocumentLink",function(){return O}),n.d(t,"EOL",function(){return j}),n.d(t,"TextDocument",function(){return P}),n.d(t,"TextDocumentSaveReason",function(){return D}),function(e){e.create=function(e,t){return{line:e,character:t}},e.is=function(e){var t=e;return I.defined(t)&&I.number(t.line)&&I.number(t.character)}}(r||(r={})),function(e){e.create=function(e,t,n,i){if(I.number(e)&&I.number(t)&&I.number(n)&&I.number(i))return{start:r.create(e,t),end:r.create(n,i)};if(r.is(e)&&r.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+i+"]")},e.is=function(e){var t=e;return I.defined(t)&&r.is(t.start)&&r.is(t.end)}}(i||(i={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return I.defined(t)&&i.is(t.range)&&(I.string(t.uri)||I.undefined(t.uri))}}(o||(o={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(a||(a={})),function(e){e.create=function(e,t,n,r,i){var o={range:e,message:t};return I.defined(n)&&(o.severity=n),I.defined(r)&&(o.code=r),I.defined(i)&&(o.source=i),o},e.is=function(e){var t=e;return I.defined(t)&&i.is(t.range)&&I.string(t.message)&&(I.number(t.severity)||I.undefined(t.severity))&&(I.number(t.code)||I.string(t.code)||I.undefined(t.code))&&(I.string(t.source)||I.undefined(t.source))}}(s||(s={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={title:e,command:t};return I.defined(n)&&n.length>0&&(i.arguments=n),i},e.is=function(e){var t=e;return I.defined(t)&&I.string(t.title)&&I.string(t.title)}}(u||(u={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}}}(c||(c={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return I.defined(t)&&h.is(t.textDocument)&&Array.isArray(t.edits)}}(l||(l={}));var d,h,f,p,m,g,v,_,b,y,w,T,C,S,E,k,x,A,L=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,t){this.edits.push(c.insert(e,t))},e.prototype.replace=function(e,t){this.edits.push(c.replace(e,t))},e.prototype.delete=function(e){this.edits.push(c.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),N=function(){function e(e){var t=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var n=new L(e.edits);t._textEditChanges[e.textDocument.uri]=n}):e.changes&&Object.keys(e.changes).forEach(function(n){var r=new L(e.changes[n]);t._textEditChanges[n]=r}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(h.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var t=e;if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(n),r=new L(i),this._textEditChanges[t.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new L(i),this._textEditChanges[e]=r}return r},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return I.defined(t)&&I.string(t.uri)}}(d||(d={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return I.defined(t)&&I.string(t.uri)&&I.number(t.version)}}(h||(h={})),function(e){e.create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},e.is=function(e){var t=e;return I.defined(t)&&I.string(t.uri)&&I.string(t.languageId)&&I.number(t.version)&&I.string(t.text)}}(f||(f={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(p||(p={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(m||(m={})),function(e){e.PlainText=1,e.Snippet=2}(g||(g={})),function(e){e.create=function(e){return{label:e}}}(v||(v={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(_||(_={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(b||(b={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(y||(y={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={label:e};return I.defined(t)&&(i.documentation=t),I.defined(n)?i.parameters=n:i.parameters=[],i}}(w||(w={})),function(e){e.Text=1,e.Read=2,e.Write=3}(T||(T={})),function(e){e.create=function(e,t){var n={range:e};return I.number(t)&&(n.kind=t),n}}(C||(C={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(S||(S={})),function(e){e.create=function(e,t,n,r,i){var o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o}}(E||(E={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var t=e;return I.defined(t)&&I.typedArray(t.diagnostics,s.is)}}(k||(k={})),function(e){e.create=function(e,t){var n={range:e};return I.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return I.defined(t)&&i.is(t.range)&&(I.undefined(t.command)||u.is(t.command))}}(x||(x={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return I.defined(t)&&I.number(t.tabSize)&&I.boolean(t.insertSpaces)}}(A||(A={}));var O=function(){return function(){}}();!function(e){e.create=function(e,t){return{range:e,target:t}},e.is=function(e){var t=e;return I.defined(t)&&i.is(t.range)&&(I.undefined(t.target)||I.string(t.target))}}(O||(O={}));var P,D,j=["\n","\r\n","\r"];!function(e){e.create=function(e,t,n,r){return new q(e,t,n,r)},e.is=function(e){var t=e;return!!(I.defined(t)&&I.string(t.uri)&&(I.undefined(t.languageId)||I.string(t.languageId))&&I.number(t.lineCount)&&I.func(t.getText)&&I.func(t.positionAt)&&I.func(t.offsetAt))},e.applyEdits=function(e,t){for(var n=e.getText(),r=function e(t,n){if(t.length<=1)return t;var r=t.length/2|0,i=t.slice(0,r),o=t.slice(r);e(i,n),e(o,n);for(var a=0,s=0,u=0;a<i.length&&s<o.length;){var c=n(i[a],o[s]);t[u++]=c<=0?i[a++]:o[s++]}for(;a<i.length;)t[u++]=i[a++];for(;s<o.length;)t[u++]=o[s++];return t}(t,function(e,t){return 0==e.range.start.line-t.range.start.line?e.range.start.character-t.range.start.character:0}),i=n.length,o=r.length-1;o>=0;o--){var a=r[o],s=e.offsetAt(a.range.start),u=e.offsetAt(a.range.end);if(!(u<=i))throw new Error("Ovelapping edit");n=n.substring(0,s)+a.newText+n.substring(u,n.length),i=s}return n}}(P||(P={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(D||(D={}));var I,q=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,i=t.length;if(0===i)return r.create(0,e);for(;n<i;){var o=Math.floor((n+i)/2);t[o]>e?i=o:n=o+1}var a=n-1;return r.create(a,e-t[a])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.func=function(e){return"[object Function]"===t.call(e)},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(I||(I={}))},"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-uri/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-uri/index.js ***!
  \***********************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),function(e){function n(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return encodeURIComponent(e).replace(/[!'()*]/g,n)}function i(e){return e.replace(/[#?]/,n)}var o,a=function(){function e(){this._scheme=e._empty,this._authority=e._empty,this._path=e._empty,this._query=e._empty,this._fragment=e._empty,this._formatted=null,this._fsPath=null}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme)},Object.defineProperty(e.prototype,"scheme",{get:function(){return this._scheme},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"authority",{get:function(){return this._authority},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"path",{get:function(){return this._path},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"query",{get:function(){return this._query},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fragment",{get:function(){return this._fragment},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fsPath",{get:function(){var t;this._fsPath||(t=this._authority&&this._path&&"file"===this.scheme?"//"+this._authority+this._path:e._driveLetterPath.test(this._path)?this._path[1].toLowerCase()+this._path.substr(2):this._path,o&&(t=t.replace(/\//g,"\\")),this._fsPath=t);return this._fsPath},enumerable:!0,configurable:!0}),e.prototype.with=function(t){if(!t)return this;var n=t.scheme,r=t.authority,i=t.path,o=t.query,a=t.fragment;if(void 0===n?n=this.scheme:null===n&&(n=""),void 0===r?r=this.authority:null===r&&(r=""),void 0===i?i=this.path:null===i&&(i=""),void 0===o?o=this.query:null===o&&(o=""),void 0===a?a=this.fragment:null===a&&(a=""),n===this.scheme&&r===this.authority&&i===this.path&&o===this.query&&a===this.fragment)return this;var s=new e;return s._scheme=n,s._authority=r,s._path=i,s._query=o,s._fragment=a,e._validate(s),s},e.parse=function(t){var n=new e,r=e._parseComponents(t);return n._scheme=r.scheme,n._authority=decodeURIComponent(r.authority),n._path=decodeURIComponent(r.path),n._query=decodeURIComponent(r.query),n._fragment=decodeURIComponent(r.fragment),e._validate(n),n},e.file=function(t){var n=new e;if(n._scheme="file",o&&(t=t.replace(/\\/g,e._slash)),t[0]===e._slash&&t[0]===t[1]){var r=t.indexOf(e._slash,2);-1===r?n._authority=t.substring(2):(n._authority=t.substring(2,r),n._path=t.substring(r))}else n._path=t;return n._path[0]!==e._slash&&(n._path=e._slash+n._path),e._validate(n),n},e._parseComponents=function(t){var n={scheme:e._empty,authority:e._empty,path:e._empty,query:e._empty,fragment:e._empty},r=e._regexp.exec(t);return r&&(n.scheme=r[2]||n.scheme,n.authority=r[4]||n.authority,n.path=r[5]||n.path,n.query=r[7]||n.query,n.fragment=r[9]||n.fragment),n},e.from=function(t){return(new e).with(t)},e._validate=function(t){if(t.scheme&&!e._schemePattern.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!e._singleSlashStart.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(e._doubleSlashStart.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')},e.prototype.toString=function(t){return void 0===t&&(t=!1),t?e._asFormatted(this,!0):(this._formatted||(this._formatted=e._asFormatted(this,!1)),this._formatted)},e._asFormatted=function(t,n){var o=n?i:r,a=[],s=t.scheme,u=t.authority,c=t.path,l=t.query,d=t.fragment;(s&&a.push(s,":"),(u||"file"===s)&&a.push("//"),u)&&(-1===(p=(u=u.toLowerCase()).indexOf(":"))?a.push(o(u)):a.push(o(u.substr(0,p)),u.substr(p)));if(c){var h=e._upperCaseDrive.exec(c);h&&(c=h[1]?"/"+h[2].toLowerCase()+c.substr(3):h[2].toLowerCase()+c.substr(2));for(var f=0;;){var p;if(-1===(p=c.indexOf(e._slash,f))){a.push(o(c.substring(f)));break}a.push(o(c.substring(f,p)),e._slash),f=p+1}}return l&&a.push("?",o(l)),d&&a.push("#",o(d)),a.join(e._empty)},e.prototype.toJSON=function(){var e={fsPath:this.fsPath,external:this.toString(),$mid:1};return this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},e.revive=function(t){var n=new e;return n._scheme=t.scheme||e._empty,n._authority=t.authority||e._empty,n._path=t.path||e._empty,n._query=t.query||e._empty,n._fragment=t.fragment||e._empty,n._fsPath=t.fsPath,n._formatted=t.external,e._validate(n),n},e}();if(t.default=a,a._empty="",a._slash="/",a._regexp=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,a._driveLetterPath=/^\/[a-zA-z]:/,a._upperCaseDrive=/^(\/)?([A-Z]:)/,a._schemePattern=/^\w[\w\d+.-]*$/,a._singleSlashStart=/^\//,a._doubleSlashStart=/^\/\//,"object"==typeof e)o="win32"===e.platform;else if("object"==typeof navigator){var s=navigator.userAgent;o=s.indexOf("Windows")>=0}}.call(this,n(/*! ./../../../../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js ***!
  \*******************************************************************************/
/*! exports provided: loadMessageBundle, config */function(e,t,n){"use strict";function r(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return function(e,t){return 0===t.length?e:e.replace(/\{(\d+)\}/g,function(e,n){var r=n[0];return void 0!==t[r]?t[r]:e})}(t,n)}function i(e){return r}function o(e){return i}n.r(t),n.d(t,"loadMessageBundle",function(){return i}),n.d(t,"config",function(){return o})},"./node_modules/monaco-editor/esm/vs/language/html/html.worker.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/html.worker.js ***!
  \************************************************************************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../../editor/editor.worker.js */"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js"),i=n(/*! ./htmlWorker.js */"./node_modules/monaco-editor/esm/vs/language/html/htmlWorker.js");self.onmessage=function(){r.initialize(function(e,t){return new i.HTMLWorker(e,t)})}},"./node_modules/monaco-editor/esm/vs/language/html/htmlWorker.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/htmlWorker.js ***!
  \***********************************************************************/
/*! exports provided: HTMLWorker, create */function(e,t,n){"use strict";n.r(t),n.d(t,"HTMLWorker",function(){return a}),n.d(t,"create",function(){return s});var r=n(/*! ./_deps/vscode-html-languageservice/htmlLanguageService.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/htmlLanguageService.js"),i=n(/*! ./_deps/vscode-languageserver-types/main.js */"./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js"),o=monaco.Promise,a=function(){function e(e,t){this._ctx=e,this._languageSettings=t.languageSettings,this._languageId=t.languageId,this._languageService=r.getLanguageService()}return e.prototype.doValidation=function(e){return o.as([])},e.prototype.doComplete=function(e,t){var n=this._getTextDocument(e),r=this._languageService.parseHTMLDocument(n);return o.as(this._languageService.doComplete(n,t,r,this._languageSettings&&this._languageSettings.suggest))},e.prototype.format=function(e,t,n){var r=this._getTextDocument(e),i=this._languageService.format(r,t,this._languageSettings&&this._languageSettings.format);return o.as(i)},e.prototype.findDocumentHighlights=function(e,t){var n=this._getTextDocument(e),r=this._languageService.parseHTMLDocument(n),i=this._languageService.findDocumentHighlights(n,t,r);return o.as(i)},e.prototype.findDocumentLinks=function(e){var t=this._getTextDocument(e),n=this._languageService.findDocumentLinks(t,null);return o.as(n)},e.prototype._getTextDocument=function(e){for(var t=0,n=this._ctx.getMirrorModels();t<n.length;t++){var r=n[t];if(r.uri.toString()===e)return i.TextDocument.create(e,this._languageId,r.version,r.getValue())}return null},e}();function s(e,t){return new a(e,t)}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,d=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&f())}function f(){if(!l){var e=s(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||l||s(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,