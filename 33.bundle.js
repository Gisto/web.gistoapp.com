(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js ***!
  \**************************************************************************************************************************/
/*! exports provided: removeProperty, setProperty, applyEdit, isWS */function(e,n,t){"use strict";t.r(n),t.d(n,"removeProperty",function(){return i}),t.d(n,"setProperty",function(){return a}),t.d(n,"applyEdit",function(){return s}),t.d(n,"isWS",function(){return c});var r=t(/*! ./format.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js"),o=t(/*! ./parser.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js");function i(e,n,t){return a(e,n,void 0,t)}function a(e,n,t,r,i){for(var a,s=Object(o.parseTree)(e,[]),c=void 0,f=void 0;n.length>0&&(f=n.pop(),void 0===(c=Object(o.findNodeAtLocation)(s,n))&&void 0!==t);)"string"==typeof f?((a={})[f]=t,t=a):t=[t];if(c){if("object"===c.type&&"string"==typeof f&&Array.isArray(c.children)){var d=Object(o.findNodeAtLocation)(c,[f]);if(void 0!==d){if(void 0===t){if(!d.parent)throw new Error("Malformed AST");var l=c.children.indexOf(d.parent),g=void 0,h=d.parent.offset+d.parent.length;if(l>0)g=(_=c.children[l-1]).offset+_.length;else if(g=c.offset+1,c.children.length>1)h=c.children[1].offset;return u(e,{offset:g,length:h-g,content:""},r)}return u(e,{offset:d.offset,length:d.length,content:JSON.stringify(t)},r)}if(void 0===t)return[];var m=JSON.stringify(f)+": "+JSON.stringify(t),p=i?i(c.children.map(function(e){return e.children[0].value})):c.children.length,v=void 0;return u(e,v=p>0?{offset:(_=c.children[p-1]).offset+_.length,length:0,content:","+m}:0===c.children.length?{offset:c.offset+1,length:0,content:m}:{offset:c.offset+1,length:0,content:m+","},r)}if("array"===c.type&&"number"==typeof f&&Array.isArray(c.children)){if(-1===f){m=""+JSON.stringify(t),v=void 0;if(0===c.children.length)v={offset:c.offset+1,length:0,content:m};else v={offset:(_=c.children[c.children.length-1]).offset+_.length,length:0,content:","+m};return u(e,v,r)}if(void 0===t&&c.children.length>=0){var b=f,y=c.children[b];v=void 0;if(1===c.children.length)v={offset:c.offset+1,length:c.length-2,content:""};else if(c.children.length-1===b){var _,k=(_=c.children[b-1]).offset+_.length;v={offset:k,length:c.offset+c.length-2-k,content:""}}else v={offset:y.offset,length:c.children[b+1].offset-y.offset,content:""};return u(e,v,r)}throw new Error("Array modification not supported yet")}throw new Error("Can not add "+("number"!=typeof f?"index":"property")+" to parent of type "+c.type)}if(void 0===t)throw new Error("Can not delete in empty document");return u(e,{offset:s?s.offset:0,length:s?s.length:0,content:JSON.stringify(t)},r)}function u(e,n,t){var o=s(e,n),i=n.offset,a=n.offset+n.content.length;if(0===n.length||0===n.content.length){for(;i>0&&!Object(r.isEOL)(o,i-1);)i--;for(;a<o.length&&!Object(r.isEOL)(o,a);)a++}for(var u=Object(r.format)(o,{offset:i,length:a-i},t),c=u.length-1;c>=0;c--){var f=u[c];o=s(o,f),i=Math.min(i,f.offset),a=Math.max(a,f.offset+f.length),a+=f.content.length-f.length}return[{offset:i,length:e.length-(o.length-a)-i,content:o.substring(i,a)}]}function s(e,n){return e.substring(0,n.offset)+n.content+e.substring(n.offset+n.length)}function c(e,n){return-1!=="\r\n \t".indexOf(e.charAt(n))}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js ***!
  \****************************************************************************************************************************/
/*! exports provided: format, isEOL */function(e,n,t){"use strict";t.r(n),t.d(n,"format",function(){return o}),t.d(n,"isEOL",function(){return a});var r=t(/*! ./scanner.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js");function o(e,n,t){var o,u,s,c,f;if(n){for(c=n.offset,f=c+n.length,s=c;s>0&&!a(e,s-1);)s--;for(var d=f;d<e.length&&!a(e,d);)d++;u=e.substring(s,d),o=function(e,n,t){var r=0,o=0,i=t.tabSize||4;for(;r<e.length;){var a=e.charAt(r);if(" "===a)o++;else{if("\t"!==a)break;o+=i}r++}return Math.floor(o/i)}(u,0,t)}else u=e,o=0,s=0,c=0,f=e.length;var l,g=function(e,n){for(var t=0;t<n.length;t++){var r=n.charAt(t);if("\r"===r)return t+1<n.length&&"\n"===n.charAt(t+1)?"\r\n":"\r";if("\n"===r)return"\n"}return e&&e.eol||"\n"}(t,e),h=!1,m=0;l=t.insertSpaces?i(" ",t.tabSize||4):"\t";var p=Object(r.createScanner)(u,!1),v=!1;function b(){return g+i(l,o+m)}function y(){var e=p.scan();for(h=!1;15===e||14===e;)h=h||14===e,e=p.scan();return v=16===e||0!==p.getTokenError(),e}var _=[];function k(n,t,r){!v&&t<f&&r>c&&e.substring(t,r)!==n&&_.push({offset:t,length:r-t,content:n})}var C=y();if(17!==C){var w=p.getTokenOffset()+s;k(i(l,o),s,w)}for(;17!==C;){for(var j=p.getTokenOffset()+p.getTokenLength()+s,E=y(),S="";!h&&(12===E||13===E);){k(" ",j,p.getTokenOffset()+s),j=p.getTokenOffset()+p.getTokenLength()+s,S=12===E?b():"",E=y()}if(2===E)1!==C&&(m--,S=b());else if(4===E)3!==C&&(m--,S=b());else{switch(C){case 3:case 1:m++,S=b();break;case 5:case 12:S=b();break;case 13:S=h?b():" ";break;case 6:S=" ";break;case 10:if(6===E){S="";break}case 7:case 8:case 9:case 11:case 2:case 4:12===E||13===E?S=" ":5!==E&&17!==E&&(v=!0);break;case 16:v=!0}!h||12!==E&&13!==E||(S=b())}k(S,j,p.getTokenOffset()+s),C=E}return _}function i(e,n){for(var t="",r=0;r<n;r++)t+=e;return t}function a(e,n){return-1!=="\r\n".indexOf(e.charAt(n))}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js ***!
  \****************************************************************************************************************************/
/*! exports provided: getLocation, parse, parseTree, findNodeAtLocation, getNodeValue, visit, stripComments */function(e,n,t){"use strict";t.r(n),t.d(n,"getLocation",function(){return o}),t.d(n,"parse",function(){return i}),t.d(n,"parseTree",function(){return a}),t.d(n,"findNodeAtLocation",function(){return u}),t.d(n,"getNodeValue",function(){return s}),t.d(n,"visit",function(){return c}),t.d(n,"stripComments",function(){return f});var r=t(/*! ./scanner.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js");function o(e,n){var t=[],r=new Object,o=void 0,i={value:{},offset:0,length:0,type:"object"},a=!1;function u(e,n,t,r){i.value=e,i.offset=n,i.length=t,i.type=r,i.columnOffset=void 0,o=i}try{c(e,{onObjectBegin:function(e,i){if(n<=e)throw r;o=void 0,a=n>e,t.push("")},onObjectProperty:function(e,o,i){if(n<o)throw r;if(u(e,o,i,"property"),t[t.length-1]=e,n<=o+i)throw r},onObjectEnd:function(e,i){if(n<=e)throw r;o=void 0,t.pop()},onArrayBegin:function(e,i){if(n<=e)throw r;o=void 0,t.push(0)},onArrayEnd:function(e,i){if(n<=e)throw r;o=void 0,t.pop()},onLiteralValue:function(e,t,o){if(n<t)throw r;if(u(e,t,o,d(e)),n<=t+o)throw r},onSeparator:function(e,i,u){if(n<=i)throw r;if(":"===e&&o&&"property"===o.type)o.columnOffset=i,a=!1,o=void 0;else if(","===e){var s=t[t.length-1];"number"==typeof s?t[t.length-1]=s+1:(a=!0,t[t.length-1]=""),o=void 0}}})}catch(e){if(e!==r)throw e}return{path:t,previousNode:o,isAtPropertyKey:a,matches:function(e){for(var n=0,r=0;n<e.length&&r<t.length;r++)if(e[n]===t[r]||"*"===e[n])n++;else if("**"!==e[n])return!1;return n===e.length}}}function i(e,n,t){void 0===n&&(n=[]);var r=null,o=[],i=[];function a(e){Array.isArray(o)?o.push(e):r&&(o[r]=e)}return c(e,{onObjectBegin:function(){var e={};a(e),i.push(o),o=e,r=null},onObjectProperty:function(e){r=e},onObjectEnd:function(){o=i.pop()},onArrayBegin:function(){var e=[];a(e),i.push(o),o=e,r=null},onArrayEnd:function(){o=i.pop()},onLiteralValue:a,onError:function(e,t,r){n.push({error:e,offset:t,length:r})}},t),o[0]}function a(e,n,t){void 0===n&&(n=[]);var r={type:"array",offset:-1,length:-1,children:[]};function o(e){"property"===r.type&&(r.length=e-r.offset,r=r.parent)}function i(e){return r.children.push(e),e}c(e,{onObjectBegin:function(e){r=i({type:"object",offset:e,length:-1,parent:r,children:[]})},onObjectProperty:function(e,n,t){(r=i({type:"property",offset:n,length:-1,parent:r,children:[]})).children.push({type:"string",value:e,offset:n,length:t,parent:r})},onObjectEnd:function(e,n){r.length=e+n-r.offset,r=r.parent,o(e+n)},onArrayBegin:function(e,n){r=i({type:"array",offset:e,length:-1,parent:r,children:[]})},onArrayEnd:function(e,n){r.length=e+n-r.offset,r=r.parent,o(e+n)},onLiteralValue:function(e,n,t){i({type:d(e),offset:n,length:t,parent:r,value:e}),o(n+t)},onSeparator:function(e,n,t){"property"===r.type&&(":"===e?r.columnOffset=n:","===e&&o(n))},onError:function(e,t,r){n.push({error:e,offset:t,length:r})}},t);var a=r.children[0];return a&&delete a.parent,a}function u(e,n){if(e){for(var t=e,r=0,o=n;r<o.length;r++){var i=o[r];if("string"==typeof i){if("object"!==t.type||!Array.isArray(t.children))return;for(var a=!1,u=0,s=t.children;u<s.length;u++){var c=s[u];if(Array.isArray(c.children)&&c.children[0].value===i){t=c.children[1],a=!0;break}}if(!a)return}else{var f=i;if("array"!==t.type||f<0||!Array.isArray(t.children)||f>=t.children.length)return;t=t.children[f]}}return t}}function s(e){if("array"===e.type)return e.children.map(s);if("object"===e.type){for(var n=Object.create(null),t=0,r=e.children;t<r.length;t++){var o=r[t];n[o.children[0].value]=s(o.children[1])}return n}return e.value}function c(e,n,t){var o=Object(r.createScanner)(e,!1);function i(e){return e?function(){return e(o.getTokenOffset(),o.getTokenLength())}:function(){return!0}}function a(e){return e?function(n){return e(n,o.getTokenOffset(),o.getTokenLength())}:function(){return!0}}var u=i(n.onObjectBegin),s=a(n.onObjectProperty),c=i(n.onObjectEnd),f=i(n.onArrayBegin),d=i(n.onArrayEnd),l=a(n.onLiteralValue),g=a(n.onSeparator),h=i(n.onComment),m=a(n.onError),p=t&&t.disallowComments,v=t&&t.allowTrailingComma;function b(){for(;;){var e=o.scan();switch(o.getTokenError()){case 4:y(14);break;case 5:y(15);break;case 3:y(13);break;case 1:p||y(11);break;case 2:y(12);break;case 6:y(16)}switch(e){case 12:case 13:p?y(10):h();break;case 16:y(1);break;case 15:case 14:break;default:return e}}}function y(e,n,t){if(void 0===n&&(n=[]),void 0===t&&(t=[]),m(e),n.length+t.length>0)for(var r=o.getToken();17!==r;){if(-1!==n.indexOf(r)){b();break}if(-1!==t.indexOf(r))break;r=b()}}function _(e){var n=o.getTokenValue();return e?l(n):s(n),b(),!0}function k(){switch(o.getToken()){case 3:return function(){f(),b();for(var e=!1;4!==o.getToken()&&17!==o.getToken();){if(5===o.getToken()){if(e||y(4,[],[]),g(","),b(),4===o.getToken()&&v)break}else e&&y(6,[],[]);k()||y(4,[],[4,5]),e=!0}return d(),4!==o.getToken()?y(8,[4],[]):b(),!0}();case 1:return function(){u(),b();for(var e=!1;2!==o.getToken()&&17!==o.getToken();){if(5===o.getToken()){if(e||y(4,[],[]),g(","),b(),2===o.getToken()&&v)break}else e&&y(6,[],[]);(10!==o.getToken()?(y(3,[],[2,5]),0):(_(!1),6===o.getToken()?(g(":"),b(),k()||y(4,[],[2,5])):y(5,[],[2,5]),1))||y(4,[],[2,5]),e=!0}return c(),2!==o.getToken()?y(7,[2],[]):b(),!0}();case 10:return _(!0);default:return function(){switch(o.getToken()){case 11:var e=0;try{"number"!=typeof(e=JSON.parse(o.getTokenValue()))&&(y(2),e=0)}catch(e){y(2)}l(e);break;case 7:l(null);break;case 8:l(!0);break;case 9:l(!1);break;default:return!1}return b(),!0}()}}return b(),17===o.getToken()||(k()?(17!==o.getToken()&&y(9,[],[]),!0):(y(4,[],[]),!1))}function f(e,n){var t,o,i=Object(r.createScanner)(e),a=[],u=0;do{switch(o=i.getPosition(),t=i.scan()){case 12:case 13:case 17:u!==o&&a.push(e.substring(u,o)),void 0!==n&&a.push(i.getTokenValue().replace(/[^\r\n]/g,n)),u=i.getPosition()}}while(17!==t);return a.join("")}function d(e){switch(typeof e){case"boolean":return"boolean";case"number":return"number";case"string":return"string";default:return"null"}}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js ***!
  \*****************************************************************************************************************************/
/*! exports provided: createScanner */function(e,n,t){"use strict";function r(e,n){void 0===n&&(n=!1);var t=0,r=e.length,u="",s=0,c=16,f=0;function d(n,r){for(var o=0,i=0;o<n||!r;){var a=e.charCodeAt(t);if(a>=48&&a<=57)i=16*i+a-48;else if(a>=65&&a<=70)i=16*i+a-65+10;else{if(!(a>=97&&a<=102))break;i=16*i+a-97+10}t++,o++}return o<n&&(i=-1),i}function l(){if(u="",f=0,s=t,t>=r)return s=r,c=17;var n=e.charCodeAt(t);if(o(n)){do{t++,u+=String.fromCharCode(n),n=e.charCodeAt(t)}while(o(n));return c=15}if(i(n))return t++,u+=String.fromCharCode(n),13===n&&10===e.charCodeAt(t)&&(t++,u+="\n"),c=14;switch(n){case 123:return t++,c=1;case 125:return t++,c=2;case 91:return t++,c=3;case 93:return t++,c=4;case 58:return t++,c=6;case 44:return t++,c=5;case 34:return t++,u=function(){for(var n="",o=t;;){if(t>=r){n+=e.substring(o,t),f=2;break}var a=e.charCodeAt(t);if(34===a){n+=e.substring(o,t),t++;break}if(92!==a){if(a>=0&&a<=31){if(i(a)){n+=e.substring(o,t),f=2;break}f=6}t++}else{if(n+=e.substring(o,t),++t>=r){f=2;break}switch(a=e.charCodeAt(t++)){case 34:n+='"';break;case 92:n+="\\";break;case 47:n+="/";break;case 98:n+="\b";break;case 102:n+="\f";break;case 110:n+="\n";break;case 114:n+="\r";break;case 116:n+="\t";break;case 117:var u=d(4,!0);u>=0?n+=String.fromCharCode(u):f=4;break;default:f=5}o=t}}return n}(),c=10;case 47:var l=t-1;if(47===e.charCodeAt(t+1)){for(t+=2;t<r&&!i(e.charCodeAt(t));)t++;return u=e.substring(l,t),c=12}if(42===e.charCodeAt(t+1)){t+=2;for(var h=!1;t<r;){if(42===e.charCodeAt(t)&&t+1<r&&47===e.charCodeAt(t+1)){t+=2,h=!0;break}t++}return h||(t++,f=1),u=e.substring(l,t),c=13}return u+=String.fromCharCode(n),t++,c=16;case 45:if(u+=String.fromCharCode(n),++t===r||!a(e.charCodeAt(t)))return c=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return u+=function(){var n=t;if(48===e.charCodeAt(t))t++;else for(t++;t<e.length&&a(e.charCodeAt(t));)t++;if(t<e.length&&46===e.charCodeAt(t)){if(!(++t<e.length&&a(e.charCodeAt(t))))return f=3,e.substring(n,t);for(t++;t<e.length&&a(e.charCodeAt(t));)t++}var r=t;if(t<e.length&&(69===e.charCodeAt(t)||101===e.charCodeAt(t)))if((++t<e.length&&43===e.charCodeAt(t)||45===e.charCodeAt(t))&&t++,t<e.length&&a(e.charCodeAt(t))){for(t++;t<e.length&&a(e.charCodeAt(t));)t++;r=t}else f=3;return e.substring(n,r)}(),c=11;default:for(;t<r&&g(n);)t++,n=e.charCodeAt(t);if(s!==t){switch(u=e.substring(s,t)){case"true":return c=8;case"false":return c=9;case"null":return c=7}return c=16}return u+=String.fromCharCode(n),t++,c=16}}function g(e){if(o(e)||i(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:return!1}return!0}return{setPosition:function(e){t=e,u="",s=0,c=16,f=0},getPosition:function(){return t},scan:n?function(){var e;do{e=l()}while(e>=12&&e<=15);return e}:l,getToken:function(){return c},getTokenValue:function(){return u},getTokenOffset:function(){return s},getTokenLength:function(){return t-s},getTokenError:function(){return f}}}function o(e){return 32===e||9===e||11===e||12===e||160===e||5760===e||e>=8192&&e<=8203||8239===e||8287===e||12288===e||65279===e}function i(e){return 10===e||13===e||8232===e||8233===e}function a(e){return e>=48&&e<=57}t.r(n),t.d(n,"createScanner",function(){return r})},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js ***!
  \*********************************************************************************************************************/
/*! exports provided: createScanner, getLocation, parse, parseTree, findNodeAtLocation, getNodeValue, visit, stripComments, format, modify, applyEdits */function(e,n,t){"use strict";t.r(n),t.d(n,"createScanner",function(){return u}),t.d(n,"getLocation",function(){return s}),t.d(n,"parse",function(){return c}),t.d(n,"parseTree",function(){return f}),t.d(n,"findNodeAtLocation",function(){return d}),t.d(n,"getNodeValue",function(){return l}),t.d(n,"visit",function(){return g}),t.d(n,"stripComments",function(){return h}),t.d(n,"format",function(){return m}),t.d(n,"modify",function(){return p}),t.d(n,"applyEdits",function(){return v});var r=t(/*! ./impl/format.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js"),o=t(/*! ./impl/edit.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js"),i=t(/*! ./impl/scanner.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js"),a=t(/*! ./impl/parser.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js"),u=i.createScanner,s=a.getLocation,c=a.parse,f=a.parseTree,d=a.findNodeAtLocation,l=a.getNodeValue,g=a.visit,h=a.stripComments;function m(e,n,t){return r.format(e,n,t)}function p(e,n,t,r){return o.setProperty(e,n,t,r.formattingOptions,r.getInsertionIndex)}function v(e,n){for(var t=n.length-1;t>=0;t--)e=o.applyEdit(e,n[t]);return e}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js ***!
  \************************************************************************************************************************************/
/*! exports provided: Position, Range, Location, DiagnosticSeverity, Diagnostic, Command, TextEdit, TextDocumentEdit, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, CompletionItemKind, InsertTextFormat, CompletionItem, CompletionList, MarkedString, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolInformation, CodeActionContext, CodeLens, FormattingOptions, DocumentLink, EOL, TextDocument, TextDocumentSaveReason */function(e,n,t){"use strict";var r,o,i,a,u,s,c,f;t.r(n),t.d(n,"Position",function(){return r}),t.d(n,"Range",function(){return o}),t.d(n,"Location",function(){return i}),t.d(n,"DiagnosticSeverity",function(){return a}),t.d(n,"Diagnostic",function(){return u}),t.d(n,"Command",function(){return s}),t.d(n,"TextEdit",function(){return c}),t.d(n,"TextDocumentEdit",function(){return f}),t.d(n,"WorkspaceChange",function(){return I}),t.d(n,"TextDocumentIdentifier",function(){return d}),t.d(n,"VersionedTextDocumentIdentifier",function(){return l}),t.d(n,"TextDocumentItem",function(){return g}),t.d(n,"MarkupKind",function(){return h}),t.d(n,"CompletionItemKind",function(){return m}),t.d(n,"InsertTextFormat",function(){return p}),t.d(n,"CompletionItem",function(){return v}),t.d(n,"CompletionList",function(){return b}),t.d(n,"MarkedString",function(){return y}),t.d(n,"ParameterInformation",function(){return _}),t.d(n,"SignatureInformation",function(){return k}),t.d(n,"DocumentHighlightKind",function(){return C}),t.d(n,"DocumentHighlight",function(){return w}),t.d(n,"SymbolKind",function(){return j}),t.d(n,"SymbolInformation",function(){return E}),t.d(n,"CodeActionContext",function(){return S}),t.d(n,"CodeLens",function(){return T}),t.d(n,"FormattingOptions",function(){return A}),t.d(n,"DocumentLink",function(){return x}),t.d(n,"EOL",function(){return P}),t.d(n,"TextDocument",function(){return M}),t.d(n,"TextDocumentSaveReason",function(){return K}),function(e){e.create=function(e,n){return{line:e,character:n}},e.is=function(e){var n=e;return D.defined(n)&&D.number(n.line)&&D.number(n.character)}}(r||(r={})),function(e){e.create=function(e,n,t,o){if(D.number(e)&&D.number(n)&&D.number(t)&&D.number(o))return{start:r.create(e,n),end:r.create(t,o)};if(r.is(e)&&r.is(n))return{start:e,end:n};throw new Error("Range#create called with invalid arguments["+e+", "+n+", "+t+", "+o+"]")},e.is=function(e){var n=e;return D.defined(n)&&r.is(n.start)&&r.is(n.end)}}(o||(o={})),function(e){e.create=function(e,n){return{uri:e,range:n}},e.is=function(e){var n=e;return D.defined(n)&&o.is(n.range)&&(D.string(n.uri)||D.undefined(n.uri))}}(i||(i={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(a||(a={})),function(e){e.create=function(e,n,t,r,o){var i={range:e,message:n};return D.defined(t)&&(i.severity=t),D.defined(r)&&(i.code=r),D.defined(o)&&(i.source=o),i},e.is=function(e){var n=e;return D.defined(n)&&o.is(n.range)&&D.string(n.message)&&(D.number(n.severity)||D.undefined(n.severity))&&(D.number(n.code)||D.string(n.code)||D.undefined(n.code))&&(D.string(n.source)||D.undefined(n.source))}}(u||(u={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var o={title:e,command:n};return D.defined(t)&&t.length>0&&(o.arguments=t),o},e.is=function(e){var n=e;return D.defined(n)&&D.string(n.title)&&D.string(n.title)}}(s||(s={})),function(e){e.replace=function(e,n){return{range:e,newText:n}},e.insert=function(e,n){return{range:{start:e,end:e},newText:n}},e.del=function(e){return{range:e,newText:""}}}(c||(c={})),function(e){e.create=function(e,n){return{textDocument:e,edits:n}},e.is=function(e){var n=e;return D.defined(n)&&l.is(n.textDocument)&&Array.isArray(n.edits)}}(f||(f={}));var d,l,g,h,m,p,v,b,y,_,k,C,w,j,E,S,T,A,O=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,n){this.edits.push(c.insert(e,n))},e.prototype.replace=function(e,n){this.edits.push(c.replace(e,n))},e.prototype.delete=function(e){this.edits.push(c.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}(),I=function(){function e(e){var n=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach(function(e){var t=new O(e.edits);n._textEditChanges[e.textDocument.uri]=t}):e.changes&&Object.keys(e.changes).forEach(function(t){var r=new O(e.changes[t]);n._textEditChanges[t]=r}))}return Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(l.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for versioned document changes.");var n=e;if(!(r=this._textEditChanges[n.uri])){var t={textDocument:n,edits:o=[]};this._workspaceEdit.documentChanges.push(t),r=new O(o),this._textEditChanges[n.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var o=[];this._workspaceEdit.changes[e]=o,r=new O(o),this._textEditChanges[e]=r}return r},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var n=e;return D.defined(n)&&D.string(n.uri)}}(d||(d={})),function(e){e.create=function(e,n){return{uri:e,version:n}},e.is=function(e){var n=e;return D.defined(n)&&D.string(n.uri)&&D.number(n.version)}}(l||(l={})),function(e){e.create=function(e,n,t,r){return{uri:e,languageId:n,version:t,text:r}},e.is=function(e){var n=e;return D.defined(n)&&D.string(n.uri)&&D.string(n.languageId)&&D.number(n.version)&&D.string(n.text)}}(g||(g={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(h||(h={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(m||(m={})),function(e){e.PlainText=1,e.Snippet=2}(p||(p={})),function(e){e.create=function(e){return{label:e}}}(v||(v={})),function(e){e.create=function(e,n){return{items:e||[],isIncomplete:!!n}}}(b||(b={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}}(y||(y={})),function(e){e.create=function(e,n){return n?{label:e,documentation:n}:{label:e}}}(_||(_={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var o={label:e};return D.defined(n)&&(o.documentation=n),D.defined(t)?o.parameters=t:o.parameters=[],o}}(k||(k={})),function(e){e.Text=1,e.Read=2,e.Write=3}(C||(C={})),function(e){e.create=function(e,n){var t={range:e};return D.number(n)&&(t.kind=n),t}}(w||(w={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(j||(j={})),function(e){e.create=function(e,n,t,r,o){var i={name:e,kind:n,location:{uri:r,range:t}};return o&&(i.containerName=o),i}}(E||(E={})),function(e){e.create=function(e){return{diagnostics:e}},e.is=function(e){var n=e;return D.defined(n)&&D.typedArray(n.diagnostics,u.is)}}(S||(S={})),function(e){e.create=function(e,n){var t={range:e};return D.defined(n)&&(t.data=n),t},e.is=function(e){var n=e;return D.defined(n)&&o.is(n.range)&&(D.undefined(n.command)||s.is(n.command))}}(T||(T={})),function(e){e.create=function(e,n){return{tabSize:e,insertSpaces:n}},e.is=function(e){var n=e;return D.defined(n)&&D.number(n.tabSize)&&D.boolean(n.insertSpaces)}}(A||(A={}));var x=function(){return function(){}}();!function(e){e.create=function(e,n){return{range:e,target:n}},e.is=function(e){var n=e;return D.defined(n)&&o.is(n.range)&&(D.undefined(n.target)||D.string(n.target))}}(x||(x={}));var M,K,P=["\n","\r\n","\r"];!function(e){e.create=function(e,n,t,r){return new L(e,n,t,r)},e.is=function(e){var n=e;return!!(D.defined(n)&&D.string(n.uri)&&(D.undefined(n.languageId)||D.string(n.languageId))&&D.number(n.lineCount)&&D.func(n.getText)&&D.func(n.positionAt)&&D.func(n.offsetAt))},e.applyEdits=function(e,n){for(var t=e.getText(),r=function e(n,t){if(n.length<=1)return n;var r=n.length/2|0,o=n.slice(0,r),i=n.slice(r);e(o,t),e(i,t);for(var a=0,u=0,s=0;a<o.length&&u<i.length;){var c=t(o[a],i[u]);n[s++]=c<=0?o[a++]:i[u++]}for(;a<o.length;)n[s++]=o[a++];for(;u<i.length;)n[s++]=i[u++];return n}(n,function(e,n){return 0==e.range.start.line-n.range.start.line?e.range.start.character-n.range.start.character:0}),o=t.length,i=r.length-1;i>=0;i--){var a=r[i],u=e.offsetAt(a.range.start),s=e.offsetAt(a.range.end);if(!(s<=o))throw new Error("Ovelapping edit");t=t.substring(0,u)+a.newText+t.substring(s,t.length),o=u}return t}}(M||(M={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(K||(K={}));var D,L=function(){function e(e,n,t,r){this._uri=e,this._languageId=n,this._version=t,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var n=this.offsetAt(e.start),t=this.offsetAt(e.end);return this._content.substring(n,t)}return this._content},e.prototype.update=function(e,n){this._content=e.text,this._version=n,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],n=this._content,t=!0,r=0;r<n.length;r++){t&&(e.push(r),t=!1);var o=n.charAt(r);t="\r"===o||"\n"===o,"\r"===o&&r+1<n.length&&"\n"===n.charAt(r+1)&&r++}t&&n.length>0&&e.push(n.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var n=this.getLineOffsets(),t=0,o=n.length;if(0===o)return r.create(0,e);for(;t<o;){var i=Math.floor((t+o)/2);n[i]>e?o=i:t=i+1}var a=t-1;return r.create(a,e-n[a])},e.prototype.offsetAt=function(e){var n=this.getLineOffsets();if(e.line>=n.length)return this._content.length;if(e.line<0)return 0;var t=n[e.line],r=e.line+1<n.length?n[e.line+1]:this._content.length;return Math.max(Math.min(t+e.character,r),t)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var n=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===n.call(e)},e.number=function(e){return"[object Number]"===n.call(e)},e.func=function(e){return"[object Function]"===n.call(e)},e.typedArray=function(e,n){return Array.isArray(e)&&e.every(n)}}(D||(D={}))},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/jsonMode.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/jsonMode.js ***!
  \******************************************************************************************************/
/*! exports provided: setupMode */function(e,n,t){"use strict";t.r(n),t.d(n,"setupMode",function(){return a});var r=t(/*! ./workerManager.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/workerManager.js"),o=t(/*! ./languageFeatures.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js"),i=t(/*! ./tokenization.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/tokenization.js");function a(e){var n=[],t=new r.WorkerManager(e);n.push(t);var a=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.getLanguageServiceWorker.apply(t,e)},s=e.languageId;n.push(monaco.languages.registerCompletionItemProvider(s,new o.CompletionAdapter(a))),n.push(monaco.languages.registerHoverProvider(s,new o.HoverAdapter(a))),n.push(monaco.languages.registerDocumentSymbolProvider(s,new o.DocumentSymbolAdapter(a))),n.push(monaco.languages.registerDocumentFormattingEditProvider(s,new o.DocumentFormattingEditProvider(a))),n.push(monaco.languages.registerDocumentRangeFormattingEditProvider(s,new o.DocumentRangeFormattingEditProvider(a))),n.push(new o.DiagnosticsAdapter(s,a,e)),n.push(monaco.languages.setTokensProvider(s,Object(i.createTokenizationSupport)(!0))),n.push(monaco.languages.setLanguageConfiguration(s,u)),n.push(monaco.languages.registerColorProvider(s,new o.DocumentColorAdapter(a)))}var u={wordPattern:/(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:'"',close:'"',notIn:["string"]}]}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js ***!
  \**************************************************************************************************************/
/*! exports provided: DiagnosticsAdapter, CompletionAdapter, HoverAdapter, DocumentSymbolAdapter, DocumentFormattingEditProvider, DocumentRangeFormattingEditProvider, DocumentColorAdapter */function(e,n,t){"use strict";t.r(n),t.d(n,"DiagnosticsAdapter",function(){return a}),t.d(n,"CompletionAdapter",function(){return l}),t.d(n,"HoverAdapter",function(){return h}),t.d(n,"DocumentSymbolAdapter",function(){return m}),t.d(n,"DocumentFormattingEditProvider",function(){return v}),t.d(n,"DocumentRangeFormattingEditProvider",function(){return b}),t.d(n,"DocumentColorAdapter",function(){return y});var r=t(/*! ./_deps/vscode-languageserver-types/main.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js"),o=monaco.Uri,i=monaco.Range,a=function(){function e(e,n,t){var r=this;this._languageId=e,this._worker=n,this._disposables=[],this._listener=Object.create(null);var o=function(e){var n,t=e.getModeId();t===r._languageId&&(r._listener[e.uri.toString()]=e.onDidChangeContent(function(){clearTimeout(n),n=setTimeout(function(){return r._doValidate(e.uri,t)},500)}),r._doValidate(e.uri,t))},i=function(e){monaco.editor.setModelMarkers(e,r._languageId,[]);var n=e.uri.toString(),t=r._listener[n];t&&(t.dispose(),delete r._listener[n])};this._disposables.push(monaco.editor.onDidCreateModel(o)),this._disposables.push(monaco.editor.onWillDisposeModel(function(e){i(e),r._resetSchema(e.uri)})),this._disposables.push(monaco.editor.onDidChangeModelLanguage(function(e){i(e.model),o(e.model),r._resetSchema(e.model.uri)})),this._disposables.push(t.onDidChange(function(e){monaco.editor.getModels().forEach(function(e){e.getModeId()===r._languageId&&(i(e),o(e))})})),this._disposables.push({dispose:function(){for(var e in monaco.editor.getModels().forEach(i),r._listener)r._listener[e].dispose()}}),monaco.editor.getModels().forEach(o)}return e.prototype.dispose=function(){this._disposables.forEach(function(e){return e&&e.dispose()}),this._disposables=[]},e.prototype._resetSchema=function(e){this._worker().then(function(n){n.resetSchema(e.toString())})},e.prototype._doValidate=function(e,n){this._worker(e).then(function(t){return t.doValidation(e.toString()).then(function(t){var o=t.map(function(e){return function(e,n){var t="number"==typeof n.code?String(n.code):n.code;return{severity:function(e){switch(e){case r.DiagnosticSeverity.Error:return monaco.MarkerSeverity.Error;case r.DiagnosticSeverity.Warning:return monaco.MarkerSeverity.Warning;case r.DiagnosticSeverity.Information:return monaco.MarkerSeverity.Info;case r.DiagnosticSeverity.Hint:return monaco.MarkerSeverity.Hint;default:return monaco.MarkerSeverity.Info}}(n.severity),startLineNumber:n.range.start.line+1,startColumn:n.range.start.character+1,endLineNumber:n.range.end.line+1,endColumn:n.range.end.character+1,message:n.message,code:t,source:n.source}}(0,e)}),i=monaco.editor.getModel(e);i.getModeId()===n&&monaco.editor.setModelMarkers(i,n,o)})}).then(void 0,function(e){console.error(e)})},e}();function u(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function s(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function c(e){if(e)return new i(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function f(e){var n=monaco.languages.CompletionItemKind;switch(e){case r.CompletionItemKind.Text:return n.Text;case r.CompletionItemKind.Method:return n.Method;case r.CompletionItemKind.Function:return n.Function;case r.CompletionItemKind.Constructor:return n.Constructor;case r.CompletionItemKind.Field:return n.Field;case r.CompletionItemKind.Variable:return n.Variable;case r.CompletionItemKind.Class:return n.Class;case r.CompletionItemKind.Interface:return n.Interface;case r.CompletionItemKind.Module:return n.Module;case r.CompletionItemKind.Property:return n.Property;case r.CompletionItemKind.Unit:return n.Unit;case r.CompletionItemKind.Value:return n.Value;case r.CompletionItemKind.Enum:return n.Enum;case r.CompletionItemKind.Keyword:return n.Keyword;case r.CompletionItemKind.Snippet:return n.Snippet;case r.CompletionItemKind.Color:return n.Color;case r.CompletionItemKind.File:return n.File;case r.CompletionItemKind.Reference:return n.Reference}return n.Property}function d(e){if(e)return{range:c(e.range),text:e.newText}}var l=function(){function e(e){this._worker=e}return Object.defineProperty(e.prototype,"triggerCharacters",{get:function(){return[" ",":"]},enumerable:!0,configurable:!0}),e.prototype.provideCompletionItems=function(e,n,t){e.getWordUntilPosition(n);var o=e.uri;return _(t,this._worker(o).then(function(e){return e.doComplete(o.toString(),u(n))}).then(function(e){if(e){var n=e.items.map(function(e){var n={label:e.label,insertText:e.insertText,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,kind:f(e.kind)};return e.textEdit&&(n.range=c(e.textEdit.range),n.insertText=e.textEdit.newText),e.insertTextFormat===r.InsertTextFormat.Snippet&&(n.insertText={value:n.insertText}),n});return{isIncomplete:e.isIncomplete,items:n}}}))},e}();function g(e){return"string"==typeof e?{value:e}:function(e){return e&&"object"==typeof e&&"string"==typeof e.kind}(e)?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"}}var h=function(){function e(e){this._worker=e}return e.prototype.provideHover=function(e,n,t){var r=e.uri;return _(t,this._worker(r).then(function(e){return e.doHover(r.toString(),u(n))}).then(function(e){if(e)return{range:c(e.range),contents:function(e){if(e)return Array.isArray(e)?e.map(g):[g(e)]}(e.contents)}}))},e}();var m=function(){function e(e){this._worker=e}return e.prototype.provideDocumentSymbols=function(e,n){var t=e.uri;return _(n,this._worker(t).then(function(e){return e.findDocumentSymbols(t.toString())}).then(function(e){if(e)return e.map(function(e){return{name:e.name,containerName:e.containerName,kind:function(e){var n=monaco.languages.SymbolKind;switch(e){case r.SymbolKind.File:return n.Array;case r.SymbolKind.Module:return n.Module;case r.SymbolKind.Namespace:return n.Namespace;case r.SymbolKind.Package:return n.Package;case r.SymbolKind.Class:return n.Class;case r.SymbolKind.Method:return n.Method;case r.SymbolKind.Property:return n.Property;case r.SymbolKind.Field:return n.Field;case r.SymbolKind.Constructor:return n.Constructor;case r.SymbolKind.Enum:return n.Enum;case r.SymbolKind.Interface:return n.Interface;case r.SymbolKind.Function:return n.Function;case r.SymbolKind.Variable:return n.Variable;case r.SymbolKind.Constant:return n.Constant;case r.SymbolKind.String:return n.String;case r.SymbolKind.Number:return n.Number;case r.SymbolKind.Boolean:return n.Boolean;case r.SymbolKind.Array:return n.Array}return n.Function}(e.kind),location:function(e){return{uri:o.parse(e.uri),range:c(e.range)}}(e.location)}})}))},e}();function p(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var v=function(){function e(e){this._worker=e}return e.prototype.provideDocumentFormattingEdits=function(e,n,t){var r=e.uri;return _(t,this._worker(r).then(function(e){return e.format(r.toString(),null,p(n)).then(function(e){if(e&&0!==e.length)return e.map(d)})}))},e}(),b=function(){function e(e){this._worker=e}return e.prototype.provideDocumentRangeFormattingEdits=function(e,n,t,r){var o=e.uri;return _(r,this._worker(o).then(function(e){return e.format(o.toString(),s(n),p(t)).then(function(e){if(e&&0!==e.length)return e.map(d)})}))},e}(),y=function(){function e(e){this._worker=e}return e.prototype.provideDocumentColors=function(e,n){var t=e.uri;return _(n,this._worker(t).then(function(e){return e.findDocumentColors(t.toString())}).then(function(e){if(e)return e.map(function(e){return{color:e.color,range:c(e.range)}})}))},e.prototype.provideColorPresentations=function(e,n,t){var r=e.uri;return _(t,this._worker(r).then(function(e){return e.getColorPresentations(r.toString(),n.color,s(n.range))}).then(function(e){if(e)return e.map(function(e){var n={label:e.label};return e.textEdit&&(n.textEdit=d(e.textEdit)),e.additionalTextEdits&&(n.additionalTextEdits=e.additionalTextEdits.map(d)),n})}))},e}();function _(e,n){return n.cancel&&e.onCancellationRequested(function(){return n.cancel()}),n}},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/tokenization.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/tokenization.js ***!
  \**********************************************************************************************************/
/*! exports provided: createTokenizationSupport, TOKEN_DELIM_OBJECT, TOKEN_DELIM_ARRAY, TOKEN_DELIM_COLON, TOKEN_DELIM_COMMA, TOKEN_VALUE_BOOLEAN, TOKEN_VALUE_NULL, TOKEN_VALUE_STRING, TOKEN_VALUE_NUMBER, TOKEN_PROPERTY_NAME, TOKEN_COMMENT_BLOCK, TOKEN_COMMENT_LINE */function(e,n,t){"use strict";t.r(n),t.d(n,"createTokenizationSupport",function(){return o}),t.d(n,"TOKEN_DELIM_OBJECT",function(){return i}),t.d(n,"TOKEN_DELIM_ARRAY",function(){return a}),t.d(n,"TOKEN_DELIM_COLON",function(){return u}),t.d(n,"TOKEN_DELIM_COMMA",function(){return s}),t.d(n,"TOKEN_VALUE_BOOLEAN",function(){return c}),t.d(n,"TOKEN_VALUE_NULL",function(){return f}),t.d(n,"TOKEN_VALUE_STRING",function(){return d}),t.d(n,"TOKEN_VALUE_NUMBER",function(){return l}),t.d(n,"TOKEN_PROPERTY_NAME",function(){return g}),t.d(n,"TOKEN_COMMENT_BLOCK",function(){return h}),t.d(n,"TOKEN_COMMENT_LINE",function(){return m});var r=t(/*! ./_deps/jsonc-parser/main.js */"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js");function o(e){return{getInitialState:function(){return new p(null,null,!1)},tokenize:function(n,t,o,v){return function(e,n,t,o,v){void 0===o&&(o=0);var b=0,y=!1;switch(t.scanError){case 2:n='"'+n,b=1;break;case 1:n="/*"+n,b=2}var _,k,C=r.createScanner(n),w=t.lastWasColon;k={tokens:[],endState:t.clone()};for(;;){var j=o+C.getPosition(),E="";if(17===(_=C.scan()))break;if(j===o+C.getPosition())throw new Error("Scanner did not advance, next 3 characters are: "+n.substr(C.getPosition(),3));switch(y&&(j-=b),y=b>0,_){case 1:case 2:E=i,w=!1;break;case 3:case 4:E=a,w=!1;break;case 6:E=u,w=!0;break;case 5:E=s,w=!1;break;case 8:case 9:E=c,w=!1;break;case 7:E=f,w=!1;break;case 10:E=w?d:g,w=!1;break;case 11:E=l,w=!1}if(e)switch(_){case 12:E=m;break;case 13:E=h}k.endState=new p(t.getStateData(),C.getTokenError(),w),k.tokens.push({startIndex:j,scopes:E})}return k}(e,n,t,o)}}}var i="delimiter.bracket.json",a="delimiter.array.json",u="delimiter.colon.json",s="delimiter.comma.json",c="keyword.json",f="keyword.json",d="string.value.json",l="number.json",g="string.key.json",h="comment.block.json",m="comment.line.json",p=function(){function e(e,n,t){this._state=e,this.scanError=n,this.lastWasColon=t}return e.prototype.clone=function(){return new e(this._state,this.scanError,this.lastWasColon)},e.prototype.equals=function(n){return n===this||!!(n&&n instanceof e)&&(this.scanError===n.scanError&&this.lastWasColon===n.lastWasColon)},e.prototype.getStateData=function(){return this._state},e.prototype.setStateData=function(e){this._state=e},e}()},"./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/workerManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/react-monaco-editor/node_modules/monaco-editor/esm/vs/language/json/workerManager.js ***!
  \***********************************************************************************************************/
/*! exports provided: WorkerManager */function(e,n,t){"use strict";t.r(n),t.d(n,"WorkerManager",function(){return o});var r=monaco.Promise,o=function(){function e(e){var n=this;this._defaults=e,this._worker=null,this._idleCheckInterval=setInterval(function(){return n._checkIfIdle()},3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange(function(){return n._stopWorker()})}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},e.prototype._checkIfIdle=function(){this._worker&&(Date.now()-this._lastUsedTime>12e4&&this._stopWorker())},e.prototype._getClient=function(){return this._lastUsedTime=Date.now(),this._client||(this._worker=monaco.editor.createWebWorker({moduleId:"vs/language/json/jsonWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId}}),this._client=this._worker.getProxy()),this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,n=this,t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return function(e){var n,t,o=new r(function(e,r){n=e,t=r},function(){});return e.then(n,t),o}(this._getClient().then(function(n){e=n}).then(function(e){return n._worker.withSyncedResources(t)}).then(function(n){return e}))},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,