{"version":3,"sources":["webpack:///./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/elixir.js"],"names":["module","exports","hljs","ELIXIR_IDENT_RE","ELIXIR_KEYWORDS","$pattern","keyword","SUBST","className","begin","end","keywords","NUMBER","relevance","LOWERCASE_SIGIL","contains","endsParent","BACKSLASH_ESCAPE","variants","UPCASE_SIGIL","STRING","FUNCTION","beginKeywords","inherit","TITLE_MODE","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","RE_STARTERS_RE","illegal","name"],"mappings":"6EAsLAA,EAAOC,QA9KP,SAAgBC,GACd,IAAIC,EAAkB,oCAElBC,EAAkB,CACpBC,SAAUF,EACVG,QAAS,uMAIPC,EAAQ,CACVC,UAAW,QACXC,MAAO,OAAQC,IAAK,IACpBC,SAAUP,GAERQ,EAAS,CACXJ,UAAW,SACXC,MAAO,qGACPI,UAAW,GAGTC,EAAkB,CACpBN,UAAW,SACXC,MAAO,wBACPM,SAAU,CACR,CACEC,YAAW,EACXD,SAAU,CAAC,CACTA,SAAU,CAACb,EAAKe,iBAAkBV,GAClCW,SAAU,CACR,CAAET,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,IAAKC,IAAK,WAOzBS,EAAe,CACjBX,UAAW,SACXC,MAAO,wBACPM,SAAU,CACR,CAAEN,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,IAAKC,IAAK,KACnB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,MACpB,CAAED,MAAO,KAAMC,IAAK,QAIpBU,EAAS,CACXZ,UAAW,SACXO,SAAU,CAACb,EAAKe,iBAAkBV,GAClCW,SAAU,CACR,CACET,MAAO,MAAOC,IAAK,OAErB,CACED,MAAO,MAAOC,IAAK,OAErB,CACED,MAAO,QAASC,IAAK,MACrBK,SAAU,IAEZ,CACEN,MAAO,MAAOC,IAAK,IACnBK,SAAU,IAEZ,CACEN,MAAO,QAASC,IAAK,MACrBK,SAAU,IAEZ,CACEN,MAAO,MAAOC,IAAK,IACnBK,SAAU,IAEZ,CACEN,MAAO,IAAKC,IAAK,KAEnB,CACED,MAAO,IAAKC,IAAK,OAInBW,EAAW,CACbb,UAAW,WACXc,cAAe,oBAAqBZ,IAAK,OACzCK,SAAU,CACRb,EAAKqB,QAAQrB,EAAKsB,WAAY,CAC5Bf,MAAON,EACPa,YAAY,MAIdS,EAAQvB,EAAKqB,QAAQF,EAAU,CACjCb,UAAW,QACXc,cAAe,0CAA2CZ,IAAK,eAE7DgB,EAA0B,CAC5BN,EACAD,EACAL,EACAZ,EAAKyB,kBACLF,EACAJ,EACA,CACEZ,MAAO,MAET,CACED,UAAW,SACXC,MAAO,cACPM,SAAU,CAACK,EAAQ,CAACX,MArHD,uFAsHnBI,UAAW,GAEb,CACEL,UAAW,SACXC,MAAON,EAAkB,SACzBU,UAAW,GAEbD,EACA,CACEJ,UAAW,WACXC,MAAO,kCAET,CACEA,MAAO,MAET,CACEA,MAAO,IAAMP,EAAK0B,eAAiB,QACnCb,SAAU,CACRb,EAAKyB,kBACL,CAGElB,MAAO,sBACPI,UAAW,EACXE,SAAU,CACRH,IAGJ,CACEJ,UAAW,SACXqB,QAAS,MACTd,SAAU,CAACb,EAAKe,iBAAkBV,GAClCW,SAAU,CACR,CACET,MAAO,IAAKC,IAAK,WAEnB,CACED,MAAO,QAASC,IAAK,gBAK7BG,UAAW,IAKf,OAFAN,EAAMQ,SAAWW,EAEV,CACLI,KAAM,SACNnB,SAAUP,EACVW,SAAUW","file":"53.bundle.js","sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\nfunction elixir(hljs) {\n  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(\\\\!|\\\\?)?';\n  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  var ELIXIR_KEYWORDS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: 'and false then defined module in return redo retry end for true self when ' +\n    'next until do begin unless nil break not case cond alias while ensure or ' +\n    'include use alias fn quote require import with|0'\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{', end: '}',\n    keywords: ELIXIR_KEYWORDS\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  var SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  var LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        endsParent:true,\n        contains: [{\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          variants: [\n            { begin: /\"/, end: /\"/ },\n            { begin: /'/, end: /'/ },\n            { begin: /\\//, end: /\\// },\n            { begin: /\\|/, end: /\\|/ },\n            { begin: /\\(/, end: /\\)/ },\n            { begin: /\\[/, end: /\\]/ },\n            { begin: /\\{/, end: /\\}/ },\n            { begin: /</, end: />/ }\n          ]\n        }]\n      },\n    ],\n  };\n\n  var UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      { begin: /\"/, end: /\"/ },\n      { begin: /'/, end: /'/ },\n      { begin: /\\//, end: /\\// },\n      { begin: /\\|/, end: /\\|/ },\n      { begin: /\\(/, end: /\\)/ },\n      { begin: /\\[/, end: /\\]/ },\n      { begin: /\\{/, end: /\\}/ },\n      { begin: /\\</, end: /\\>/ }\n    ]\n  };\n\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {\n        begin: /\"\"\"/, end: /\"\"\"/,\n      },\n      {\n        begin: /'''/, end: /'''/,\n      },\n      {\n        begin: /~S\"\"\"/, end: /\"\"\"/,\n        contains: []\n      },\n      {\n        begin: /~S\"/, end: /\"/,\n        contains: []\n      },\n      {\n        begin: /~S'''/, end: /'''/,\n        contains: []\n      },\n      {\n        begin: /~S'/, end: /'/,\n        contains: []\n      },\n      {\n        begin: /'/, end: /'/\n      },\n      {\n        begin: /\"/, end: /\"/\n      },\n    ]\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro', end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  var CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\\bdo\\b|$|;/\n  });\n  var ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [STRING, {begin: ELIXIR_METHOD_RE}],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|\\\\@\\\\@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          // to prevent false regex triggers for the division function:\n          // /:\n          begin: /\\/: (?=\\d+\\s*[,\\]])/,\n          relevance: 0,\n          contains: [\n            NUMBER\n          ]\n        },\n        {\n          className: 'regexp',\n          illegal: '\\\\n',\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          variants: [\n            {\n              begin: '/', end: '/[a-z]*'\n            },\n            {\n              begin: '%r\\\\[', end: '\\\\][a-z]*'\n            }\n          ]\n        }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"],"sourceRoot":""}